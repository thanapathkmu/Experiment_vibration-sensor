
ReadPIEZOAndMEMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4c8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025354  0800c660  0800c660  0000d660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080319b4  080319b4  00033210  2**0
                  CONTENTS
  4 .ARM          00000008  080319b4  080319b4  000329b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080319bc  080319bc  00033210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080319bc  080319bc  000329bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080319c0  080319c0  000329c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  080319c4  00033000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014c08  20000210  08031bd4  00033210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014e18  08031bd4  00033e18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00033210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000258af  00000000  00000000  00033240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002faf  00000000  00000000  00058aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b8  00000000  00000000  0005baa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001460  00000000  00000000  0005d458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019454  00000000  00000000  0005e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024bc0  00000000  00000000  00077d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3803  00000000  00000000  0009c8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001400cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074ec  00000000  00000000  00140114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00147600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000210 	.word	0x20000210
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c648 	.word	0x0800c648

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000214 	.word	0x20000214
 80001d4:	0800c648 	.word	0x0800c648

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b96a 	b.w	8000d00 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	460c      	mov	r4, r1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d14e      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a50:	4694      	mov	ip, r2
 8000a52:	458c      	cmp	ip, r1
 8000a54:	4686      	mov	lr, r0
 8000a56:	fab2 f282 	clz	r2, r2
 8000a5a:	d962      	bls.n	8000b22 <__udivmoddi4+0xde>
 8000a5c:	b14a      	cbz	r2, 8000a72 <__udivmoddi4+0x2e>
 8000a5e:	f1c2 0320 	rsb	r3, r2, #32
 8000a62:	4091      	lsls	r1, r2
 8000a64:	fa20 f303 	lsr.w	r3, r0, r3
 8000a68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6c:	4319      	orrs	r1, r3
 8000a6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a76:	fa1f f68c 	uxth.w	r6, ip
 8000a7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a82:	fb07 1114 	mls	r1, r7, r4, r1
 8000a86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a8a:	fb04 f106 	mul.w	r1, r4, r6
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a9a:	f080 8112 	bcs.w	8000cc2 <__udivmoddi4+0x27e>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 810f 	bls.w	8000cc2 <__udivmoddi4+0x27e>
 8000aa4:	3c02      	subs	r4, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a59      	subs	r1, r3, r1
 8000aaa:	fa1f f38e 	uxth.w	r3, lr
 8000aae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ab2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aba:	fb00 f606 	mul.w	r6, r0, r6
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x94>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aca:	f080 80fc 	bcs.w	8000cc6 <__udivmoddi4+0x282>
 8000ace:	429e      	cmp	r6, r3
 8000ad0:	f240 80f9 	bls.w	8000cc6 <__udivmoddi4+0x282>
 8000ad4:	4463      	add	r3, ip
 8000ad6:	3802      	subs	r0, #2
 8000ad8:	1b9b      	subs	r3, r3, r6
 8000ada:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ade:	2100      	movs	r1, #0
 8000ae0:	b11d      	cbz	r5, 8000aea <__udivmoddi4+0xa6>
 8000ae2:	40d3      	lsrs	r3, r2
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d905      	bls.n	8000afe <__udivmoddi4+0xba>
 8000af2:	b10d      	cbz	r5, 8000af8 <__udivmoddi4+0xb4>
 8000af4:	e9c5 0100 	strd	r0, r1, [r5]
 8000af8:	2100      	movs	r1, #0
 8000afa:	4608      	mov	r0, r1
 8000afc:	e7f5      	b.n	8000aea <__udivmoddi4+0xa6>
 8000afe:	fab3 f183 	clz	r1, r3
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d146      	bne.n	8000b94 <__udivmoddi4+0x150>
 8000b06:	42a3      	cmp	r3, r4
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xcc>
 8000b0a:	4290      	cmp	r0, r2
 8000b0c:	f0c0 80f0 	bcc.w	8000cf0 <__udivmoddi4+0x2ac>
 8000b10:	1a86      	subs	r6, r0, r2
 8000b12:	eb64 0303 	sbc.w	r3, r4, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d0e6      	beq.n	8000aea <__udivmoddi4+0xa6>
 8000b1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b20:	e7e3      	b.n	8000aea <__udivmoddi4+0xa6>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	f040 8090 	bne.w	8000c48 <__udivmoddi4+0x204>
 8000b28:	eba1 040c 	sub.w	r4, r1, ip
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	fa1f f78c 	uxth.w	r7, ip
 8000b34:	2101      	movs	r1, #1
 8000b36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b46:	fb07 f006 	mul.w	r0, r7, r6
 8000b4a:	4298      	cmp	r0, r3
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x11c>
 8000b4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x11a>
 8000b58:	4298      	cmp	r0, r3
 8000b5a:	f200 80cd 	bhi.w	8000cf8 <__udivmoddi4+0x2b4>
 8000b5e:	4626      	mov	r6, r4
 8000b60:	1a1c      	subs	r4, r3, r0
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b72:	fb00 f707 	mul.w	r7, r0, r7
 8000b76:	429f      	cmp	r7, r3
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0x148>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b82:	d202      	bcs.n	8000b8a <__udivmoddi4+0x146>
 8000b84:	429f      	cmp	r7, r3
 8000b86:	f200 80b0 	bhi.w	8000cea <__udivmoddi4+0x2a6>
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	1bdb      	subs	r3, r3, r7
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	e7a5      	b.n	8000ae0 <__udivmoddi4+0x9c>
 8000b94:	f1c1 0620 	rsb	r6, r1, #32
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b9e:	431f      	orrs	r7, r3
 8000ba0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ba4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ba8:	ea43 030c 	orr.w	r3, r3, ip
 8000bac:	40f4      	lsrs	r4, r6
 8000bae:	fa00 f801 	lsl.w	r8, r0, r1
 8000bb2:	0c38      	lsrs	r0, r7, #16
 8000bb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bcc:	45a1      	cmp	r9, r4
 8000bce:	fa02 f201 	lsl.w	r2, r2, r1
 8000bd2:	d90a      	bls.n	8000bea <__udivmoddi4+0x1a6>
 8000bd4:	193c      	adds	r4, r7, r4
 8000bd6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bda:	f080 8084 	bcs.w	8000ce6 <__udivmoddi4+0x2a2>
 8000bde:	45a1      	cmp	r9, r4
 8000be0:	f240 8081 	bls.w	8000ce6 <__udivmoddi4+0x2a2>
 8000be4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000be8:	443c      	add	r4, r7
 8000bea:	eba4 0409 	sub.w	r4, r4, r9
 8000bee:	fa1f f983 	uxth.w	r9, r3
 8000bf2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bf6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bfa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bfe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c02:	45a4      	cmp	ip, r4
 8000c04:	d907      	bls.n	8000c16 <__udivmoddi4+0x1d2>
 8000c06:	193c      	adds	r4, r7, r4
 8000c08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c0c:	d267      	bcs.n	8000cde <__udivmoddi4+0x29a>
 8000c0e:	45a4      	cmp	ip, r4
 8000c10:	d965      	bls.n	8000cde <__udivmoddi4+0x29a>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	443c      	add	r4, r7
 8000c16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c1e:	eba4 040c 	sub.w	r4, r4, ip
 8000c22:	429c      	cmp	r4, r3
 8000c24:	46ce      	mov	lr, r9
 8000c26:	469c      	mov	ip, r3
 8000c28:	d351      	bcc.n	8000cce <__udivmoddi4+0x28a>
 8000c2a:	d04e      	beq.n	8000cca <__udivmoddi4+0x286>
 8000c2c:	b155      	cbz	r5, 8000c44 <__udivmoddi4+0x200>
 8000c2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c32:	eb64 040c 	sbc.w	r4, r4, ip
 8000c36:	fa04 f606 	lsl.w	r6, r4, r6
 8000c3a:	40cb      	lsrs	r3, r1
 8000c3c:	431e      	orrs	r6, r3
 8000c3e:	40cc      	lsrs	r4, r1
 8000c40:	e9c5 6400 	strd	r6, r4, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	e750      	b.n	8000aea <__udivmoddi4+0xa6>
 8000c48:	f1c2 0320 	rsb	r3, r2, #32
 8000c4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c54:	fa24 f303 	lsr.w	r3, r4, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	430c      	orrs	r4, r1
 8000c5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c64:	fa1f f78c 	uxth.w	r7, ip
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c70:	0c23      	lsrs	r3, r4, #16
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f107 	mul.w	r1, r0, r7
 8000c7a:	4299      	cmp	r1, r3
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x24c>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c86:	d22c      	bcs.n	8000ce2 <__udivmoddi4+0x29e>
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d92a      	bls.n	8000ce2 <__udivmoddi4+0x29e>
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c98:	fb08 3311 	mls	r3, r8, r1, r3
 8000c9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca0:	fb01 f307 	mul.w	r3, r1, r7
 8000ca4:	42a3      	cmp	r3, r4
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x276>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cb0:	d213      	bcs.n	8000cda <__udivmoddi4+0x296>
 8000cb2:	42a3      	cmp	r3, r4
 8000cb4:	d911      	bls.n	8000cda <__udivmoddi4+0x296>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4464      	add	r4, ip
 8000cba:	1ae4      	subs	r4, r4, r3
 8000cbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cc0:	e739      	b.n	8000b36 <__udivmoddi4+0xf2>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	e6f0      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e706      	b.n	8000ad8 <__udivmoddi4+0x94>
 8000cca:	45c8      	cmp	r8, r9
 8000ccc:	d2ae      	bcs.n	8000c2c <__udivmoddi4+0x1e8>
 8000cce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cd6:	3801      	subs	r0, #1
 8000cd8:	e7a8      	b.n	8000c2c <__udivmoddi4+0x1e8>
 8000cda:	4631      	mov	r1, r6
 8000cdc:	e7ed      	b.n	8000cba <__udivmoddi4+0x276>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	e799      	b.n	8000c16 <__udivmoddi4+0x1d2>
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	e7d4      	b.n	8000c90 <__udivmoddi4+0x24c>
 8000ce6:	46d6      	mov	lr, sl
 8000ce8:	e77f      	b.n	8000bea <__udivmoddi4+0x1a6>
 8000cea:	4463      	add	r3, ip
 8000cec:	3802      	subs	r0, #2
 8000cee:	e74d      	b.n	8000b8c <__udivmoddi4+0x148>
 8000cf0:	4606      	mov	r6, r0
 8000cf2:	4623      	mov	r3, r4
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	e70f      	b.n	8000b18 <__udivmoddi4+0xd4>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	e730      	b.n	8000b60 <__udivmoddi4+0x11c>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000d0c:	4b04      	ldr	r3, [pc, #16]	@ (8000d20 <modbus_1t5_Timeout+0x1c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2201      	movs	r2, #1
 8000d12:	751a      	strb	r2, [r3, #20]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	2000022c 	.word	0x2000022c

08000d24 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000d2c:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <modbus_3t5_Timeout+0x1c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2201      	movs	r2, #1
 8000d32:	755a      	strb	r2, [r3, #21]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	2000022c 	.word	0x2000022c

08000d44 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <modbus_UART_Recived+0x60>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2201      	movs	r2, #1
 8000d54:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000d56:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <modbus_UART_Recived+0x60>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 8000d5e:	1c59      	adds	r1, r3, #1
 8000d60:	b289      	uxth	r1, r1
 8000d62:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 8000d66:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000d6a:	d210      	bcs.n	8000d8e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <modbus_UART_Recived+0x60>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68d8      	ldr	r0, [r3, #12]
 8000d72:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <modbus_UART_Recived+0x60>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <modbus_UART_Recived+0x60>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000d7e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000d82:	4413      	add	r3, r2
 8000d84:	3302      	adds	r3, #2
 8000d86:	2201      	movs	r2, #1
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f007 fa43 	bl	8008214 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000d8e:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <modbus_UART_Recived+0x60>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000022c 	.word	0x2000022c

08000da8 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000db2:	4a24      	ldr	r2, [pc, #144]	@ (8000e44 <Modbus_init+0x9c>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000db8:	4b22      	ldr	r3, [pc, #136]	@ (8000e44 <Modbus_init+0x9c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000dc0:	4b20      	ldr	r3, [pc, #128]	@ (8000e44 <Modbus_init+0x9c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	4a20      	ldr	r2, [pc, #128]	@ (8000e48 <Modbus_init+0xa0>)
 8000dc8:	2114      	movs	r1, #20
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f006 fc36 	bl	800763c <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <Modbus_init+0x9c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8000e4c <Modbus_init+0xa4>)
 8000dd8:	210e      	movs	r1, #14
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f006 fc2e 	bl	800763c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000de0:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <Modbus_init+0x9c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	4a1a      	ldr	r2, [pc, #104]	@ (8000e50 <Modbus_init+0xa8>)
 8000de8:	2103      	movs	r1, #3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f007 f97a 	bl	80080e4 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000df0:	4b14      	ldr	r3, [pc, #80]	@ (8000e44 <Modbus_init+0x9c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	68d8      	ldr	r0, [r3, #12]
 8000df6:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <Modbus_init+0x9c>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <Modbus_init+0x9c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000e02:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000e06:	4413      	add	r3, r2
 8000e08:	3302      	adds	r3, #2
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f007 fa01 	bl	8008214 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <Modbus_init+0x9c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d10c      	bne.n	8000e3c <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000e22:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <Modbus_init+0x9c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f005 ffd9 	bl	8006de0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000e2e:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <Modbus_init+0x9c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	691b      	ldr	r3, [r3, #16]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f006 f902 	bl	8007040 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	2000022c 	.word	0x2000022c
 8000e48:	08000d05 	.word	0x08000d05
 8000e4c:	08000d25 	.word	0x08000d25
 8000e50:	08000d45 	.word	0x08000d45

08000e54 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000e60:	23ff      	movs	r3, #255	@ 0xff
 8000e62:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000e64:	23ff      	movs	r3, #255	@ 0xff
 8000e66:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000e68:	e013      	b.n	8000e92 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	781a      	ldrb	r2, [r3, #0]
 8000e72:	7bbb      	ldrb	r3, [r7, #14]
 8000e74:	4053      	eors	r3, r2
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000e7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000eb8 <CRC16+0x64>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4413      	add	r3, r2
 8000e80:	781a      	ldrb	r2, [r3, #0]
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	4053      	eors	r3, r2
 8000e86:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000e88:	4a0c      	ldr	r2, [pc, #48]	@ (8000ebc <CRC16+0x68>)
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000e92:	883b      	ldrh	r3, [r7, #0]
 8000e94:	1e5a      	subs	r2, r3, #1
 8000e96:	803a      	strh	r2, [r7, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1e6      	bne.n	8000e6a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	b29b      	uxth	r3, r3
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	20000100 	.word	0x20000100
 8000ebc:	20000000 	.word	0x20000000

08000ec0 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000ec6:	4b81      	ldr	r3, [pc, #516]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	7e1b      	ldrb	r3, [r3, #24]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d80a      	bhi.n	8000ee8 <Modbus_Protocal_Worker+0x28>
 8000ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed8 <Modbus_Protocal_Worker+0x18>)
 8000ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed8:	08000ef3 	.word	0x08000ef3
 8000edc:	08001093 	.word	0x08001093
 8000ee0:	08000f7f 	.word	0x08000f7f
 8000ee4:	08000fa5 	.word	0x08000fa5
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000ee8:	4b78      	ldr	r3, [pc, #480]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2201      	movs	r2, #1
 8000eee:	761a      	strb	r2, [r3, #24]
		break;
 8000ef0:	e0e8      	b.n	80010c4 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000ef2:	4b76      	ldr	r3, [pc, #472]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d002      	beq.n	8000f04 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8000efe:	f000 f9d7 	bl	80012b0 <Modbus_Emission>
 8000f02:	e01c      	b.n	8000f3e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8000f04:	4b71      	ldr	r3, [pc, #452]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	7d9b      	ldrb	r3, [r3, #22]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d017      	beq.n	8000f3e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000f0e:	4b6f      	ldr	r3, [pc, #444]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2200      	movs	r2, #0
 8000f14:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000f16:	4b6d      	ldr	r3, [pc, #436]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8000f1e:	4b6b      	ldr	r3, [pc, #428]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b68      	ldr	r3, [pc, #416]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f042 0201 	orr.w	r2, r2, #1
 8000f34:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000f36:	4b65      	ldr	r3, [pc, #404]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000f3e:	4b63      	ldr	r3, [pc, #396]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b20      	cmp	r3, #32
 8000f4c:	f040 80b3 	bne.w	80010b6 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000f50:	4b5e      	ldr	r3, [pc, #376]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f5a:	4b5c      	ldr	r3, [pc, #368]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	68d8      	ldr	r0, [r3, #12]
 8000f60:	4b5a      	ldr	r3, [pc, #360]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b59      	ldr	r3, [pc, #356]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000f6c:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000f70:	4413      	add	r3, r2
 8000f72:	3302      	adds	r3, #2
 8000f74:	2201      	movs	r2, #1
 8000f76:	4619      	mov	r1, r3
 8000f78:	f007 f94c 	bl	8008214 <HAL_UART_Receive_IT>
		}
		break;
 8000f7c:	e09b      	b.n	80010b6 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000f7e:	4b53      	ldr	r3, [pc, #332]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	7d1b      	ldrb	r3, [r3, #20]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 8098 	beq.w	80010ba <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8000f8a:	4b50      	ldr	r3, [pc, #320]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000f92:	4b4e      	ldr	r3, [pc, #312]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	22fe      	movs	r2, #254	@ 0xfe
 8000f98:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	761a      	strb	r2, [r3, #24]
		}
		break;
 8000fa2:	e08a      	b.n	80010ba <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8000fa4:	4b49      	ldr	r3, [pc, #292]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	7d9b      	ldrb	r3, [r3, #22]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d009      	beq.n	8000fc2 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 8000fae:	4b47      	ldr	r3, [pc, #284]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d103      	bne.n	8000fc2 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000fba:	4b44      	ldr	r3, [pc, #272]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	22ff      	movs	r2, #255	@ 0xff
 8000fc0:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000fc2:	4b42      	ldr	r3, [pc, #264]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000fca:	f113 0f02 	cmn.w	r3, #2
 8000fce:	d150      	bne.n	8001072 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8000fd0:	4b3e      	ldr	r3, [pc, #248]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8000fd8:	4b3c      	ldr	r3, [pc, #240]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8000fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	4619      	mov	r1, r3
 8000fec:	4610      	mov	r0, r2
 8000fee:	f7ff ff31 	bl	8000e54 <CRC16>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000ff6:	793a      	ldrb	r2, [r7, #4]
 8000ff8:	4b34      	ldr	r3, [pc, #208]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000ffa:	6819      	ldr	r1, [r3, #0]
 8000ffc:	4b33      	ldr	r3, [pc, #204]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001004:	3b02      	subs	r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 800100c:	429a      	cmp	r2, r3
 800100e:	d10c      	bne.n	800102a <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001010:	797a      	ldrb	r2, [r7, #5]
 8001012:	4b2e      	ldr	r3, [pc, #184]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8001014:	6819      	ldr	r1, [r3, #0]
 8001016:	4b2d      	ldr	r3, [pc, #180]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800101e:	3b01      	subs	r3, #1
 8001020:	440b      	add	r3, r1
 8001022:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001026:	429a      	cmp	r2, r3
 8001028:	d004      	beq.n	8001034 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800102a:	4b28      	ldr	r3, [pc, #160]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	22ff      	movs	r2, #255	@ 0xff
 8001030:	75da      	strb	r2, [r3, #23]
				break;
 8001032:	e047      	b.n	80010c4 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001034:	4b25      	ldr	r3, [pc, #148]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 800103c:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	429a      	cmp	r2, r3
 8001044:	d113      	bne.n	800106e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001046:	4b21      	ldr	r3, [pc, #132]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800104e:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001056:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001058:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001060:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001062:	461a      	mov	r2, r3
 8001064:	f00b fae2 	bl	800c62c <memcpy>

			//execute command
			Modbus_frame_response();
 8001068:	f000 f90a 	bl	8001280 <Modbus_frame_response>
 800106c:	e001      	b.n	8001072 <Modbus_Protocal_Worker+0x1b2>
				break;
 800106e:	bf00      	nop
					}
		break;


	}
}
 8001070:	e028      	b.n	80010c4 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001072:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	7d5b      	ldrb	r3, [r3, #21]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d020      	beq.n	80010be <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 800107c:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2201      	movs	r2, #1
 8001082:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001084:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	4618      	mov	r0, r3
 800108c:	f007 f958 	bl	8008340 <HAL_UART_AbortReceive>
		break;
 8001090:	e015      	b.n	80010be <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001092:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b20      	cmp	r3, #32
 80010a0:	d10f      	bne.n	80010c2 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80010ac:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <Modbus_Protocal_Worker+0x20c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2201      	movs	r2, #1
 80010b2:	761a      	strb	r2, [r3, #24]
		break;
 80010b4:	e005      	b.n	80010c2 <Modbus_Protocal_Worker+0x202>
		break;
 80010b6:	bf00      	nop
 80010b8:	e004      	b.n	80010c4 <Modbus_Protocal_Worker+0x204>
		break;
 80010ba:	bf00      	nop
 80010bc:	e002      	b.n	80010c4 <Modbus_Protocal_Worker+0x204>
		break;
 80010be:	bf00      	nop
 80010c0:	e000      	b.n	80010c4 <Modbus_Protocal_Worker+0x204>
		break;
 80010c2:	bf00      	nop
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	2000022c 	.word	0x2000022c

080010d0 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80010d6:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <modbusWrite1Register+0x7c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	7e9b      	ldrb	r3, [r3, #26]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4a1a      	ldr	r2, [pc, #104]	@ (800114c <modbusWrite1Register+0x7c>)
 80010e2:	6812      	ldr	r2, [r2, #0]
 80010e4:	7ed2      	ldrb	r2, [r2, #27]
 80010e6:	4413      	add	r3, r2
 80010e8:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80010ea:	88fa      	ldrh	r2, [r7, #6]
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <modbusWrite1Register+0x7c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d903      	bls.n	80010fe <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80010f6:	2002      	movs	r0, #2
 80010f8:	f000 f8a0 	bl	800123c <ModbusErrorReply>
			 return;
 80010fc:	e023      	b.n	8001146 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80010fe:	4b13      	ldr	r3, [pc, #76]	@ (800114c <modbusWrite1Register+0x7c>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	4b12      	ldr	r3, [pc, #72]	@ (800114c <modbusWrite1Register+0x7c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6859      	ldr	r1, [r3, #4]
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	440b      	add	r3, r1
 800110e:	7f12      	ldrb	r2, [r2, #28]
 8001110:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <modbusWrite1Register+0x7c>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <modbusWrite1Register+0x7c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6859      	ldr	r1, [r3, #4]
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	440b      	add	r3, r1
 8001122:	7f52      	ldrb	r2, [r2, #29]
 8001124:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <modbusWrite1Register+0x7c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 800112e:	4b07      	ldr	r3, [pc, #28]	@ (800114c <modbusWrite1Register+0x7c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001134:	2208      	movs	r2, #8
 8001136:	4619      	mov	r1, r3
 8001138:	f00b fa78 	bl	800c62c <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800113c:	4b03      	ldr	r3, [pc, #12]	@ (800114c <modbusWrite1Register+0x7c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2205      	movs	r2, #5
 8001142:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000022c 	.word	0x2000022c

08001150 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001156:	4b38      	ldr	r3, [pc, #224]	@ (8001238 <modbusRead1Register+0xe8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	7f1b      	ldrb	r3, [r3, #28]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b29b      	uxth	r3, r3
 8001160:	4a35      	ldr	r2, [pc, #212]	@ (8001238 <modbusRead1Register+0xe8>)
 8001162:	6812      	ldr	r2, [r2, #0]
 8001164:	7f52      	ldrb	r2, [r2, #29]
 8001166:	4413      	add	r3, r2
 8001168:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800116a:	4b33      	ldr	r3, [pc, #204]	@ (8001238 <modbusRead1Register+0xe8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	7e9b      	ldrb	r3, [r3, #26]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b29b      	uxth	r3, r3
 8001174:	4a30      	ldr	r2, [pc, #192]	@ (8001238 <modbusRead1Register+0xe8>)
 8001176:	6812      	ldr	r2, [r2, #0]
 8001178:	7ed2      	ldrb	r2, [r2, #27]
 800117a:	4413      	add	r3, r2
 800117c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <modbusRead1Register+0x3a>
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	2b7d      	cmp	r3, #125	@ 0x7d
 8001188:	d903      	bls.n	8001192 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800118a:	2003      	movs	r0, #3
 800118c:	f000 f856 	bl	800123c <ModbusErrorReply>
		 return;
 8001190:	e04e      	b.n	8001230 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001192:	88ba      	ldrh	r2, [r7, #4]
 8001194:	4b28      	ldr	r3, [pc, #160]	@ (8001238 <modbusRead1Register+0xe8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	429a      	cmp	r2, r3
 800119c:	d808      	bhi.n	80011b0 <modbusRead1Register+0x60>
 800119e:	88ba      	ldrh	r2, [r7, #4]
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	4413      	add	r3, r2
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b24      	ldr	r3, [pc, #144]	@ (8001238 <modbusRead1Register+0xe8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d903      	bls.n	80011b8 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80011b0:	2002      	movs	r0, #2
 80011b2:	f000 f843 	bl	800123c <ModbusErrorReply>
		 return;
 80011b6:	e03b      	b.n	8001230 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80011b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <modbusRead1Register+0xe8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2203      	movs	r2, #3
 80011be:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <modbusRead1Register+0xe8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	0052      	lsls	r2, r2, #1
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80011d2:	2400      	movs	r4, #0
 80011d4:	e020      	b.n	8001218 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80011d6:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <modbusRead1Register+0xe8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	88bb      	ldrh	r3, [r7, #4]
 80011de:	4423      	add	r3, r4
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	18d1      	adds	r1, r2, r3
 80011e4:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <modbusRead1Register+0xe8>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	1c63      	adds	r3, r4, #1
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	7849      	ldrb	r1, [r1, #1]
 80011ee:	4413      	add	r3, r2
 80011f0:	460a      	mov	r2, r1
 80011f2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80011f6:	4b10      	ldr	r3, [pc, #64]	@ (8001238 <modbusRead1Register+0xe8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	88bb      	ldrh	r3, [r7, #4]
 80011fe:	4423      	add	r3, r4
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	18d1      	adds	r1, r2, r3
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <modbusRead1Register+0xe8>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	0063      	lsls	r3, r4, #1
 800120a:	3303      	adds	r3, #3
 800120c:	7809      	ldrb	r1, [r1, #0]
 800120e:	4413      	add	r3, r2
 8001210:	460a      	mov	r2, r1
 8001212:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001216:	3401      	adds	r4, #1
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	429c      	cmp	r4, r3
 800121c:	dbdb      	blt.n	80011d6 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	3301      	adds	r3, #1
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <modbusRead1Register+0xe8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0052      	lsls	r2, r2, #1
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bd90      	pop	{r4, r7, pc}
 8001236:	bf00      	nop
 8001238:	2000022c 	.word	0x2000022c

0800123c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001246:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <ModbusErrorReply+0x40>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	7e5a      	ldrb	r2, [r3, #25]
 800124c:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <ModbusErrorReply+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 800125a:	4b08      	ldr	r3, [pc, #32]	@ (800127c <ModbusErrorReply+0x40>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	79fa      	ldrb	r2, [r7, #7]
 8001260:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8001264:	4b05      	ldr	r3, [pc, #20]	@ (800127c <ModbusErrorReply+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2202      	movs	r2, #2
 800126a:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	2000022c 	.word	0x2000022c

08001280 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001284:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <Modbus_frame_response+0x2c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	7e5b      	ldrb	r3, [r3, #25]
 800128a:	2b03      	cmp	r3, #3
 800128c:	d004      	beq.n	8001298 <Modbus_frame_response+0x18>
 800128e:	2b06      	cmp	r3, #6
 8001290:	d105      	bne.n	800129e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001292:	f7ff ff1d 	bl	80010d0 <modbusWrite1Register>
		break;
 8001296:	e006      	b.n	80012a6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001298:	f7ff ff5a 	bl	8001150 <modbusRead1Register>
		break;
 800129c:	e003      	b.n	80012a6 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800129e:	2001      	movs	r0, #1
 80012a0:	f7ff ffcc 	bl	800123c <ModbusErrorReply>
		break;
 80012a4:	bf00      	nop

	}
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000022c 	.word	0x2000022c

080012b0 <Modbus_Emission>:

void Modbus_Emission()
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80012b6:	4b3d      	ldr	r3, [pc, #244]	@ (80013ac <Modbus_Emission+0xfc>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b20      	cmp	r3, #32
 80012c4:	d15e      	bne.n	8001384 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80012c6:	4b39      	ldr	r3, [pc, #228]	@ (80013ac <Modbus_Emission+0xfc>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b38      	ldr	r3, [pc, #224]	@ (80013ac <Modbus_Emission+0xfc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	7812      	ldrb	r2, [r2, #0]
 80012d0:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80012d4:	4b35      	ldr	r3, [pc, #212]	@ (80013ac <Modbus_Emission+0xfc>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80012dc:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80012de:	4b33      	ldr	r3, [pc, #204]	@ (80013ac <Modbus_Emission+0xfc>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 80012e6:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <Modbus_Emission+0xfc>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 80012ee:	461a      	mov	r2, r3
 80012f0:	f00b f99c 	bl	800c62c <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80012f4:	4b2d      	ldr	r3, [pc, #180]	@ (80013ac <Modbus_Emission+0xfc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b2b      	ldr	r3, [pc, #172]	@ (80013ac <Modbus_Emission+0xfc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	3203      	adds	r2, #3
 8001304:	b292      	uxth	r2, r2
 8001306:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800130a:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <Modbus_Emission+0xfc>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001312:	4b26      	ldr	r3, [pc, #152]	@ (80013ac <Modbus_Emission+0xfc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800131a:	3b02      	subs	r3, #2
 800131c:	4619      	mov	r1, r3
 800131e:	4610      	mov	r0, r2
 8001320:	f7ff fd98 	bl	8000e54 <CRC16>
 8001324:	4603      	mov	r3, r0
 8001326:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001328:	4b20      	ldr	r3, [pc, #128]	@ (80013ac <Modbus_Emission+0xfc>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ac <Modbus_Emission+0xfc>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001334:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001336:	7939      	ldrb	r1, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	460a      	mov	r2, r1
 800133c:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001340:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <Modbus_Emission+0xfc>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <Modbus_Emission+0xfc>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800134c:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800134e:	7979      	ldrb	r1, [r7, #5]
 8001350:	4413      	add	r3, r2
 8001352:	460a      	mov	r2, r1
 8001354:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <Modbus_Emission+0xfc>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b20      	cmp	r3, #32
 8001366:	d10d      	bne.n	8001384 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001368:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <Modbus_Emission+0xfc>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800136e:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <Modbus_Emission+0xfc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001376:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <Modbus_Emission+0xfc>)
 8001378:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800137a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800137e:	461a      	mov	r2, r3
 8001380:	f006 ff6e 	bl	8008260 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001384:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <Modbus_Emission+0xfc>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2200      	movs	r2, #0
 800138a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <Modbus_Emission+0xfc>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2200      	movs	r2, #0
 8001392:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001394:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <Modbus_Emission+0xfc>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2200      	movs	r2, #0
 800139a:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 800139c:	4b03      	ldr	r3, [pc, #12]	@ (80013ac <Modbus_Emission+0xfc>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2202      	movs	r2, #2
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2000022c 	.word	0x2000022c

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b6:	f000 ff8b 	bl	80022d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ba:	f000 f93f 	bl	800163c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013be:	f000 fbad 	bl	8001b1c <MX_GPIO_Init>
  MX_DMA_Init();
 80013c2:	f000 fb65 	bl	8001a90 <MX_DMA_Init>
  MX_ADC1_Init();
 80013c6:	f000 f9a1 	bl	800170c <MX_ADC1_Init>
  MX_I2C1_Init();
 80013ca:	f000 f9f1 	bl	80017b0 <MX_I2C1_Init>
  MX_TIM3_Init();
 80013ce:	f000 fa69 	bl	80018a4 <MX_TIM3_Init>
  MX_TIM11_Init();
 80013d2:	f000 fab5 	bl	8001940 <MX_TIM11_Init>
  MX_TIM2_Init();
 80013d6:	f000 fa19 	bl	800180c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80013da:	f000 fb05 	bl	80019e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80013de:	f000 fb2d 	bl	8001a3c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	// Modbus Initial
	hmodbus.huart = &huart2;
 80013e2:	4b7a      	ldr	r3, [pc, #488]	@ (80015cc <main+0x21c>)
 80013e4:	4a7a      	ldr	r2, [pc, #488]	@ (80015d0 <main+0x220>)
 80013e6:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 80013e8:	4b78      	ldr	r3, [pc, #480]	@ (80015cc <main+0x21c>)
 80013ea:	4a7a      	ldr	r2, [pc, #488]	@ (80015d4 <main+0x224>)
 80013ec:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x01;
 80013ee:	4b77      	ldr	r3, [pc, #476]	@ (80015cc <main+0x21c>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 80013f4:	4b75      	ldr	r3, [pc, #468]	@ (80015cc <main+0x21c>)
 80013f6:	22c8      	movs	r2, #200	@ 0xc8
 80013f8:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80013fa:	4977      	ldr	r1, [pc, #476]	@ (80015d8 <main+0x228>)
 80013fc:	4873      	ldr	r0, [pc, #460]	@ (80015cc <main+0x21c>)
 80013fe:	f7ff fcd3 	bl	8000da8 <Modbus_init>

	arm_rfft_init_q15(&fftConfig, FFT_SIZE, 0, 0);
 8001402:	2300      	movs	r3, #0
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800140a:	4874      	ldr	r0, [pc, #464]	@ (80015dc <main+0x22c>)
 800140c:	f00b f84a 	bl	800c4a4 <arm_rfft_init_q15>
	arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 8001410:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001414:	4872      	ldr	r0, [pc, #456]	@ (80015e0 <main+0x230>)
 8001416:	f00a fe55 	bl	800c0c4 <arm_rfft_fast_init_f32>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) buffer_input, FFT_SIZE * 2);
 800141a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800141e:	4971      	ldr	r1, [pc, #452]	@ (80015e4 <main+0x234>)
 8001420:	4871      	ldr	r0, [pc, #452]	@ (80015e8 <main+0x238>)
 8001422:	f001 f80b 	bl	800243c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim3);
 8001426:	4871      	ldr	r0, [pc, #452]	@ (80015ec <main+0x23c>)
 8001428:	f005 fc80 	bl	8006d2c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 800142c:	4870      	ldr	r0, [pc, #448]	@ (80015f0 <main+0x240>)
 800142e:	f005 fc7d 	bl	8006d2c <HAL_TIM_Base_Start>
	HAL_UART_Init(&huart1);
 8001432:	4870      	ldr	r0, [pc, #448]	@ (80015f4 <main+0x244>)
 8001434:	f006 fdf8 	bl	8008028 <HAL_UART_Init>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Modbus
		Modbus_Protocal_Worker();
 8001438:	f7ff fd42 	bl	8000ec0 <Modbus_Protocal_Worker>

		// Read ADC Polling (TEST PIEZO)
		uint32_t Tim = HAL_GetTick();
 800143c:	f000 ffae 	bl	800239c <HAL_GetTick>
 8001440:	60b8      	str	r0, [r7, #8]
		static uint32_t tick = 1;
		if (Tim > tick) {
 8001442:	4b6d      	ldr	r3, [pc, #436]	@ (80015f8 <main+0x248>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	429a      	cmp	r2, r3
 800144a:	d9f5      	bls.n	8001438 <main+0x88>

			// ADXL
			HAL_I2C_Mem_Write(&hi2c1, ADXL346_ADDR << 1, 0x2D,
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	9302      	str	r3, [sp, #8]
 8001452:	2301      	movs	r3, #1
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	4b69      	ldr	r3, [pc, #420]	@ (80015fc <main+0x24c>)
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2301      	movs	r3, #1
 800145c:	222d      	movs	r2, #45	@ 0x2d
 800145e:	21a6      	movs	r1, #166	@ 0xa6
 8001460:	4867      	ldr	r0, [pc, #412]	@ (8001600 <main+0x250>)
 8001462:	f002 fbbb 	bl	8003bdc <HAL_I2C_Mem_Write>
			I2C_MEMADD_SIZE_8BIT, (uint8_t*) "\x08", 1, HAL_MAX_DELAY);

			HAL_I2C_Mem_Read(&hi2c1, ADXL346_ADDR << 1, 0x32,
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
 800146a:	9302      	str	r3, [sp, #8]
 800146c:	2306      	movs	r3, #6
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	4b64      	ldr	r3, [pc, #400]	@ (8001604 <main+0x254>)
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2301      	movs	r3, #1
 8001476:	2232      	movs	r2, #50	@ 0x32
 8001478:	21a6      	movs	r1, #166	@ 0xa6
 800147a:	4861      	ldr	r0, [pc, #388]	@ (8001600 <main+0x250>)
 800147c:	f002 fca8 	bl	8003dd0 <HAL_I2C_Mem_Read>
			I2C_MEMADD_SIZE_8BIT, buf, 6, HAL_MAX_DELAY);

			int16_t x = (buf[1] << 8) | buf[0];
 8001480:	4b60      	ldr	r3, [pc, #384]	@ (8001604 <main+0x254>)
 8001482:	785b      	ldrb	r3, [r3, #1]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b21a      	sxth	r2, r3
 8001488:	4b5e      	ldr	r3, [pc, #376]	@ (8001604 <main+0x254>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b21b      	sxth	r3, r3
 800148e:	4313      	orrs	r3, r2
 8001490:	80fb      	strh	r3, [r7, #6]
			int16_t y = (buf[3] << 8) | buf[2];
 8001492:	4b5c      	ldr	r3, [pc, #368]	@ (8001604 <main+0x254>)
 8001494:	78db      	ldrb	r3, [r3, #3]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	4b5a      	ldr	r3, [pc, #360]	@ (8001604 <main+0x254>)
 800149c:	789b      	ldrb	r3, [r3, #2]
 800149e:	b21b      	sxth	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	80bb      	strh	r3, [r7, #4]
			int16_t z = (buf[5] << 8) | buf[4];
 80014a4:	4b57      	ldr	r3, [pc, #348]	@ (8001604 <main+0x254>)
 80014a6:	795b      	ldrb	r3, [r3, #5]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	4b55      	ldr	r3, [pc, #340]	@ (8001604 <main+0x254>)
 80014ae:	791b      	ldrb	r3, [r3, #4]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	807b      	strh	r3, [r7, #2]

			acceleration_x = x * 0.00390625;
 80014b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7fe ffde 	bl	800047c <__aeabi_i2d>
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	4b50      	ldr	r3, [pc, #320]	@ (8001608 <main+0x258>)
 80014c6:	f7ff f843 	bl	8000550 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fa4f 	bl	8000974 <__aeabi_d2f>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a4c      	ldr	r2, [pc, #304]	@ (800160c <main+0x25c>)
 80014da:	6013      	str	r3, [r2, #0]
			acceleration_y = y * 0.00390625;
 80014dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7fe ffcb 	bl	800047c <__aeabi_i2d>
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	4b47      	ldr	r3, [pc, #284]	@ (8001608 <main+0x258>)
 80014ec:	f7ff f830 	bl	8000550 <__aeabi_dmul>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fa3c 	bl	8000974 <__aeabi_d2f>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a44      	ldr	r2, [pc, #272]	@ (8001610 <main+0x260>)
 8001500:	6013      	str	r3, [r2, #0]
			acceleration_z = z * 0.00390625;
 8001502:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe ffb8 	bl	800047c <__aeabi_i2d>
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	4b3d      	ldr	r3, [pc, #244]	@ (8001608 <main+0x258>)
 8001512:	f7ff f81d 	bl	8000550 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff fa29 	bl	8000974 <__aeabi_d2f>
 8001522:	4603      	mov	r3, r0
 8001524:	4a3b      	ldr	r2, [pc, #236]	@ (8001614 <main+0x264>)
 8001526:	6013      	str	r3, [r2, #0]
//			requestMEMS(dataReadAcc[1], 3, 0x34);
//			requestMEMS(dataReadAcc, 3, 0x36);

// FFT
			if (flag == 2) {
 8001528:	4b3b      	ldr	r3, [pc, #236]	@ (8001618 <main+0x268>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d147      	bne.n	80015c0 <main+0x210>
				static float stackPIEZO[FFT_SIZE];

				for (int i = 0; i < FFT_SIZE; i++) {
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	e017      	b.n	8001566 <main+0x1b6>
					stackPIEZO[i] = (buffer_input[i] - (FFT_SIZE * 2)) * 1.0;
 8001536:	4a2b      	ldr	r2, [pc, #172]	@ (80015e4 <main+0x234>)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800153e:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe ff9a 	bl	800047c <__aeabi_i2d>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff fa10 	bl	8000974 <__aeabi_d2f>
 8001554:	4602      	mov	r2, r0
 8001556:	4931      	ldr	r1, [pc, #196]	@ (800161c <main+0x26c>)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < FFT_SIZE; i++) {
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3301      	adds	r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800156c:	dbe3      	blt.n	8001536 <main+0x186>
				}

				arm_rfft_fast_f32(&fft, stackPIEZO, rfft_signal, 0);
 800156e:	2300      	movs	r3, #0
 8001570:	4a2b      	ldr	r2, [pc, #172]	@ (8001620 <main+0x270>)
 8001572:	492a      	ldr	r1, [pc, #168]	@ (800161c <main+0x26c>)
 8001574:	481a      	ldr	r0, [pc, #104]	@ (80015e0 <main+0x230>)
 8001576:	f00a fc53 	bl	800be20 <arm_rfft_fast_f32>
				arm_cmplx_mag_f32(rfft_signal, magnitude_signal,
 800157a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800157e:	4929      	ldr	r1, [pc, #164]	@ (8001624 <main+0x274>)
 8001580:	4827      	ldr	r0, [pc, #156]	@ (8001620 <main+0x270>)
 8001582:	f007 ffcd 	bl	8009520 <arm_cmplx_mag_f32>
				FFT_SIZE / 2);
				arm_max_f32(magnitude_signal + 1, ((FFT_SIZE / 2) - 1),
 8001586:	4828      	ldr	r0, [pc, #160]	@ (8001628 <main+0x278>)
 8001588:	4b28      	ldr	r3, [pc, #160]	@ (800162c <main+0x27c>)
 800158a:	4a29      	ldr	r2, [pc, #164]	@ (8001630 <main+0x280>)
 800158c:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8001590:	f008 f80a 	bl	80095a8 <arm_max_f32>
						&maxValue, &maxIndex);
				freq = ((maxIndex) * (1000.0 / 4096.0));
 8001594:	4b25      	ldr	r3, [pc, #148]	@ (800162c <main+0x27c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ff5f 	bl	800045c <__aeabi_ui2d>
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	4b24      	ldr	r3, [pc, #144]	@ (8001634 <main+0x284>)
 80015a4:	f7fe ffd4 	bl	8000550 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff f9e0 	bl	8000974 <__aeabi_d2f>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4a20      	ldr	r2, [pc, #128]	@ (8001638 <main+0x288>)
 80015b8:	6013      	str	r3, [r2, #0]
				flag = 0;
 80015ba:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <main+0x268>)
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
			}

			tick = Tim + 10;
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	330a      	adds	r3, #10
 80015c4:	4a0c      	ldr	r2, [pc, #48]	@ (80015f8 <main+0x248>)
 80015c6:	6013      	str	r3, [r2, #0]
	while (1) {
 80015c8:	e736      	b.n	8001438 <main+0x88>
 80015ca:	bf00      	nop
 80015cc:	20000758 	.word	0x20000758
 80015d0:	200005c0 	.word	0x200005c0
 80015d4:	20000494 	.word	0x20000494
 80015d8:	20000c30 	.word	0x20000c30
 80015dc:	20010dd0 	.word	0x20010dd0
 80015e0:	20010de8 	.word	0x20010de8
 80015e4:	20000dc0 	.word	0x20000dc0
 80015e8:	20000230 	.word	0x20000230
 80015ec:	200003e0 	.word	0x200003e0
 80015f0:	2000032c 	.word	0x2000032c
 80015f4:	20000548 	.word	0x20000548
 80015f8:	20000200 	.word	0x20000200
 80015fc:	0800c660 	.word	0x0800c660
 8001600:	200002d8 	.word	0x200002d8
 8001604:	20010e00 	.word	0x20010e00
 8001608:	3f700000 	.word	0x3f700000
 800160c:	20010e08 	.word	0x20010e08
 8001610:	20010e0c 	.word	0x20010e0c
 8001614:	20010e10 	.word	0x20010e10
 8001618:	20010dcc 	.word	0x20010dcc
 800161c:	20010e14 	.word	0x20010e14
 8001620:	20004dc0 	.word	0x20004dc0
 8001624:	2000cdc0 	.word	0x2000cdc0
 8001628:	2000cdc4 	.word	0x2000cdc4
 800162c:	20010dc8 	.word	0x20010dc8
 8001630:	20010dc0 	.word	0x20010dc0
 8001634:	3fcf4000 	.word	0x3fcf4000
 8001638:	20010dc4 	.word	0x20010dc4

0800163c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b094      	sub	sp, #80	@ 0x50
 8001640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001642:	f107 0320 	add.w	r3, r7, #32
 8001646:	2230      	movs	r2, #48	@ 0x30
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f00a ffc1 	bl	800c5d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <SystemClock_Config+0xc8>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	4a26      	ldr	r2, [pc, #152]	@ (8001704 <SystemClock_Config+0xc8>)
 800166a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001670:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <SystemClock_Config+0xc8>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800167c:	2300      	movs	r3, #0
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <SystemClock_Config+0xcc>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a20      	ldr	r2, [pc, #128]	@ (8001708 <SystemClock_Config+0xcc>)
 8001686:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <SystemClock_Config+0xcc>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001698:	2301      	movs	r3, #1
 800169a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800169c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a2:	2302      	movs	r3, #2
 80016a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016ac:	2304      	movs	r3, #4
 80016ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80016b0:	2364      	movs	r3, #100	@ 0x64
 80016b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b4:	2302      	movs	r3, #2
 80016b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016b8:	2304      	movs	r3, #4
 80016ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016bc:	f107 0320 	add.w	r3, r7, #32
 80016c0:	4618      	mov	r0, r3
 80016c2:	f004 fe3f 	bl	8006344 <HAL_RCC_OscConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016cc:	f000 fab4 	bl	8001c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d0:	230f      	movs	r3, #15
 80016d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d4:	2302      	movs	r3, #2
 80016d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	2103      	movs	r1, #3
 80016ec:	4618      	mov	r0, r3
 80016ee:	f005 f8a1 	bl	8006834 <HAL_RCC_ClockConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016f8:	f000 fa9e 	bl	8001c38 <Error_Handler>
  }
}
 80016fc:	bf00      	nop
 80016fe:	3750      	adds	r7, #80	@ 0x50
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	40007000 	.word	0x40007000

0800170c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001712:	463b      	mov	r3, r7
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800171e:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <MX_ADC1_Init+0x9c>)
 8001720:	4a22      	ldr	r2, [pc, #136]	@ (80017ac <MX_ADC1_Init+0xa0>)
 8001722:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001724:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <MX_ADC1_Init+0x9c>)
 8001726:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800172a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800172c:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <MX_ADC1_Init+0x9c>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001732:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <MX_ADC1_Init+0x9c>)
 8001734:	2201      	movs	r2, #1
 8001736:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001738:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <MX_ADC1_Init+0x9c>)
 800173a:	2201      	movs	r2, #1
 800173c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800173e:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <MX_ADC1_Init+0x9c>)
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001746:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <MX_ADC1_Init+0x9c>)
 8001748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800174c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800174e:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <MX_ADC1_Init+0x9c>)
 8001750:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001754:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001756:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <MX_ADC1_Init+0x9c>)
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <MX_ADC1_Init+0x9c>)
 800175e:	2201      	movs	r2, #1
 8001760:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <MX_ADC1_Init+0x9c>)
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800176a:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <MX_ADC1_Init+0x9c>)
 800176c:	2201      	movs	r2, #1
 800176e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001770:	480d      	ldr	r0, [pc, #52]	@ (80017a8 <MX_ADC1_Init+0x9c>)
 8001772:	f000 fe1f 	bl	80023b4 <HAL_ADC_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800177c:	f000 fa5c 	bl	8001c38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001780:	2300      	movs	r3, #0
 8001782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001784:	2301      	movs	r3, #1
 8001786:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800178c:	463b      	mov	r3, r7
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <MX_ADC1_Init+0x9c>)
 8001792:	f000 ff4d 	bl	8002630 <HAL_ADC_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800179c:	f000 fa4c 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000230 	.word	0x20000230
 80017ac:	40012000 	.word	0x40012000

080017b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017b4:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <MX_I2C1_Init+0x54>)
 80017b6:	4a14      	ldr	r2, [pc, #80]	@ (8001808 <MX_I2C1_Init+0x58>)
 80017b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80017ba:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <MX_I2C1_Init+0x54>)
 80017bc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80017c0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <MX_I2C1_Init+0x54>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <MX_I2C1_Init+0x54>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <MX_I2C1_Init+0x54>)
 80017d0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <MX_I2C1_Init+0x54>)
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017dc:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <MX_I2C1_Init+0x54>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <MX_I2C1_Init+0x54>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <MX_I2C1_Init+0x54>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	@ (8001804 <MX_I2C1_Init+0x54>)
 80017f0:	f002 f89a 	bl	8003928 <HAL_I2C_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80017fa:	f000 fa1d 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200002d8 	.word	0x200002d8
 8001808:	40005400 	.word	0x40005400

0800180c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001820:	463b      	mov	r3, r7
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001828:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <MX_TIM2_Init+0x94>)
 800182a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800182e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <MX_TIM2_Init+0x94>)
 8001832:	2263      	movs	r2, #99	@ 0x63
 8001834:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001836:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <MX_TIM2_Init+0x94>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800183c:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <MX_TIM2_Init+0x94>)
 800183e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001842:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001844:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <MX_TIM2_Init+0x94>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <MX_TIM2_Init+0x94>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001850:	4813      	ldr	r0, [pc, #76]	@ (80018a0 <MX_TIM2_Init+0x94>)
 8001852:	f005 fa0f 	bl	8006c74 <HAL_TIM_Base_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800185c:	f000 f9ec 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001860:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	4619      	mov	r1, r3
 800186c:	480c      	ldr	r0, [pc, #48]	@ (80018a0 <MX_TIM2_Init+0x94>)
 800186e:	f005 fdb9 	bl	80073e4 <HAL_TIM_ConfigClockSource>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001878:	f000 f9de 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800187c:	2320      	movs	r3, #32
 800187e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001884:	463b      	mov	r3, r7
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <MX_TIM2_Init+0x94>)
 800188a:	f006 fb41 	bl	8007f10 <HAL_TIMEx_MasterConfigSynchronization>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001894:	f000 f9d0 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2000032c 	.word	0x2000032c

080018a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018aa:	f107 0308 	add.w	r3, r7, #8
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b8:	463b      	mov	r3, r7
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001938 <MX_TIM3_Init+0x94>)
 80018c2:	4a1e      	ldr	r2, [pc, #120]	@ (800193c <MX_TIM3_Init+0x98>)
 80018c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <MX_TIM3_Init+0x94>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001938 <MX_TIM3_Init+0x94>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018d2:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <MX_TIM3_Init+0x94>)
 80018d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018da:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <MX_TIM3_Init+0x94>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e0:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <MX_TIM3_Init+0x94>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018e6:	4814      	ldr	r0, [pc, #80]	@ (8001938 <MX_TIM3_Init+0x94>)
 80018e8:	f005 f9c4 	bl	8006c74 <HAL_TIM_Base_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80018f2:	f000 f9a1 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018fc:	f107 0308 	add.w	r3, r7, #8
 8001900:	4619      	mov	r1, r3
 8001902:	480d      	ldr	r0, [pc, #52]	@ (8001938 <MX_TIM3_Init+0x94>)
 8001904:	f005 fd6e 	bl	80073e4 <HAL_TIM_ConfigClockSource>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800190e:	f000 f993 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001912:	2320      	movs	r3, #32
 8001914:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800191a:	463b      	mov	r3, r7
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	@ (8001938 <MX_TIM3_Init+0x94>)
 8001920:	f006 faf6 	bl	8007f10 <HAL_TIMEx_MasterConfigSynchronization>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800192a:	f000 f985 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200003e0 	.word	0x200003e0
 800193c:	40000400 	.word	0x40000400

08001940 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
 8001954:	615a      	str	r2, [r3, #20]
 8001956:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001958:	4b21      	ldr	r3, [pc, #132]	@ (80019e0 <MX_TIM11_Init+0xa0>)
 800195a:	4a22      	ldr	r2, [pc, #136]	@ (80019e4 <MX_TIM11_Init+0xa4>)
 800195c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800195e:	4b20      	ldr	r3, [pc, #128]	@ (80019e0 <MX_TIM11_Init+0xa0>)
 8001960:	2263      	movs	r2, #99	@ 0x63
 8001962:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001964:	4b1e      	ldr	r3, [pc, #120]	@ (80019e0 <MX_TIM11_Init+0xa0>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 800196a:	4b1d      	ldr	r3, [pc, #116]	@ (80019e0 <MX_TIM11_Init+0xa0>)
 800196c:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8001970:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001972:	4b1b      	ldr	r3, [pc, #108]	@ (80019e0 <MX_TIM11_Init+0xa0>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001978:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <MX_TIM11_Init+0xa0>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800197e:	4818      	ldr	r0, [pc, #96]	@ (80019e0 <MX_TIM11_Init+0xa0>)
 8001980:	f005 f978 	bl	8006c74 <HAL_TIM_Base_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800198a:	f000 f955 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 800198e:	4814      	ldr	r0, [pc, #80]	@ (80019e0 <MX_TIM11_Init+0xa0>)
 8001990:	f005 fa88 	bl	8006ea4 <HAL_TIM_OC_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800199a:	f000 f94d 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 800199e:	2108      	movs	r1, #8
 80019a0:	480f      	ldr	r0, [pc, #60]	@ (80019e0 <MX_TIM11_Init+0xa0>)
 80019a2:	f005 fae5 	bl	8006f70 <HAL_TIM_OnePulse_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 80019ac:	f000 f944 	bl	8001c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80019b0:	2310      	movs	r3, #16
 80019b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 80019b4:	f240 5399 	movw	r3, #1433	@ 0x599
 80019b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2200      	movs	r2, #0
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	@ (80019e0 <MX_TIM11_Init+0xa0>)
 80019ca:	f005 fcaf 	bl	800732c <HAL_TIM_OC_ConfigChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 80019d4:	f000 f930 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000494 	.word	0x20000494
 80019e4:	40014800 	.word	0x40014800

080019e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019ec:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <MX_USART1_UART_Init+0x4c>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	@ (8001a38 <MX_USART1_UART_Init+0x50>)
 80019f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <MX_USART1_UART_Init+0x4c>)
 80019f4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80019f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <MX_USART1_UART_Init+0x4c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <MX_USART1_UART_Init+0x4c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <MX_USART1_UART_Init+0x4c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a0c:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <MX_USART1_UART_Init+0x4c>)
 8001a0e:	220c      	movs	r2, #12
 8001a10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a12:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <MX_USART1_UART_Init+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <MX_USART1_UART_Init+0x4c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a1e:	4805      	ldr	r0, [pc, #20]	@ (8001a34 <MX_USART1_UART_Init+0x4c>)
 8001a20:	f006 fb02 	bl	8008028 <HAL_UART_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a2a:	f000 f905 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000548 	.word	0x20000548
 8001a38:	40011000 	.word	0x40011000

08001a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a40:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a42:	4a12      	ldr	r2, [pc, #72]	@ (8001a8c <MX_USART2_UART_Init+0x50>)
 8001a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a48:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a60:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a62:	220c      	movs	r2, #12
 8001a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a66:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a72:	4805      	ldr	r0, [pc, #20]	@ (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a74:	f006 fad8 	bl	8008028 <HAL_UART_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a7e:	f000 f8db 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200005c0 	.word	0x200005c0
 8001a8c:	40004400 	.word	0x40004400

08001a90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b18 <MX_DMA_Init+0x88>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001b18 <MX_DMA_Init+0x88>)
 8001aa0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <MX_DMA_Init+0x88>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	603b      	str	r3, [r7, #0]
 8001ab6:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <MX_DMA_Init+0x88>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	4a17      	ldr	r2, [pc, #92]	@ (8001b18 <MX_DMA_Init+0x88>)
 8001abc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac2:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <MX_DMA_Init+0x88>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2010      	movs	r0, #16
 8001ad4:	f001 f937 	bl	8002d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ad8:	2010      	movs	r0, #16
 8001ada:	f001 f950 	bl	8002d7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2011      	movs	r0, #17
 8001ae4:	f001 f92f 	bl	8002d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001ae8:	2011      	movs	r0, #17
 8001aea:	f001 f948 	bl	8002d7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	2038      	movs	r0, #56	@ 0x38
 8001af4:	f001 f927 	bl	8002d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001af8:	2038      	movs	r0, #56	@ 0x38
 8001afa:	f001 f940 	bl	8002d7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2100      	movs	r1, #0
 8001b02:	2046      	movs	r0, #70	@ 0x46
 8001b04:	f001 f91f 	bl	8002d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001b08:	2046      	movs	r0, #70	@ 0x46
 8001b0a:	f001 f938 	bl	8002d7e <HAL_NVIC_EnableIRQ>

}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800

08001b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	@ 0x28
 8001b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	4b2d      	ldr	r3, [pc, #180]	@ (8001bec <MX_GPIO_Init+0xd0>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001bec <MX_GPIO_Init+0xd0>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b42:	4b2a      	ldr	r3, [pc, #168]	@ (8001bec <MX_GPIO_Init+0xd0>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b26      	ldr	r3, [pc, #152]	@ (8001bec <MX_GPIO_Init+0xd0>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	4a25      	ldr	r2, [pc, #148]	@ (8001bec <MX_GPIO_Init+0xd0>)
 8001b58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5e:	4b23      	ldr	r3, [pc, #140]	@ (8001bec <MX_GPIO_Init+0xd0>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bec <MX_GPIO_Init+0xd0>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	4a1e      	ldr	r2, [pc, #120]	@ (8001bec <MX_GPIO_Init+0xd0>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bec <MX_GPIO_Init+0xd0>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <MX_GPIO_Init+0xd0>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	4a17      	ldr	r2, [pc, #92]	@ (8001bec <MX_GPIO_Init+0xd0>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b96:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <MX_GPIO_Init+0xd0>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2120      	movs	r1, #32
 8001ba6:	4812      	ldr	r0, [pc, #72]	@ (8001bf0 <MX_GPIO_Init+0xd4>)
 8001ba8:	f001 fea4 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bb2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	480c      	ldr	r0, [pc, #48]	@ (8001bf4 <MX_GPIO_Init+0xd8>)
 8001bc4:	f001 fd12 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001bc8:	2320      	movs	r3, #32
 8001bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4804      	ldr	r0, [pc, #16]	@ (8001bf0 <MX_GPIO_Init+0xd4>)
 8001be0:	f001 fd04 	bl	80035ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001be4:	bf00      	nop
 8001be6:	3728      	adds	r7, #40	@ 0x28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020000 	.word	0x40020000
 8001bf4:	40020800 	.word	0x40020800

08001bf8 <HAL_ADC_ConvCpltCallback>:
		HAL_I2C_Mem_Read_IT(&hi2c1, ADXL_Add, regAdd, I2C_MEMADD_SIZE_8BIT,
				Rdata, len);
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	//Buffer_index = (Buffer_index + 1) % 100;
	flag = 1;
 8001c00:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20010dcc 	.word	0x20010dcc

08001c18 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	//Buffer_index = (Buffer_index + 1) % 100;
	flag = 2;
 8001c20:	4b04      	ldr	r3, [pc, #16]	@ (8001c34 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8001c22:	2202      	movs	r2, #2
 8001c24:	701a      	strb	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20010dcc 	.word	0x20010dcc

08001c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c3c:	b672      	cpsid	i
}
 8001c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <Error_Handler+0x8>

08001c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <HAL_MspInit+0x4c>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c52:	4a0f      	ldr	r2, [pc, #60]	@ (8001c90 <HAL_MspInit+0x4c>)
 8001c54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <HAL_MspInit+0x4c>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <HAL_MspInit+0x4c>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	4a08      	ldr	r2, [pc, #32]	@ (8001c90 <HAL_MspInit+0x4c>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_MspInit+0x4c>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c82:	2007      	movs	r0, #7
 8001c84:	f001 f854 	bl	8002d30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40023800 	.word	0x40023800

08001c94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	@ 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a2f      	ldr	r2, [pc, #188]	@ (8001d70 <HAL_ADC_MspInit+0xdc>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d157      	bne.n	8001d66 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b2e      	ldr	r3, [pc, #184]	@ (8001d74 <HAL_ADC_MspInit+0xe0>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8001d74 <HAL_ADC_MspInit+0xe0>)
 8001cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001d74 <HAL_ADC_MspInit+0xe0>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b27      	ldr	r3, [pc, #156]	@ (8001d74 <HAL_ADC_MspInit+0xe0>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	4a26      	ldr	r2, [pc, #152]	@ (8001d74 <HAL_ADC_MspInit+0xe0>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce2:	4b24      	ldr	r3, [pc, #144]	@ (8001d74 <HAL_ADC_MspInit+0xe0>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	481d      	ldr	r0, [pc, #116]	@ (8001d78 <HAL_ADC_MspInit+0xe4>)
 8001d02:	f001 fc73 	bl	80035ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001d06:	4b1d      	ldr	r3, [pc, #116]	@ (8001d7c <HAL_ADC_MspInit+0xe8>)
 8001d08:	4a1d      	ldr	r2, [pc, #116]	@ (8001d80 <HAL_ADC_MspInit+0xec>)
 8001d0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d7c <HAL_ADC_MspInit+0xe8>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d12:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <HAL_ADC_MspInit+0xe8>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d18:	4b18      	ldr	r3, [pc, #96]	@ (8001d7c <HAL_ADC_MspInit+0xe8>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d1e:	4b17      	ldr	r3, [pc, #92]	@ (8001d7c <HAL_ADC_MspInit+0xe8>)
 8001d20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d24:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <HAL_ADC_MspInit+0xe8>)
 8001d28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d2c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d2e:	4b13      	ldr	r3, [pc, #76]	@ (8001d7c <HAL_ADC_MspInit+0xe8>)
 8001d30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d36:	4b11      	ldr	r3, [pc, #68]	@ (8001d7c <HAL_ADC_MspInit+0xe8>)
 8001d38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d3c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <HAL_ADC_MspInit+0xe8>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d44:	4b0d      	ldr	r3, [pc, #52]	@ (8001d7c <HAL_ADC_MspInit+0xe8>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d4a:	480c      	ldr	r0, [pc, #48]	@ (8001d7c <HAL_ADC_MspInit+0xe8>)
 8001d4c:	f001 f832 	bl	8002db4 <HAL_DMA_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001d56:	f7ff ff6f 	bl	8001c38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a07      	ldr	r2, [pc, #28]	@ (8001d7c <HAL_ADC_MspInit+0xe8>)
 8001d5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d60:	4a06      	ldr	r2, [pc, #24]	@ (8001d7c <HAL_ADC_MspInit+0xe8>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d66:	bf00      	nop
 8001d68:	3728      	adds	r7, #40	@ 0x28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40012000 	.word	0x40012000
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	20000278 	.word	0x20000278
 8001d80:	40026410 	.word	0x40026410

08001d84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	@ 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a21      	ldr	r2, [pc, #132]	@ (8001e28 <HAL_I2C_MspInit+0xa4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d13c      	bne.n	8001e20 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	4b20      	ldr	r3, [pc, #128]	@ (8001e2c <HAL_I2C_MspInit+0xa8>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	4a1f      	ldr	r2, [pc, #124]	@ (8001e2c <HAL_I2C_MspInit+0xa8>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e2c <HAL_I2C_MspInit+0xa8>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc8:	2312      	movs	r3, #18
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dd4:	2304      	movs	r3, #4
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4814      	ldr	r0, [pc, #80]	@ (8001e30 <HAL_I2C_MspInit+0xac>)
 8001de0:	f001 fc04 	bl	80035ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <HAL_I2C_MspInit+0xa8>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	4a0f      	ldr	r2, [pc, #60]	@ (8001e2c <HAL_I2C_MspInit+0xa8>)
 8001dee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001df2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df4:	4b0d      	ldr	r3, [pc, #52]	@ (8001e2c <HAL_I2C_MspInit+0xa8>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2100      	movs	r1, #0
 8001e04:	201f      	movs	r0, #31
 8001e06:	f000 ff9e 	bl	8002d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e0a:	201f      	movs	r0, #31
 8001e0c:	f000 ffb7 	bl	8002d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	2020      	movs	r0, #32
 8001e16:	f000 ff96 	bl	8002d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e1a:	2020      	movs	r0, #32
 8001e1c:	f000 ffaf 	bl	8002d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e20:	bf00      	nop
 8001e22:	3728      	adds	r7, #40	@ 0x28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40005400 	.word	0x40005400
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020400 	.word	0x40020400

08001e34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e44:	d116      	bne.n	8001e74 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	4b24      	ldr	r3, [pc, #144]	@ (8001edc <HAL_TIM_Base_MspInit+0xa8>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	4a23      	ldr	r2, [pc, #140]	@ (8001edc <HAL_TIM_Base_MspInit+0xa8>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e56:	4b21      	ldr	r3, [pc, #132]	@ (8001edc <HAL_TIM_Base_MspInit+0xa8>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2100      	movs	r1, #0
 8001e66:	201c      	movs	r0, #28
 8001e68:	f000 ff6d 	bl	8002d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e6c:	201c      	movs	r0, #28
 8001e6e:	f000 ff86 	bl	8002d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001e72:	e02e      	b.n	8001ed2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a19      	ldr	r2, [pc, #100]	@ (8001ee0 <HAL_TIM_Base_MspInit+0xac>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d10e      	bne.n	8001e9c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	4b16      	ldr	r3, [pc, #88]	@ (8001edc <HAL_TIM_Base_MspInit+0xa8>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	4a15      	ldr	r2, [pc, #84]	@ (8001edc <HAL_TIM_Base_MspInit+0xa8>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8e:	4b13      	ldr	r3, [pc, #76]	@ (8001edc <HAL_TIM_Base_MspInit+0xa8>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
}
 8001e9a:	e01a      	b.n	8001ed2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <HAL_TIM_Base_MspInit+0xb0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d115      	bne.n	8001ed2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <HAL_TIM_Base_MspInit+0xa8>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eae:	4a0b      	ldr	r2, [pc, #44]	@ (8001edc <HAL_TIM_Base_MspInit+0xa8>)
 8001eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eb6:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <HAL_TIM_Base_MspInit+0xa8>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	201a      	movs	r0, #26
 8001ec8:	f000 ff3d 	bl	8002d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001ecc:	201a      	movs	r0, #26
 8001ece:	f000 ff56 	bl	8002d7e <HAL_NVIC_EnableIRQ>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40014800 	.word	0x40014800

08001ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08c      	sub	sp, #48	@ 0x30
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 031c 	add.w	r3, r7, #28
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a80      	ldr	r2, [pc, #512]	@ (8002108 <HAL_UART_MspInit+0x220>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d163      	bne.n	8001fd2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	4b7f      	ldr	r3, [pc, #508]	@ (800210c <HAL_UART_MspInit+0x224>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	4a7e      	ldr	r2, [pc, #504]	@ (800210c <HAL_UART_MspInit+0x224>)
 8001f14:	f043 0310 	orr.w	r3, r3, #16
 8001f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f1a:	4b7c      	ldr	r3, [pc, #496]	@ (800210c <HAL_UART_MspInit+0x224>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	4b78      	ldr	r3, [pc, #480]	@ (800210c <HAL_UART_MspInit+0x224>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	4a77      	ldr	r2, [pc, #476]	@ (800210c <HAL_UART_MspInit+0x224>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f36:	4b75      	ldr	r3, [pc, #468]	@ (800210c <HAL_UART_MspInit+0x224>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f42:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f50:	2303      	movs	r3, #3
 8001f52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f54:	2307      	movs	r3, #7
 8001f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	486c      	ldr	r0, [pc, #432]	@ (8002110 <HAL_UART_MspInit+0x228>)
 8001f60:	f001 fb44 	bl	80035ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001f64:	4b6b      	ldr	r3, [pc, #428]	@ (8002114 <HAL_UART_MspInit+0x22c>)
 8001f66:	4a6c      	ldr	r2, [pc, #432]	@ (8002118 <HAL_UART_MspInit+0x230>)
 8001f68:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001f6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002114 <HAL_UART_MspInit+0x22c>)
 8001f6c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f70:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f72:	4b68      	ldr	r3, [pc, #416]	@ (8002114 <HAL_UART_MspInit+0x22c>)
 8001f74:	2240      	movs	r2, #64	@ 0x40
 8001f76:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f78:	4b66      	ldr	r3, [pc, #408]	@ (8002114 <HAL_UART_MspInit+0x22c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f7e:	4b65      	ldr	r3, [pc, #404]	@ (8002114 <HAL_UART_MspInit+0x22c>)
 8001f80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f84:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f86:	4b63      	ldr	r3, [pc, #396]	@ (8002114 <HAL_UART_MspInit+0x22c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f8c:	4b61      	ldr	r3, [pc, #388]	@ (8002114 <HAL_UART_MspInit+0x22c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001f92:	4b60      	ldr	r3, [pc, #384]	@ (8002114 <HAL_UART_MspInit+0x22c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f98:	4b5e      	ldr	r3, [pc, #376]	@ (8002114 <HAL_UART_MspInit+0x22c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002114 <HAL_UART_MspInit+0x22c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001fa4:	485b      	ldr	r0, [pc, #364]	@ (8002114 <HAL_UART_MspInit+0x22c>)
 8001fa6:	f000 ff05 	bl	8002db4 <HAL_DMA_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001fb0:	f7ff fe42 	bl	8001c38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a57      	ldr	r2, [pc, #348]	@ (8002114 <HAL_UART_MspInit+0x22c>)
 8001fb8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fba:	4a56      	ldr	r2, [pc, #344]	@ (8002114 <HAL_UART_MspInit+0x22c>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	2025      	movs	r0, #37	@ 0x25
 8001fc6:	f000 febe 	bl	8002d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fca:	2025      	movs	r0, #37	@ 0x25
 8001fcc:	f000 fed7 	bl	8002d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fd0:	e095      	b.n	80020fe <HAL_UART_MspInit+0x216>
  else if(huart->Instance==USART2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a51      	ldr	r2, [pc, #324]	@ (800211c <HAL_UART_MspInit+0x234>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	f040 8090 	bne.w	80020fe <HAL_UART_MspInit+0x216>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	4b4a      	ldr	r3, [pc, #296]	@ (800210c <HAL_UART_MspInit+0x224>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	4a49      	ldr	r2, [pc, #292]	@ (800210c <HAL_UART_MspInit+0x224>)
 8001fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fee:	4b47      	ldr	r3, [pc, #284]	@ (800210c <HAL_UART_MspInit+0x224>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b43      	ldr	r3, [pc, #268]	@ (800210c <HAL_UART_MspInit+0x224>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	4a42      	ldr	r2, [pc, #264]	@ (800210c <HAL_UART_MspInit+0x224>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6313      	str	r3, [r2, #48]	@ 0x30
 800200a:	4b40      	ldr	r3, [pc, #256]	@ (800210c <HAL_UART_MspInit+0x224>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002016:	230c      	movs	r3, #12
 8002018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002022:	2303      	movs	r3, #3
 8002024:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002026:	2307      	movs	r3, #7
 8002028:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202a:	f107 031c 	add.w	r3, r7, #28
 800202e:	4619      	mov	r1, r3
 8002030:	4837      	ldr	r0, [pc, #220]	@ (8002110 <HAL_UART_MspInit+0x228>)
 8002032:	f001 fadb 	bl	80035ec <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002036:	4b3a      	ldr	r3, [pc, #232]	@ (8002120 <HAL_UART_MspInit+0x238>)
 8002038:	4a3a      	ldr	r2, [pc, #232]	@ (8002124 <HAL_UART_MspInit+0x23c>)
 800203a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800203c:	4b38      	ldr	r3, [pc, #224]	@ (8002120 <HAL_UART_MspInit+0x238>)
 800203e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002042:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002044:	4b36      	ldr	r3, [pc, #216]	@ (8002120 <HAL_UART_MspInit+0x238>)
 8002046:	2240      	movs	r2, #64	@ 0x40
 8002048:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800204a:	4b35      	ldr	r3, [pc, #212]	@ (8002120 <HAL_UART_MspInit+0x238>)
 800204c:	2200      	movs	r2, #0
 800204e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002050:	4b33      	ldr	r3, [pc, #204]	@ (8002120 <HAL_UART_MspInit+0x238>)
 8002052:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002056:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002058:	4b31      	ldr	r3, [pc, #196]	@ (8002120 <HAL_UART_MspInit+0x238>)
 800205a:	2200      	movs	r2, #0
 800205c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800205e:	4b30      	ldr	r3, [pc, #192]	@ (8002120 <HAL_UART_MspInit+0x238>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002064:	4b2e      	ldr	r3, [pc, #184]	@ (8002120 <HAL_UART_MspInit+0x238>)
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800206a:	4b2d      	ldr	r3, [pc, #180]	@ (8002120 <HAL_UART_MspInit+0x238>)
 800206c:	2200      	movs	r2, #0
 800206e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002070:	4b2b      	ldr	r3, [pc, #172]	@ (8002120 <HAL_UART_MspInit+0x238>)
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002076:	482a      	ldr	r0, [pc, #168]	@ (8002120 <HAL_UART_MspInit+0x238>)
 8002078:	f000 fe9c 	bl	8002db4 <HAL_DMA_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8002082:	f7ff fdd9 	bl	8001c38 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a25      	ldr	r2, [pc, #148]	@ (8002120 <HAL_UART_MspInit+0x238>)
 800208a:	639a      	str	r2, [r3, #56]	@ 0x38
 800208c:	4a24      	ldr	r2, [pc, #144]	@ (8002120 <HAL_UART_MspInit+0x238>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002092:	4b25      	ldr	r3, [pc, #148]	@ (8002128 <HAL_UART_MspInit+0x240>)
 8002094:	4a25      	ldr	r2, [pc, #148]	@ (800212c <HAL_UART_MspInit+0x244>)
 8002096:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002098:	4b23      	ldr	r3, [pc, #140]	@ (8002128 <HAL_UART_MspInit+0x240>)
 800209a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800209e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020a0:	4b21      	ldr	r3, [pc, #132]	@ (8002128 <HAL_UART_MspInit+0x240>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a6:	4b20      	ldr	r3, [pc, #128]	@ (8002128 <HAL_UART_MspInit+0x240>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002128 <HAL_UART_MspInit+0x240>)
 80020ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020b2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002128 <HAL_UART_MspInit+0x240>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <HAL_UART_MspInit+0x240>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80020c0:	4b19      	ldr	r3, [pc, #100]	@ (8002128 <HAL_UART_MspInit+0x240>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020c6:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <HAL_UART_MspInit+0x240>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020cc:	4b16      	ldr	r3, [pc, #88]	@ (8002128 <HAL_UART_MspInit+0x240>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020d2:	4815      	ldr	r0, [pc, #84]	@ (8002128 <HAL_UART_MspInit+0x240>)
 80020d4:	f000 fe6e 	bl	8002db4 <HAL_DMA_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 80020de:	f7ff fdab 	bl	8001c38 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a10      	ldr	r2, [pc, #64]	@ (8002128 <HAL_UART_MspInit+0x240>)
 80020e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002128 <HAL_UART_MspInit+0x240>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2100      	movs	r1, #0
 80020f2:	2026      	movs	r0, #38	@ 0x26
 80020f4:	f000 fe27 	bl	8002d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020f8:	2026      	movs	r0, #38	@ 0x26
 80020fa:	f000 fe40 	bl	8002d7e <HAL_NVIC_EnableIRQ>
}
 80020fe:	bf00      	nop
 8002100:	3730      	adds	r7, #48	@ 0x30
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40011000 	.word	0x40011000
 800210c:	40023800 	.word	0x40023800
 8002110:	40020000 	.word	0x40020000
 8002114:	20000638 	.word	0x20000638
 8002118:	400264b8 	.word	0x400264b8
 800211c:	40004400 	.word	0x40004400
 8002120:	20000698 	.word	0x20000698
 8002124:	400260a0 	.word	0x400260a0
 8002128:	200006f8 	.word	0x200006f8
 800212c:	40026088 	.word	0x40026088

08002130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <NMI_Handler+0x4>

08002138 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <HardFault_Handler+0x4>

08002140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <MemManage_Handler+0x4>

08002148 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214c:	bf00      	nop
 800214e:	e7fd      	b.n	800214c <BusFault_Handler+0x4>

08002150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <UsageFault_Handler+0x4>

08002158 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002186:	f000 f8f5 	bl	8002374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002194:	4802      	ldr	r0, [pc, #8]	@ (80021a0 <DMA1_Stream5_IRQHandler+0x10>)
 8002196:	f000 ffa5 	bl	80030e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200006f8 	.word	0x200006f8

080021a4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80021a8:	4802      	ldr	r0, [pc, #8]	@ (80021b4 <DMA1_Stream6_IRQHandler+0x10>)
 80021aa:	f000 ff9b 	bl	80030e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000698 	.word	0x20000698

080021b8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80021bc:	4802      	ldr	r0, [pc, #8]	@ (80021c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80021be:	f004 ffa5 	bl	800710c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000494 	.word	0x20000494

080021cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021d0:	4802      	ldr	r0, [pc, #8]	@ (80021dc <TIM2_IRQHandler+0x10>)
 80021d2:	f004 ff9b 	bl	800710c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	2000032c 	.word	0x2000032c

080021e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80021e4:	4802      	ldr	r0, [pc, #8]	@ (80021f0 <I2C1_EV_IRQHandler+0x10>)
 80021e6:	f002 f825 	bl	8004234 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200002d8 	.word	0x200002d8

080021f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80021f8:	4802      	ldr	r0, [pc, #8]	@ (8002204 <I2C1_ER_IRQHandler+0x10>)
 80021fa:	f002 f96e 	bl	80044da <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200002d8 	.word	0x200002d8

08002208 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800220c:	4802      	ldr	r0, [pc, #8]	@ (8002218 <USART1_IRQHandler+0x10>)
 800220e:	f006 f93b 	bl	8008488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000548 	.word	0x20000548

0800221c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002220:	4802      	ldr	r0, [pc, #8]	@ (800222c <USART2_IRQHandler+0x10>)
 8002222:	f006 f931 	bl	8008488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200005c0 	.word	0x200005c0

08002230 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002234:	4802      	ldr	r0, [pc, #8]	@ (8002240 <DMA2_Stream0_IRQHandler+0x10>)
 8002236:	f000 ff55 	bl	80030e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000278 	.word	0x20000278

08002244 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002248:	4802      	ldr	r0, [pc, #8]	@ (8002254 <DMA2_Stream7_IRQHandler+0x10>)
 800224a:	f000 ff4b 	bl	80030e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000638 	.word	0x20000638

08002258 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800225c:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <SystemInit+0x20>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002262:	4a05      	ldr	r2, [pc, #20]	@ (8002278 <SystemInit+0x20>)
 8002264:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002268:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800227c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002280:	f7ff ffea 	bl	8002258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002284:	480c      	ldr	r0, [pc, #48]	@ (80022b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002286:	490d      	ldr	r1, [pc, #52]	@ (80022bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002288:	4a0d      	ldr	r2, [pc, #52]	@ (80022c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800228c:	e002      	b.n	8002294 <LoopCopyDataInit>

0800228e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002292:	3304      	adds	r3, #4

08002294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002298:	d3f9      	bcc.n	800228e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229a:	4a0a      	ldr	r2, [pc, #40]	@ (80022c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800229c:	4c0a      	ldr	r4, [pc, #40]	@ (80022c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a0:	e001      	b.n	80022a6 <LoopFillZerobss>

080022a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a4:	3204      	adds	r2, #4

080022a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a8:	d3fb      	bcc.n	80022a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022aa:	f00a f99b 	bl	800c5e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ae:	f7ff f87f 	bl	80013b0 <main>
  bx  lr    
 80022b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022bc:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80022c0:	080319c4 	.word	0x080319c4
  ldr r2, =_sbss
 80022c4:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80022c8:	20014e18 	.word	0x20014e18

080022cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022cc:	e7fe      	b.n	80022cc <ADC_IRQHandler>
	...

080022d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002310 <HAL_Init+0x40>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002310 <HAL_Init+0x40>)
 80022da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <HAL_Init+0x40>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002310 <HAL_Init+0x40>)
 80022e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022ec:	4b08      	ldr	r3, [pc, #32]	@ (8002310 <HAL_Init+0x40>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a07      	ldr	r2, [pc, #28]	@ (8002310 <HAL_Init+0x40>)
 80022f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f8:	2003      	movs	r0, #3
 80022fa:	f000 fd19 	bl	8002d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022fe:	2000      	movs	r0, #0
 8002300:	f000 f808 	bl	8002314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002304:	f7ff fc9e 	bl	8001c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40023c00 	.word	0x40023c00

08002314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800231c:	4b12      	ldr	r3, [pc, #72]	@ (8002368 <HAL_InitTick+0x54>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4b12      	ldr	r3, [pc, #72]	@ (800236c <HAL_InitTick+0x58>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	4619      	mov	r1, r3
 8002326:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800232a:	fbb3 f3f1 	udiv	r3, r3, r1
 800232e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fd31 	bl	8002d9a <HAL_SYSTICK_Config>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e00e      	b.n	8002360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b0f      	cmp	r3, #15
 8002346:	d80a      	bhi.n	800235e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002348:	2200      	movs	r2, #0
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	f04f 30ff 	mov.w	r0, #4294967295
 8002350:	f000 fcf9 	bl	8002d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002354:	4a06      	ldr	r2, [pc, #24]	@ (8002370 <HAL_InitTick+0x5c>)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	e000      	b.n	8002360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000204 	.word	0x20000204
 800236c:	2000020c 	.word	0x2000020c
 8002370:	20000208 	.word	0x20000208

08002374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002378:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <HAL_IncTick+0x20>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <HAL_IncTick+0x24>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4413      	add	r3, r2
 8002384:	4a04      	ldr	r2, [pc, #16]	@ (8002398 <HAL_IncTick+0x24>)
 8002386:	6013      	str	r3, [r2, #0]
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	2000020c 	.word	0x2000020c
 8002398:	20014e14 	.word	0x20014e14

0800239c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return uwTick;
 80023a0:	4b03      	ldr	r3, [pc, #12]	@ (80023b0 <HAL_GetTick+0x14>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20014e14 	.word	0x20014e14

080023b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e033      	b.n	8002432 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff fc5e 	bl	8001c94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d118      	bne.n	8002424 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023fa:	f023 0302 	bic.w	r3, r3, #2
 80023fe:	f043 0202 	orr.w	r2, r3, #2
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fa44 	bl	8002894 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	f023 0303 	bic.w	r3, r3, #3
 800241a:	f043 0201 	orr.w	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	641a      	str	r2, [r3, #64]	@ 0x40
 8002422:	e001      	b.n	8002428 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002430:	7bfb      	ldrb	r3, [r7, #15]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_ADC_Start_DMA+0x1e>
 8002456:	2302      	movs	r3, #2
 8002458:	e0ce      	b.n	80025f8 <HAL_ADC_Start_DMA+0x1bc>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b01      	cmp	r3, #1
 800246e:	d018      	beq.n	80024a2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002480:	4b5f      	ldr	r3, [pc, #380]	@ (8002600 <HAL_ADC_Start_DMA+0x1c4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a5f      	ldr	r2, [pc, #380]	@ (8002604 <HAL_ADC_Start_DMA+0x1c8>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	0c9a      	lsrs	r2, r3, #18
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002494:	e002      	b.n	800249c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	3b01      	subs	r3, #1
 800249a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f9      	bne.n	8002496 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024b0:	d107      	bne.n	80024c2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024c0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	f040 8086 	bne.w	80025de <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024fc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800250c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002510:	d106      	bne.n	8002520 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002516:	f023 0206 	bic.w	r2, r3, #6
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	645a      	str	r2, [r3, #68]	@ 0x44
 800251e:	e002      	b.n	8002526 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800252e:	4b36      	ldr	r3, [pc, #216]	@ (8002608 <HAL_ADC_Start_DMA+0x1cc>)
 8002530:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002536:	4a35      	ldr	r2, [pc, #212]	@ (800260c <HAL_ADC_Start_DMA+0x1d0>)
 8002538:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800253e:	4a34      	ldr	r2, [pc, #208]	@ (8002610 <HAL_ADC_Start_DMA+0x1d4>)
 8002540:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002546:	4a33      	ldr	r2, [pc, #204]	@ (8002614 <HAL_ADC_Start_DMA+0x1d8>)
 8002548:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002552:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002562:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002572:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	334c      	adds	r3, #76	@ 0x4c
 800257e:	4619      	mov	r1, r3
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f000 fcc4 	bl	8002f10 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10f      	bne.n	80025b4 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d129      	bne.n	80025f6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025b0:	609a      	str	r2, [r3, #8]
 80025b2:	e020      	b.n	80025f6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a17      	ldr	r2, [pc, #92]	@ (8002618 <HAL_ADC_Start_DMA+0x1dc>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d11b      	bne.n	80025f6 <HAL_ADC_Start_DMA+0x1ba>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d114      	bne.n	80025f6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	e00b      	b.n	80025f6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	f043 0210 	orr.w	r2, r3, #16
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	f043 0201 	orr.w	r2, r3, #1
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000204 	.word	0x20000204
 8002604:	431bde83 	.word	0x431bde83
 8002608:	40012300 	.word	0x40012300
 800260c:	08002a8d 	.word	0x08002a8d
 8002610:	08002b47 	.word	0x08002b47
 8002614:	08002b63 	.word	0x08002b63
 8002618:	40012000 	.word	0x40012000

0800261c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_ADC_ConfigChannel+0x1c>
 8002648:	2302      	movs	r3, #2
 800264a:	e113      	b.n	8002874 <HAL_ADC_ConfigChannel+0x244>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b09      	cmp	r3, #9
 800265a:	d925      	bls.n	80026a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68d9      	ldr	r1, [r3, #12]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	3b1e      	subs	r3, #30
 8002672:	2207      	movs	r2, #7
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43da      	mvns	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	400a      	ands	r2, r1
 8002680:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68d9      	ldr	r1, [r3, #12]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
 8002692:	4618      	mov	r0, r3
 8002694:	4603      	mov	r3, r0
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4403      	add	r3, r0
 800269a:	3b1e      	subs	r3, #30
 800269c:	409a      	lsls	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	e022      	b.n	80026ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6919      	ldr	r1, [r3, #16]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	2207      	movs	r2, #7
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	400a      	ands	r2, r1
 80026ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6919      	ldr	r1, [r3, #16]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	4618      	mov	r0, r3
 80026de:	4603      	mov	r3, r0
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4403      	add	r3, r0
 80026e4:	409a      	lsls	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d824      	bhi.n	8002740 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	3b05      	subs	r3, #5
 8002708:	221f      	movs	r2, #31
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43da      	mvns	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	400a      	ands	r2, r1
 8002716:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	4618      	mov	r0, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	3b05      	subs	r3, #5
 8002732:	fa00 f203 	lsl.w	r2, r0, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	635a      	str	r2, [r3, #52]	@ 0x34
 800273e:	e04c      	b.n	80027da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b0c      	cmp	r3, #12
 8002746:	d824      	bhi.n	8002792 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	3b23      	subs	r3, #35	@ 0x23
 800275a:	221f      	movs	r2, #31
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43da      	mvns	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	400a      	ands	r2, r1
 8002768:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	b29b      	uxth	r3, r3
 8002776:	4618      	mov	r0, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	3b23      	subs	r3, #35	@ 0x23
 8002784:	fa00 f203 	lsl.w	r2, r0, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002790:	e023      	b.n	80027da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	3b41      	subs	r3, #65	@ 0x41
 80027a4:	221f      	movs	r2, #31
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43da      	mvns	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	400a      	ands	r2, r1
 80027b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	4618      	mov	r0, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	3b41      	subs	r3, #65	@ 0x41
 80027ce:	fa00 f203 	lsl.w	r2, r0, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027da:	4b29      	ldr	r3, [pc, #164]	@ (8002880 <HAL_ADC_ConfigChannel+0x250>)
 80027dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a28      	ldr	r2, [pc, #160]	@ (8002884 <HAL_ADC_ConfigChannel+0x254>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d10f      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1d8>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b12      	cmp	r3, #18
 80027ee:	d10b      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1d      	ldr	r2, [pc, #116]	@ (8002884 <HAL_ADC_ConfigChannel+0x254>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d12b      	bne.n	800286a <HAL_ADC_ConfigChannel+0x23a>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1c      	ldr	r2, [pc, #112]	@ (8002888 <HAL_ADC_ConfigChannel+0x258>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d003      	beq.n	8002824 <HAL_ADC_ConfigChannel+0x1f4>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b11      	cmp	r3, #17
 8002822:	d122      	bne.n	800286a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a11      	ldr	r2, [pc, #68]	@ (8002888 <HAL_ADC_ConfigChannel+0x258>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d111      	bne.n	800286a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002846:	4b11      	ldr	r3, [pc, #68]	@ (800288c <HAL_ADC_ConfigChannel+0x25c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a11      	ldr	r2, [pc, #68]	@ (8002890 <HAL_ADC_ConfigChannel+0x260>)
 800284c:	fba2 2303 	umull	r2, r3, r2, r3
 8002850:	0c9a      	lsrs	r2, r3, #18
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800285c:	e002      	b.n	8002864 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	3b01      	subs	r3, #1
 8002862:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f9      	bne.n	800285e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	40012300 	.word	0x40012300
 8002884:	40012000 	.word	0x40012000
 8002888:	10000012 	.word	0x10000012
 800288c:	20000204 	.word	0x20000204
 8002890:	431bde83 	.word	0x431bde83

08002894 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800289c:	4b79      	ldr	r3, [pc, #484]	@ (8002a84 <ADC_Init+0x1f0>)
 800289e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6859      	ldr	r1, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	021a      	lsls	r2, r3, #8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80028ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800290e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6899      	ldr	r1, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	4a58      	ldr	r2, [pc, #352]	@ (8002a88 <ADC_Init+0x1f4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d022      	beq.n	8002972 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800293a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6899      	ldr	r1, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800295c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6899      	ldr	r1, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	e00f      	b.n	8002992 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002990:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0202 	bic.w	r2, r2, #2
 80029a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6899      	ldr	r1, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7e1b      	ldrb	r3, [r3, #24]
 80029ac:	005a      	lsls	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01b      	beq.n	80029f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80029de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6859      	ldr	r1, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ea:	3b01      	subs	r3, #1
 80029ec:	035a      	lsls	r2, r3, #13
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	e007      	b.n	8002a08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a06:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	051a      	lsls	r2, r3, #20
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6899      	ldr	r1, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a4a:	025a      	lsls	r2, r3, #9
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6899      	ldr	r1, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	029a      	lsls	r2, r3, #10
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	609a      	str	r2, [r3, #8]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40012300 	.word	0x40012300
 8002a88:	0f000001 	.word	0x0f000001

08002a8c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d13c      	bne.n	8002b20 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aaa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d12b      	bne.n	8002b18 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d127      	bne.n	8002b18 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ace:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d006      	beq.n	8002ae4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d119      	bne.n	8002b18 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0220 	bic.w	r2, r2, #32
 8002af2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d105      	bne.n	8002b18 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	f043 0201 	orr.w	r2, r3, #1
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f7ff f86d 	bl	8001bf8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b1e:	e00e      	b.n	8002b3e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b24:	f003 0310 	and.w	r3, r3, #16
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f7ff fd75 	bl	800261c <HAL_ADC_ErrorCallback>
}
 8002b32:	e004      	b.n	8002b3e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b52:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f7ff f85f 	bl	8001c18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2240      	movs	r2, #64	@ 0x40
 8002b74:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7a:	f043 0204 	orr.w	r2, r3, #4
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f7ff fd4a 	bl	800261c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bac:	4013      	ands	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc2:	4a04      	ldr	r2, [pc, #16]	@ (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	60d3      	str	r3, [r2, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bdc:	4b04      	ldr	r3, [pc, #16]	@ (8002bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	f003 0307 	and.w	r3, r3, #7
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	db0b      	blt.n	8002c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	f003 021f 	and.w	r2, r3, #31
 8002c0c:	4907      	ldr	r1, [pc, #28]	@ (8002c2c <__NVIC_EnableIRQ+0x38>)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	2001      	movs	r0, #1
 8002c16:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000e100 	.word	0xe000e100

08002c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	6039      	str	r1, [r7, #0]
 8002c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	db0a      	blt.n	8002c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	490c      	ldr	r1, [pc, #48]	@ (8002c7c <__NVIC_SetPriority+0x4c>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	0112      	lsls	r2, r2, #4
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	440b      	add	r3, r1
 8002c54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c58:	e00a      	b.n	8002c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4908      	ldr	r1, [pc, #32]	@ (8002c80 <__NVIC_SetPriority+0x50>)
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	3b04      	subs	r3, #4
 8002c68:	0112      	lsls	r2, r2, #4
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	761a      	strb	r2, [r3, #24]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000e100 	.word	0xe000e100
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	@ 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f1c3 0307 	rsb	r3, r3, #7
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	bf28      	it	cs
 8002ca2:	2304      	movcs	r3, #4
 8002ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	2b06      	cmp	r3, #6
 8002cac:	d902      	bls.n	8002cb4 <NVIC_EncodePriority+0x30>
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3b03      	subs	r3, #3
 8002cb2:	e000      	b.n	8002cb6 <NVIC_EncodePriority+0x32>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43da      	mvns	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd6:	43d9      	mvns	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cdc:	4313      	orrs	r3, r2
         );
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3724      	adds	r7, #36	@ 0x24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cfc:	d301      	bcc.n	8002d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e00f      	b.n	8002d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d02:	4a0a      	ldr	r2, [pc, #40]	@ (8002d2c <SysTick_Config+0x40>)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d0a:	210f      	movs	r1, #15
 8002d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d10:	f7ff ff8e 	bl	8002c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d14:	4b05      	ldr	r3, [pc, #20]	@ (8002d2c <SysTick_Config+0x40>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d1a:	4b04      	ldr	r3, [pc, #16]	@ (8002d2c <SysTick_Config+0x40>)
 8002d1c:	2207      	movs	r2, #7
 8002d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	e000e010 	.word	0xe000e010

08002d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff ff29 	bl	8002b90 <__NVIC_SetPriorityGrouping>
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b086      	sub	sp, #24
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d58:	f7ff ff3e 	bl	8002bd8 <__NVIC_GetPriorityGrouping>
 8002d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	6978      	ldr	r0, [r7, #20]
 8002d64:	f7ff ff8e 	bl	8002c84 <NVIC_EncodePriority>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff5d 	bl	8002c30 <__NVIC_SetPriority>
}
 8002d76:	bf00      	nop
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	4603      	mov	r3, r0
 8002d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff31 	bl	8002bf4 <__NVIC_EnableIRQ>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff ffa2 	bl	8002cec <SysTick_Config>
 8002da8:	4603      	mov	r3, r0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dc0:	f7ff faec 	bl	800239c <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e099      	b.n	8002f04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002df0:	e00f      	b.n	8002e12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002df2:	f7ff fad3 	bl	800239c <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b05      	cmp	r3, #5
 8002dfe:	d908      	bls.n	8002e12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2220      	movs	r2, #32
 8002e04:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2203      	movs	r2, #3
 8002e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e078      	b.n	8002f04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1e8      	bne.n	8002df2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	4b38      	ldr	r3, [pc, #224]	@ (8002f0c <HAL_DMA_Init+0x158>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d107      	bne.n	8002e7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e74:	4313      	orrs	r3, r2
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f023 0307 	bic.w	r3, r3, #7
 8002e92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d117      	bne.n	8002ed6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00e      	beq.n	8002ed6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fb1b 	bl	80034f4 <DMA_CheckFifoParam>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2240      	movs	r2, #64	@ 0x40
 8002ec8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e016      	b.n	8002f04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fad2 	bl	8003488 <DMA_CalcBaseAndBitshift>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eec:	223f      	movs	r2, #63	@ 0x3f
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	f010803f 	.word	0xf010803f

08002f10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_DMA_Start_IT+0x26>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e040      	b.n	8002fb8 <HAL_DMA_Start_IT+0xa8>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d12f      	bne.n	8002faa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fa64 	bl	800342c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f68:	223f      	movs	r2, #63	@ 0x3f
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0216 	orr.w	r2, r2, #22
 8002f7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0208 	orr.w	r2, r2, #8
 8002f96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e005      	b.n	8002fb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fce:	f7ff f9e5 	bl	800239c <HAL_GetTick>
 8002fd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d008      	beq.n	8002ff2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2280      	movs	r2, #128	@ 0x80
 8002fe4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e052      	b.n	8003098 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0216 	bic.w	r2, r2, #22
 8003000:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003010:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d103      	bne.n	8003022 <HAL_DMA_Abort+0x62>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0208 	bic.w	r2, r2, #8
 8003030:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0201 	bic.w	r2, r2, #1
 8003040:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003042:	e013      	b.n	800306c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003044:	f7ff f9aa 	bl	800239c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b05      	cmp	r3, #5
 8003050:	d90c      	bls.n	800306c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2220      	movs	r2, #32
 8003056:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2203      	movs	r2, #3
 800305c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e015      	b.n	8003098 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1e4      	bne.n	8003044 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307e:	223f      	movs	r2, #63	@ 0x3f
 8003080:	409a      	lsls	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d004      	beq.n	80030be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2280      	movs	r2, #128	@ 0x80
 80030b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e00c      	b.n	80030d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2205      	movs	r2, #5
 80030c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0201 	bic.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030f0:	4b8e      	ldr	r3, [pc, #568]	@ (800332c <HAL_DMA_IRQHandler+0x248>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a8e      	ldr	r2, [pc, #568]	@ (8003330 <HAL_DMA_IRQHandler+0x24c>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	0a9b      	lsrs	r3, r3, #10
 80030fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003102:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310e:	2208      	movs	r2, #8
 8003110:	409a      	lsls	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4013      	ands	r3, r2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d01a      	beq.n	8003150 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d013      	beq.n	8003150 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0204 	bic.w	r2, r2, #4
 8003136:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313c:	2208      	movs	r2, #8
 800313e:	409a      	lsls	r2, r3
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003148:	f043 0201 	orr.w	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003154:	2201      	movs	r2, #1
 8003156:	409a      	lsls	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d012      	beq.n	8003186 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003172:	2201      	movs	r2, #1
 8003174:	409a      	lsls	r2, r3
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317e:	f043 0202 	orr.w	r2, r3, #2
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318a:	2204      	movs	r2, #4
 800318c:	409a      	lsls	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4013      	ands	r3, r2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d012      	beq.n	80031bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00b      	beq.n	80031bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a8:	2204      	movs	r2, #4
 80031aa:	409a      	lsls	r2, r3
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b4:	f043 0204 	orr.w	r2, r3, #4
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c0:	2210      	movs	r2, #16
 80031c2:	409a      	lsls	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d043      	beq.n	8003254 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d03c      	beq.n	8003254 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031de:	2210      	movs	r2, #16
 80031e0:	409a      	lsls	r2, r3
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d018      	beq.n	8003226 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d108      	bne.n	8003214 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d024      	beq.n	8003254 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
 8003212:	e01f      	b.n	8003254 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01b      	beq.n	8003254 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4798      	blx	r3
 8003224:	e016      	b.n	8003254 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d107      	bne.n	8003244 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0208 	bic.w	r2, r2, #8
 8003242:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003258:	2220      	movs	r2, #32
 800325a:	409a      	lsls	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 808f 	beq.w	8003384 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 8087 	beq.w	8003384 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327a:	2220      	movs	r2, #32
 800327c:	409a      	lsls	r2, r3
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b05      	cmp	r3, #5
 800328c:	d136      	bne.n	80032fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0216 	bic.w	r2, r2, #22
 800329c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d103      	bne.n	80032be <HAL_DMA_IRQHandler+0x1da>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0208 	bic.w	r2, r2, #8
 80032cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d2:	223f      	movs	r2, #63	@ 0x3f
 80032d4:	409a      	lsls	r2, r3
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d07e      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4798      	blx	r3
        }
        return;
 80032fa:	e079      	b.n	80033f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d01d      	beq.n	8003346 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10d      	bne.n	8003334 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331c:	2b00      	cmp	r3, #0
 800331e:	d031      	beq.n	8003384 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	4798      	blx	r3
 8003328:	e02c      	b.n	8003384 <HAL_DMA_IRQHandler+0x2a0>
 800332a:	bf00      	nop
 800332c:	20000204 	.word	0x20000204
 8003330:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d023      	beq.n	8003384 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	4798      	blx	r3
 8003344:	e01e      	b.n	8003384 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10f      	bne.n	8003374 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0210 	bic.w	r2, r2, #16
 8003362:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003388:	2b00      	cmp	r3, #0
 800338a:	d032      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d022      	beq.n	80033de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2205      	movs	r2, #5
 800339c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	3301      	adds	r3, #1
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d307      	bcc.n	80033cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f2      	bne.n	80033b0 <HAL_DMA_IRQHandler+0x2cc>
 80033ca:	e000      	b.n	80033ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	4798      	blx	r3
 80033ee:	e000      	b.n	80033f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80033f0:	bf00      	nop
    }
  }
}
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003406:	b2db      	uxtb	r3, r3
}
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003448:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b40      	cmp	r3, #64	@ 0x40
 8003458:	d108      	bne.n	800346c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800346a:	e007      	b.n	800347c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	60da      	str	r2, [r3, #12]
}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	3b10      	subs	r3, #16
 8003498:	4a14      	ldr	r2, [pc, #80]	@ (80034ec <DMA_CalcBaseAndBitshift+0x64>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	091b      	lsrs	r3, r3, #4
 80034a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034a2:	4a13      	ldr	r2, [pc, #76]	@ (80034f0 <DMA_CalcBaseAndBitshift+0x68>)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4413      	add	r3, r2
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d909      	bls.n	80034ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034be:	f023 0303 	bic.w	r3, r3, #3
 80034c2:	1d1a      	adds	r2, r3, #4
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80034c8:	e007      	b.n	80034da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	aaaaaaab 	.word	0xaaaaaaab
 80034f0:	0800c67c 	.word	0x0800c67c

080034f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003504:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d11f      	bne.n	800354e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b03      	cmp	r3, #3
 8003512:	d856      	bhi.n	80035c2 <DMA_CheckFifoParam+0xce>
 8003514:	a201      	add	r2, pc, #4	@ (adr r2, 800351c <DMA_CheckFifoParam+0x28>)
 8003516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351a:	bf00      	nop
 800351c:	0800352d 	.word	0x0800352d
 8003520:	0800353f 	.word	0x0800353f
 8003524:	0800352d 	.word	0x0800352d
 8003528:	080035c3 	.word	0x080035c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d046      	beq.n	80035c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800353c:	e043      	b.n	80035c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003542:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003546:	d140      	bne.n	80035ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800354c:	e03d      	b.n	80035ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003556:	d121      	bne.n	800359c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b03      	cmp	r3, #3
 800355c:	d837      	bhi.n	80035ce <DMA_CheckFifoParam+0xda>
 800355e:	a201      	add	r2, pc, #4	@ (adr r2, 8003564 <DMA_CheckFifoParam+0x70>)
 8003560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003564:	08003575 	.word	0x08003575
 8003568:	0800357b 	.word	0x0800357b
 800356c:	08003575 	.word	0x08003575
 8003570:	0800358d 	.word	0x0800358d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
      break;
 8003578:	e030      	b.n	80035dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d025      	beq.n	80035d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800358a:	e022      	b.n	80035d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003590:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003594:	d11f      	bne.n	80035d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800359a:	e01c      	b.n	80035d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d903      	bls.n	80035aa <DMA_CheckFifoParam+0xb6>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d003      	beq.n	80035b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035a8:	e018      	b.n	80035dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
      break;
 80035ae:	e015      	b.n	80035dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00e      	beq.n	80035da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
      break;
 80035c0:	e00b      	b.n	80035da <DMA_CheckFifoParam+0xe6>
      break;
 80035c2:	bf00      	nop
 80035c4:	e00a      	b.n	80035dc <DMA_CheckFifoParam+0xe8>
      break;
 80035c6:	bf00      	nop
 80035c8:	e008      	b.n	80035dc <DMA_CheckFifoParam+0xe8>
      break;
 80035ca:	bf00      	nop
 80035cc:	e006      	b.n	80035dc <DMA_CheckFifoParam+0xe8>
      break;
 80035ce:	bf00      	nop
 80035d0:	e004      	b.n	80035dc <DMA_CheckFifoParam+0xe8>
      break;
 80035d2:	bf00      	nop
 80035d4:	e002      	b.n	80035dc <DMA_CheckFifoParam+0xe8>
      break;   
 80035d6:	bf00      	nop
 80035d8:	e000      	b.n	80035dc <DMA_CheckFifoParam+0xe8>
      break;
 80035da:	bf00      	nop
    }
  } 
  
  return status; 
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop

080035ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b089      	sub	sp, #36	@ 0x24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	e159      	b.n	80038bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003608:	2201      	movs	r2, #1
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	429a      	cmp	r2, r3
 8003622:	f040 8148 	bne.w	80038b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b01      	cmp	r3, #1
 8003630:	d005      	beq.n	800363e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800363a:	2b02      	cmp	r3, #2
 800363c:	d130      	bne.n	80036a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	2203      	movs	r2, #3
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	43db      	mvns	r3, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4013      	ands	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003674:	2201      	movs	r2, #1
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f003 0201 	and.w	r2, r3, #1
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d017      	beq.n	80036dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	2203      	movs	r2, #3
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d123      	bne.n	8003730 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	08da      	lsrs	r2, r3, #3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3208      	adds	r2, #8
 80036f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	220f      	movs	r2, #15
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	08da      	lsrs	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3208      	adds	r2, #8
 800372a:	69b9      	ldr	r1, [r7, #24]
 800372c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	2203      	movs	r2, #3
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 0203 	and.w	r2, r3, #3
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80a2 	beq.w	80038b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	4b57      	ldr	r3, [pc, #348]	@ (80038d4 <HAL_GPIO_Init+0x2e8>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377a:	4a56      	ldr	r2, [pc, #344]	@ (80038d4 <HAL_GPIO_Init+0x2e8>)
 800377c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003780:	6453      	str	r3, [r2, #68]	@ 0x44
 8003782:	4b54      	ldr	r3, [pc, #336]	@ (80038d4 <HAL_GPIO_Init+0x2e8>)
 8003784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800378e:	4a52      	ldr	r2, [pc, #328]	@ (80038d8 <HAL_GPIO_Init+0x2ec>)
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	089b      	lsrs	r3, r3, #2
 8003794:	3302      	adds	r3, #2
 8003796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800379a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	220f      	movs	r2, #15
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a49      	ldr	r2, [pc, #292]	@ (80038dc <HAL_GPIO_Init+0x2f0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d019      	beq.n	80037ee <HAL_GPIO_Init+0x202>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a48      	ldr	r2, [pc, #288]	@ (80038e0 <HAL_GPIO_Init+0x2f4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <HAL_GPIO_Init+0x1fe>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a47      	ldr	r2, [pc, #284]	@ (80038e4 <HAL_GPIO_Init+0x2f8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00d      	beq.n	80037e6 <HAL_GPIO_Init+0x1fa>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a46      	ldr	r2, [pc, #280]	@ (80038e8 <HAL_GPIO_Init+0x2fc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d007      	beq.n	80037e2 <HAL_GPIO_Init+0x1f6>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a45      	ldr	r2, [pc, #276]	@ (80038ec <HAL_GPIO_Init+0x300>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d101      	bne.n	80037de <HAL_GPIO_Init+0x1f2>
 80037da:	2304      	movs	r3, #4
 80037dc:	e008      	b.n	80037f0 <HAL_GPIO_Init+0x204>
 80037de:	2307      	movs	r3, #7
 80037e0:	e006      	b.n	80037f0 <HAL_GPIO_Init+0x204>
 80037e2:	2303      	movs	r3, #3
 80037e4:	e004      	b.n	80037f0 <HAL_GPIO_Init+0x204>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e002      	b.n	80037f0 <HAL_GPIO_Init+0x204>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <HAL_GPIO_Init+0x204>
 80037ee:	2300      	movs	r3, #0
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	f002 0203 	and.w	r2, r2, #3
 80037f6:	0092      	lsls	r2, r2, #2
 80037f8:	4093      	lsls	r3, r2
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003800:	4935      	ldr	r1, [pc, #212]	@ (80038d8 <HAL_GPIO_Init+0x2ec>)
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	089b      	lsrs	r3, r3, #2
 8003806:	3302      	adds	r3, #2
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800380e:	4b38      	ldr	r3, [pc, #224]	@ (80038f0 <HAL_GPIO_Init+0x304>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	43db      	mvns	r3, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4013      	ands	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003832:	4a2f      	ldr	r2, [pc, #188]	@ (80038f0 <HAL_GPIO_Init+0x304>)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003838:	4b2d      	ldr	r3, [pc, #180]	@ (80038f0 <HAL_GPIO_Init+0x304>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800385c:	4a24      	ldr	r2, [pc, #144]	@ (80038f0 <HAL_GPIO_Init+0x304>)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003862:	4b23      	ldr	r3, [pc, #140]	@ (80038f0 <HAL_GPIO_Init+0x304>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003886:	4a1a      	ldr	r2, [pc, #104]	@ (80038f0 <HAL_GPIO_Init+0x304>)
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800388c:	4b18      	ldr	r3, [pc, #96]	@ (80038f0 <HAL_GPIO_Init+0x304>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038b0:	4a0f      	ldr	r2, [pc, #60]	@ (80038f0 <HAL_GPIO_Init+0x304>)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3301      	adds	r3, #1
 80038ba:	61fb      	str	r3, [r7, #28]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	2b0f      	cmp	r3, #15
 80038c0:	f67f aea2 	bls.w	8003608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	3724      	adds	r7, #36	@ 0x24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40013800 	.word	0x40013800
 80038dc:	40020000 	.word	0x40020000
 80038e0:	40020400 	.word	0x40020400
 80038e4:	40020800 	.word	0x40020800
 80038e8:	40020c00 	.word	0x40020c00
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40013c00 	.word	0x40013c00

080038f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
 8003900:	4613      	mov	r3, r2
 8003902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003904:	787b      	ldrb	r3, [r7, #1]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003910:	e003      	b.n	800391a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003912:	887b      	ldrh	r3, [r7, #2]
 8003914:	041a      	lsls	r2, r3, #16
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	619a      	str	r2, [r3, #24]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e12b      	b.n	8003b92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fe fa18 	bl	8001d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2224      	movs	r2, #36	@ 0x24
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0201 	bic.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800397a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800398a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800398c:	f003 f94a 	bl	8006c24 <HAL_RCC_GetPCLK1Freq>
 8003990:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	4a81      	ldr	r2, [pc, #516]	@ (8003b9c <HAL_I2C_Init+0x274>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d807      	bhi.n	80039ac <HAL_I2C_Init+0x84>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4a80      	ldr	r2, [pc, #512]	@ (8003ba0 <HAL_I2C_Init+0x278>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	bf94      	ite	ls
 80039a4:	2301      	movls	r3, #1
 80039a6:	2300      	movhi	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	e006      	b.n	80039ba <HAL_I2C_Init+0x92>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4a7d      	ldr	r2, [pc, #500]	@ (8003ba4 <HAL_I2C_Init+0x27c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	bf94      	ite	ls
 80039b4:	2301      	movls	r3, #1
 80039b6:	2300      	movhi	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e0e7      	b.n	8003b92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4a78      	ldr	r2, [pc, #480]	@ (8003ba8 <HAL_I2C_Init+0x280>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	0c9b      	lsrs	r3, r3, #18
 80039cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	430a      	orrs	r2, r1
 80039e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4a6a      	ldr	r2, [pc, #424]	@ (8003b9c <HAL_I2C_Init+0x274>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d802      	bhi.n	80039fc <HAL_I2C_Init+0xd4>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	3301      	adds	r3, #1
 80039fa:	e009      	b.n	8003a10 <HAL_I2C_Init+0xe8>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a02:	fb02 f303 	mul.w	r3, r2, r3
 8003a06:	4a69      	ldr	r2, [pc, #420]	@ (8003bac <HAL_I2C_Init+0x284>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	099b      	lsrs	r3, r3, #6
 8003a0e:	3301      	adds	r3, #1
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	430b      	orrs	r3, r1
 8003a16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	495c      	ldr	r1, [pc, #368]	@ (8003b9c <HAL_I2C_Init+0x274>)
 8003a2c:	428b      	cmp	r3, r1
 8003a2e:	d819      	bhi.n	8003a64 <HAL_I2C_Init+0x13c>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	1e59      	subs	r1, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a3e:	1c59      	adds	r1, r3, #1
 8003a40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a44:	400b      	ands	r3, r1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <HAL_I2C_Init+0x138>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1e59      	subs	r1, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a58:	3301      	adds	r3, #1
 8003a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5e:	e051      	b.n	8003b04 <HAL_I2C_Init+0x1dc>
 8003a60:	2304      	movs	r3, #4
 8003a62:	e04f      	b.n	8003b04 <HAL_I2C_Init+0x1dc>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d111      	bne.n	8003a90 <HAL_I2C_Init+0x168>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	1e58      	subs	r0, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	440b      	add	r3, r1
 8003a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	e012      	b.n	8003ab6 <HAL_I2C_Init+0x18e>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1e58      	subs	r0, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	0099      	lsls	r1, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	bf0c      	ite	eq
 8003ab0:	2301      	moveq	r3, #1
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_I2C_Init+0x196>
 8003aba:	2301      	movs	r3, #1
 8003abc:	e022      	b.n	8003b04 <HAL_I2C_Init+0x1dc>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_I2C_Init+0x1bc>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1e58      	subs	r0, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6859      	ldr	r1, [r3, #4]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	440b      	add	r3, r1
 8003ad4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad8:	3301      	adds	r3, #1
 8003ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ae2:	e00f      	b.n	8003b04 <HAL_I2C_Init+0x1dc>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	1e58      	subs	r0, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6859      	ldr	r1, [r3, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	0099      	lsls	r1, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afa:	3301      	adds	r3, #1
 8003afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	6809      	ldr	r1, [r1, #0]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6911      	ldr	r1, [r2, #16]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68d2      	ldr	r2, [r2, #12]
 8003b3e:	4311      	orrs	r1, r2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	430b      	orrs	r3, r1
 8003b46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	000186a0 	.word	0x000186a0
 8003ba0:	001e847f 	.word	0x001e847f
 8003ba4:	003d08ff 	.word	0x003d08ff
 8003ba8:	431bde83 	.word	0x431bde83
 8003bac:	10624dd3 	.word	0x10624dd3

08003bb0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc2:	2b80      	cmp	r3, #128	@ 0x80
 8003bc4:	d103      	bne.n	8003bce <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	611a      	str	r2, [r3, #16]
  }
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	4608      	mov	r0, r1
 8003be6:	4611      	mov	r1, r2
 8003be8:	461a      	mov	r2, r3
 8003bea:	4603      	mov	r3, r0
 8003bec:	817b      	strh	r3, [r7, #10]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	813b      	strh	r3, [r7, #8]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bf6:	f7fe fbd1 	bl	800239c <HAL_GetTick>
 8003bfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	f040 80d9 	bne.w	8003dbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	2319      	movs	r3, #25
 8003c10:	2201      	movs	r2, #1
 8003c12:	496d      	ldr	r1, [pc, #436]	@ (8003dc8 <HAL_I2C_Mem_Write+0x1ec>)
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f002 f911 	bl	8005e3c <I2C_WaitOnFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
 8003c22:	e0cc      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_I2C_Mem_Write+0x56>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e0c5      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d007      	beq.n	8003c58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2221      	movs	r2, #33	@ 0x21
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2240      	movs	r2, #64	@ 0x40
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a3a      	ldr	r2, [r7, #32]
 8003c82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a4d      	ldr	r2, [pc, #308]	@ (8003dcc <HAL_I2C_Mem_Write+0x1f0>)
 8003c98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c9a:	88f8      	ldrh	r0, [r7, #6]
 8003c9c:	893a      	ldrh	r2, [r7, #8]
 8003c9e:	8979      	ldrh	r1, [r7, #10]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	4603      	mov	r3, r0
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f001 fea0 	bl	80059f0 <I2C_RequestMemoryWrite>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d052      	beq.n	8003d5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e081      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f002 f9d6 	bl	8006070 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d107      	bne.n	8003ce2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ce0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e06b      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cea:	781a      	ldrb	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d11b      	bne.n	8003d5c <HAL_I2C_Mem_Write+0x180>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d017      	beq.n	8003d5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	781a      	ldrb	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1aa      	bne.n	8003cba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f002 f9c9 	bl	8006100 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00d      	beq.n	8003d90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d107      	bne.n	8003d8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e016      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	00100002 	.word	0x00100002
 8003dcc:	ffff0000 	.word	0xffff0000

08003dd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08c      	sub	sp, #48	@ 0x30
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	4608      	mov	r0, r1
 8003dda:	4611      	mov	r1, r2
 8003ddc:	461a      	mov	r2, r3
 8003dde:	4603      	mov	r3, r0
 8003de0:	817b      	strh	r3, [r7, #10]
 8003de2:	460b      	mov	r3, r1
 8003de4:	813b      	strh	r3, [r7, #8]
 8003de6:	4613      	mov	r3, r2
 8003de8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dea:	f7fe fad7 	bl	800239c <HAL_GetTick>
 8003dee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b20      	cmp	r3, #32
 8003dfa:	f040 8214 	bne.w	8004226 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	2319      	movs	r3, #25
 8003e04:	2201      	movs	r2, #1
 8003e06:	497b      	ldr	r1, [pc, #492]	@ (8003ff4 <HAL_I2C_Mem_Read+0x224>)
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f002 f817 	bl	8005e3c <I2C_WaitOnFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003e14:	2302      	movs	r3, #2
 8003e16:	e207      	b.n	8004228 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_I2C_Mem_Read+0x56>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e200      	b.n	8004228 <HAL_I2C_Mem_Read+0x458>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d007      	beq.n	8003e4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2222      	movs	r2, #34	@ 0x22
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2240      	movs	r2, #64	@ 0x40
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003e7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ff8 <HAL_I2C_Mem_Read+0x228>)
 8003e8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e8e:	88f8      	ldrh	r0, [r7, #6]
 8003e90:	893a      	ldrh	r2, [r7, #8]
 8003e92:	8979      	ldrh	r1, [r7, #10]
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	9301      	str	r3, [sp, #4]
 8003e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f001 fe3c 	bl	8005b1c <I2C_RequestMemoryRead>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e1bc      	b.n	8004228 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d113      	bne.n	8003ede <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	623b      	str	r3, [r7, #32]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	623b      	str	r3, [r7, #32]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	623b      	str	r3, [r7, #32]
 8003eca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e190      	b.n	8004200 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d11b      	bne.n	8003f1e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ef4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	e170      	b.n	8004200 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d11b      	bne.n	8003f5e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f46:	2300      	movs	r3, #0
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	e150      	b.n	8004200 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f74:	e144      	b.n	8004200 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	f200 80f1 	bhi.w	8004162 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d123      	bne.n	8003fd0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f002 f931 	bl	80061f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e145      	b.n	8004228 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fce:	e117      	b.n	8004200 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d14e      	bne.n	8004076 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fde:	2200      	movs	r2, #0
 8003fe0:	4906      	ldr	r1, [pc, #24]	@ (8003ffc <HAL_I2C_Mem_Read+0x22c>)
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f001 ff2a 	bl	8005e3c <I2C_WaitOnFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e11a      	b.n	8004228 <HAL_I2C_Mem_Read+0x458>
 8003ff2:	bf00      	nop
 8003ff4:	00100002 	.word	0x00100002
 8003ff8:	ffff0000 	.word	0xffff0000
 8003ffc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800400e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004074:	e0c4      	b.n	8004200 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800407c:	2200      	movs	r2, #0
 800407e:	496c      	ldr	r1, [pc, #432]	@ (8004230 <HAL_I2C_Mem_Read+0x460>)
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f001 fedb 	bl	8005e3c <I2C_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0cb      	b.n	8004228 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800409e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d8:	2200      	movs	r2, #0
 80040da:	4955      	ldr	r1, [pc, #340]	@ (8004230 <HAL_I2C_Mem_Read+0x460>)
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f001 fead 	bl	8005e3c <I2C_WaitOnFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e09d      	b.n	8004228 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004160:	e04e      	b.n	8004200 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004164:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f002 f844 	bl	80061f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e058      	b.n	8004228 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d124      	bne.n	8004200 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d107      	bne.n	80041ce <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041cc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004204:	2b00      	cmp	r3, #0
 8004206:	f47f aeb6 	bne.w	8003f76 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e000      	b.n	8004228 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004226:	2302      	movs	r3, #2
  }
}
 8004228:	4618      	mov	r0, r3
 800422a:	3728      	adds	r7, #40	@ 0x28
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	00010004 	.word	0x00010004

08004234 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004254:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800425c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b10      	cmp	r3, #16
 8004262:	d003      	beq.n	800426c <HAL_I2C_EV_IRQHandler+0x38>
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	2b40      	cmp	r3, #64	@ 0x40
 8004268:	f040 80b1 	bne.w	80043ce <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10d      	bne.n	80042a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800428c:	d003      	beq.n	8004296 <HAL_I2C_EV_IRQHandler+0x62>
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004294:	d101      	bne.n	800429a <HAL_I2C_EV_IRQHandler+0x66>
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <HAL_I2C_EV_IRQHandler+0x68>
 800429a:	2300      	movs	r3, #0
 800429c:	2b01      	cmp	r3, #1
 800429e:	f000 8114 	beq.w	80044ca <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00b      	beq.n	80042c4 <HAL_I2C_EV_IRQHandler+0x90>
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d006      	beq.n	80042c4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f002 f828 	bl	800630c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fd7a 	bl	8004db6 <I2C_Master_SB>
 80042c2:	e083      	b.n	80043cc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d008      	beq.n	80042e0 <HAL_I2C_EV_IRQHandler+0xac>
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fdf2 	bl	8004ec2 <I2C_Master_ADD10>
 80042de:	e075      	b.n	80043cc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d008      	beq.n	80042fc <HAL_I2C_EV_IRQHandler+0xc8>
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fe0e 	bl	8004f16 <I2C_Master_ADDR>
 80042fa:	e067      	b.n	80043cc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d036      	beq.n	8004374 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004314:	f000 80db 	beq.w	80044ce <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00d      	beq.n	800433e <HAL_I2C_EV_IRQHandler+0x10a>
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <HAL_I2C_EV_IRQHandler+0x10a>
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d103      	bne.n	800433e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f9d6 	bl	80046e8 <I2C_MasterTransmit_TXE>
 800433c:	e046      	b.n	80043cc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80c2 	beq.w	80044ce <HAL_I2C_EV_IRQHandler+0x29a>
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80bc 	beq.w	80044ce <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004356:	7bbb      	ldrb	r3, [r7, #14]
 8004358:	2b21      	cmp	r3, #33	@ 0x21
 800435a:	d103      	bne.n	8004364 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fa5f 	bl	8004820 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004362:	e0b4      	b.n	80044ce <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	2b40      	cmp	r3, #64	@ 0x40
 8004368:	f040 80b1 	bne.w	80044ce <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 facd 	bl	800490c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004372:	e0ac      	b.n	80044ce <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800437e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004382:	f000 80a4 	beq.w	80044ce <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00d      	beq.n	80043ac <HAL_I2C_EV_IRQHandler+0x178>
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <HAL_I2C_EV_IRQHandler+0x178>
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d103      	bne.n	80043ac <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fb49 	bl	8004a3c <I2C_MasterReceive_RXNE>
 80043aa:	e00f      	b.n	80043cc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 808b 	beq.w	80044ce <HAL_I2C_EV_IRQHandler+0x29a>
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 8085 	beq.w	80044ce <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fc01 	bl	8004bcc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ca:	e080      	b.n	80044ce <HAL_I2C_EV_IRQHandler+0x29a>
 80043cc:	e07f      	b.n	80044ce <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d004      	beq.n	80043e0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	e007      	b.n	80043f0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d011      	beq.n	800441e <HAL_I2C_EV_IRQHandler+0x1ea>
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00c      	beq.n	800441e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004414:	69b9      	ldr	r1, [r7, #24]
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 ffcc 	bl	80053b4 <I2C_Slave_ADDR>
 800441c:	e05a      	b.n	80044d4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_I2C_EV_IRQHandler+0x206>
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f001 f806 	bl	8005444 <I2C_Slave_STOPF>
 8004438:	e04c      	b.n	80044d4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800443a:	7bbb      	ldrb	r3, [r7, #14]
 800443c:	2b21      	cmp	r3, #33	@ 0x21
 800443e:	d002      	beq.n	8004446 <HAL_I2C_EV_IRQHandler+0x212>
 8004440:	7bbb      	ldrb	r3, [r7, #14]
 8004442:	2b29      	cmp	r3, #41	@ 0x29
 8004444:	d120      	bne.n	8004488 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00d      	beq.n	800446c <HAL_I2C_EV_IRQHandler+0x238>
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004456:	2b00      	cmp	r3, #0
 8004458:	d008      	beq.n	800446c <HAL_I2C_EV_IRQHandler+0x238>
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d103      	bne.n	800446c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fee7 	bl	8005238 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800446a:	e032      	b.n	80044d2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b00      	cmp	r3, #0
 8004474:	d02d      	beq.n	80044d2 <HAL_I2C_EV_IRQHandler+0x29e>
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800447c:	2b00      	cmp	r3, #0
 800447e:	d028      	beq.n	80044d2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 ff16 	bl	80052b2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004486:	e024      	b.n	80044d2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00d      	beq.n	80044ae <HAL_I2C_EV_IRQHandler+0x27a>
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_I2C_EV_IRQHandler+0x27a>
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d103      	bne.n	80044ae <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 ff24 	bl	80052f4 <I2C_SlaveReceive_RXNE>
 80044ac:	e012      	b.n	80044d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00d      	beq.n	80044d4 <HAL_I2C_EV_IRQHandler+0x2a0>
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 ff54 	bl	8005370 <I2C_SlaveReceive_BTF>
 80044c8:	e004      	b.n	80044d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80044ca:	bf00      	nop
 80044cc:	e002      	b.n	80044d4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044ce:	bf00      	nop
 80044d0:	e000      	b.n	80044d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044d2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b08a      	sub	sp, #40	@ 0x28
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80044f2:	2300      	movs	r3, #0
 80044f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044fc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00d      	beq.n	8004524 <HAL_I2C_ER_IRQHandler+0x4a>
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004522:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00d      	beq.n	800454a <HAL_I2C_ER_IRQHandler+0x70>
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	f043 0302 	orr.w	r3, r3, #2
 800453e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004548:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004550:	2b00      	cmp	r3, #0
 8004552:	d03e      	beq.n	80045d2 <HAL_I2C_ER_IRQHandler+0xf8>
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d039      	beq.n	80045d2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800455e:	7efb      	ldrb	r3, [r7, #27]
 8004560:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004566:	b29b      	uxth	r3, r3
 8004568:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004570:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004576:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004578:	7ebb      	ldrb	r3, [r7, #26]
 800457a:	2b20      	cmp	r3, #32
 800457c:	d112      	bne.n	80045a4 <HAL_I2C_ER_IRQHandler+0xca>
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10f      	bne.n	80045a4 <HAL_I2C_ER_IRQHandler+0xca>
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	2b21      	cmp	r3, #33	@ 0x21
 8004588:	d008      	beq.n	800459c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800458a:	7cfb      	ldrb	r3, [r7, #19]
 800458c:	2b29      	cmp	r3, #41	@ 0x29
 800458e:	d005      	beq.n	800459c <HAL_I2C_ER_IRQHandler+0xc2>
 8004590:	7cfb      	ldrb	r3, [r7, #19]
 8004592:	2b28      	cmp	r3, #40	@ 0x28
 8004594:	d106      	bne.n	80045a4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b21      	cmp	r3, #33	@ 0x21
 800459a:	d103      	bne.n	80045a4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f001 f881 	bl	80056a4 <I2C_Slave_AF>
 80045a2:	e016      	b.n	80045d2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045ac:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80045ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b0:	f043 0304 	orr.w	r3, r3, #4
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80045b6:	7efb      	ldrb	r3, [r7, #27]
 80045b8:	2b10      	cmp	r3, #16
 80045ba:	d002      	beq.n	80045c2 <HAL_I2C_ER_IRQHandler+0xe8>
 80045bc:	7efb      	ldrb	r3, [r7, #27]
 80045be:	2b40      	cmp	r3, #64	@ 0x40
 80045c0:	d107      	bne.n	80045d2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045d0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00d      	beq.n	80045f8 <HAL_I2C_ER_IRQHandler+0x11e>
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d008      	beq.n	80045f8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	f043 0308 	orr.w	r3, r3, #8
 80045ec:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80045f6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d008      	beq.n	8004610 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f001 f8be 	bl	800578c <I2C_ITError>
  }
}
 8004610:	bf00      	nop
 8004612:	3728      	adds	r7, #40	@ 0x28
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	70fb      	strb	r3, [r7, #3]
 8004674:	4613      	mov	r3, r2
 8004676:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004704:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470a:	2b00      	cmp	r3, #0
 800470c:	d150      	bne.n	80047b0 <I2C_MasterTransmit_TXE+0xc8>
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	2b21      	cmp	r3, #33	@ 0x21
 8004712:	d14d      	bne.n	80047b0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2b08      	cmp	r3, #8
 8004718:	d01d      	beq.n	8004756 <I2C_MasterTransmit_TXE+0x6e>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b20      	cmp	r3, #32
 800471e:	d01a      	beq.n	8004756 <I2C_MasterTransmit_TXE+0x6e>
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004726:	d016      	beq.n	8004756 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004736:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2211      	movs	r2, #17
 800473c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff ff62 	bl	8004618 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004754:	e060      	b.n	8004818 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004764:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004774:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b40      	cmp	r3, #64	@ 0x40
 800478e:	d107      	bne.n	80047a0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ff7d 	bl	8004698 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800479e:	e03b      	b.n	8004818 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff ff35 	bl	8004618 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047ae:	e033      	b.n	8004818 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	2b21      	cmp	r3, #33	@ 0x21
 80047b4:	d005      	beq.n	80047c2 <I2C_MasterTransmit_TXE+0xda>
 80047b6:	7bbb      	ldrb	r3, [r7, #14]
 80047b8:	2b40      	cmp	r3, #64	@ 0x40
 80047ba:	d12d      	bne.n	8004818 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b22      	cmp	r3, #34	@ 0x22
 80047c0:	d12a      	bne.n	8004818 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d108      	bne.n	80047de <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047da:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80047dc:	e01c      	b.n	8004818 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b40      	cmp	r3, #64	@ 0x40
 80047e8:	d103      	bne.n	80047f2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f88e 	bl	800490c <I2C_MemoryTransmit_TXE_BTF>
}
 80047f0:	e012      	b.n	8004818 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f6:	781a      	ldrb	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004816:	e7ff      	b.n	8004818 <I2C_MasterTransmit_TXE+0x130>
 8004818:	bf00      	nop
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b21      	cmp	r3, #33	@ 0x21
 8004838:	d164      	bne.n	8004904 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d012      	beq.n	800486a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	781a      	ldrb	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004868:	e04c      	b.n	8004904 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b08      	cmp	r3, #8
 800486e:	d01d      	beq.n	80048ac <I2C_MasterTransmit_BTF+0x8c>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b20      	cmp	r3, #32
 8004874:	d01a      	beq.n	80048ac <I2C_MasterTransmit_BTF+0x8c>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800487c:	d016      	beq.n	80048ac <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800488c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2211      	movs	r2, #17
 8004892:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff feb7 	bl	8004618 <HAL_I2C_MasterTxCpltCallback>
}
 80048aa:	e02b      	b.n	8004904 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048ba:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ca:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b40      	cmp	r3, #64	@ 0x40
 80048e4:	d107      	bne.n	80048f6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff fed2 	bl	8004698 <HAL_I2C_MemTxCpltCallback>
}
 80048f4:	e006      	b.n	8004904 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7ff fe8a 	bl	8004618 <HAL_I2C_MasterTxCpltCallback>
}
 8004904:	bf00      	nop
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800491a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004920:	2b00      	cmp	r3, #0
 8004922:	d11d      	bne.n	8004960 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004928:	2b01      	cmp	r3, #1
 800492a:	d10b      	bne.n	8004944 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004930:	b2da      	uxtb	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800493c:	1c9a      	adds	r2, r3, #2
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004942:	e077      	b.n	8004a34 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004948:	b29b      	uxth	r3, r3
 800494a:	121b      	asrs	r3, r3, #8
 800494c:	b2da      	uxtb	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800495e:	e069      	b.n	8004a34 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004964:	2b01      	cmp	r3, #1
 8004966:	d10b      	bne.n	8004980 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800496c:	b2da      	uxtb	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800497e:	e059      	b.n	8004a34 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004984:	2b02      	cmp	r3, #2
 8004986:	d152      	bne.n	8004a2e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	2b22      	cmp	r3, #34	@ 0x22
 800498c:	d10d      	bne.n	80049aa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800499c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80049a8:	e044      	b.n	8004a34 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d015      	beq.n	80049e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	2b21      	cmp	r3, #33	@ 0x21
 80049b8:	d112      	bne.n	80049e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	781a      	ldrb	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80049de:	e029      	b.n	8004a34 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d124      	bne.n	8004a34 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	2b21      	cmp	r3, #33	@ 0x21
 80049ee:	d121      	bne.n	8004a34 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049fe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a0e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff fe36 	bl	8004698 <HAL_I2C_MemTxCpltCallback>
}
 8004a2c:	e002      	b.n	8004a34 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff f8be 	bl	8003bb0 <I2C_Flush_DR>
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b22      	cmp	r3, #34	@ 0x22
 8004a4e:	f040 80b9 	bne.w	8004bc4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a56:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d921      	bls.n	8004aaa <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	f040 8096 	bne.w	8004bc4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aa6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004aa8:	e08c      	b.n	8004bc4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d07f      	beq.n	8004bb2 <I2C_MasterReceive_RXNE+0x176>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d002      	beq.n	8004abe <I2C_MasterReceive_RXNE+0x82>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d179      	bne.n	8004bb2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f001 fb66 	bl	8006190 <I2C_WaitOnSTOPRequestThroughIT>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d14c      	bne.n	8004b64 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ad8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ae8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b40      	cmp	r3, #64	@ 0x40
 8004b22:	d10a      	bne.n	8004b3a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff fdba 	bl	80046ac <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b38:	e044      	b.n	8004bc4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d002      	beq.n	8004b4e <I2C_MasterReceive_RXNE+0x112>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b20      	cmp	r3, #32
 8004b4c:	d103      	bne.n	8004b56 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b54:	e002      	b.n	8004b5c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2212      	movs	r2, #18
 8004b5a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff fd65 	bl	800462c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b62:	e02f      	b.n	8004bc4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b72:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691a      	ldr	r2, [r3, #16]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7ff fd88 	bl	80046c0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004bb0:	e008      	b.n	8004bc4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bc0:	605a      	str	r2, [r3, #4]
}
 8004bc2:	e7ff      	b.n	8004bc4 <I2C_MasterReceive_RXNE+0x188>
 8004bc4:	bf00      	nop
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d11b      	bne.n	8004c1c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bf2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004c1a:	e0c8      	b.n	8004dae <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d129      	bne.n	8004c7a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c34:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d00a      	beq.n	8004c52 <I2C_MasterReceive_BTF+0x86>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d007      	beq.n	8004c52 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c50:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	691a      	ldr	r2, [r3, #16]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004c78:	e099      	b.n	8004dae <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	f040 8081 	bne.w	8004d88 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d002      	beq.n	8004c92 <I2C_MasterReceive_BTF+0xc6>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b10      	cmp	r3, #16
 8004c90:	d108      	bne.n	8004ca4 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	e019      	b.n	8004cd8 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d002      	beq.n	8004cb0 <I2C_MasterReceive_BTF+0xe4>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d108      	bne.n	8004cc2 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	e00a      	b.n	8004cd8 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b10      	cmp	r3, #16
 8004cc6:	d007      	beq.n	8004cd8 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cd6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004d32:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b40      	cmp	r3, #64	@ 0x40
 8004d46:	d10a      	bne.n	8004d5e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7ff fca8 	bl	80046ac <HAL_I2C_MemRxCpltCallback>
}
 8004d5c:	e027      	b.n	8004dae <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d002      	beq.n	8004d72 <I2C_MasterReceive_BTF+0x1a6>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	d103      	bne.n	8004d7a <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d78:	e002      	b.n	8004d80 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2212      	movs	r2, #18
 8004d7e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff fc53 	bl	800462c <HAL_I2C_MasterRxCpltCallback>
}
 8004d86:	e012      	b.n	8004dae <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691a      	ldr	r2, [r3, #16]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004dae:	bf00      	nop
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b40      	cmp	r3, #64	@ 0x40
 8004dc8:	d117      	bne.n	8004dfa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d109      	bne.n	8004de6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004de2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004de4:	e067      	b.n	8004eb6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	611a      	str	r2, [r3, #16]
}
 8004df8:	e05d      	b.n	8004eb6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e02:	d133      	bne.n	8004e6c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b21      	cmp	r3, #33	@ 0x21
 8004e0e:	d109      	bne.n	8004e24 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	461a      	mov	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e20:	611a      	str	r2, [r3, #16]
 8004e22:	e008      	b.n	8004e36 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d004      	beq.n	8004e48 <I2C_Master_SB+0x92>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d108      	bne.n	8004e5a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d032      	beq.n	8004eb6 <I2C_Master_SB+0x100>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d02d      	beq.n	8004eb6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e68:	605a      	str	r2, [r3, #4]
}
 8004e6a:	e024      	b.n	8004eb6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10e      	bne.n	8004e92 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	11db      	asrs	r3, r3, #7
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	f003 0306 	and.w	r3, r3, #6
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	f063 030f 	orn	r3, r3, #15
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	611a      	str	r2, [r3, #16]
}
 8004e90:	e011      	b.n	8004eb6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d10d      	bne.n	8004eb6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	11db      	asrs	r3, r3, #7
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	f003 0306 	and.w	r3, r3, #6
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f063 030e 	orn	r3, r3, #14
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	611a      	str	r2, [r3, #16]
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d004      	beq.n	8004ee8 <I2C_Master_ADD10+0x26>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d108      	bne.n	8004efa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00c      	beq.n	8004f0a <I2C_Master_ADD10+0x48>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d007      	beq.n	8004f0a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f08:	605a      	str	r2, [r3, #4]
  }
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b091      	sub	sp, #68	@ 0x44
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f24:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f32:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b22      	cmp	r3, #34	@ 0x22
 8004f3e:	f040 8169 	bne.w	8005214 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10f      	bne.n	8004f6a <I2C_Master_ADDR+0x54>
 8004f4a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004f4e:	2b40      	cmp	r3, #64	@ 0x40
 8004f50:	d10b      	bne.n	8004f6a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f52:	2300      	movs	r3, #0
 8004f54:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f68:	e160      	b.n	800522c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d11d      	bne.n	8004fae <I2C_Master_ADDR+0x98>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004f7a:	d118      	bne.n	8004fae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fa0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	651a      	str	r2, [r3, #80]	@ 0x50
 8004fac:	e13e      	b.n	800522c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d113      	bne.n	8004fe0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb8:	2300      	movs	r3, #0
 8004fba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e115      	b.n	800520c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	f040 808a 	bne.w	8005100 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ff2:	d137      	bne.n	8005064 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005002:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800500e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005012:	d113      	bne.n	800503c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005022:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005024:	2300      	movs	r3, #0
 8005026:	627b      	str	r3, [r7, #36]	@ 0x24
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	e0e7      	b.n	800520c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800503c:	2300      	movs	r3, #0
 800503e:	623b      	str	r3, [r7, #32]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	623b      	str	r3, [r7, #32]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	623b      	str	r3, [r7, #32]
 8005050:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	e0d3      	b.n	800520c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005066:	2b08      	cmp	r3, #8
 8005068:	d02e      	beq.n	80050c8 <I2C_Master_ADDR+0x1b2>
 800506a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506c:	2b20      	cmp	r3, #32
 800506e:	d02b      	beq.n	80050c8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005072:	2b12      	cmp	r3, #18
 8005074:	d102      	bne.n	800507c <I2C_Master_ADDR+0x166>
 8005076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005078:	2b01      	cmp	r3, #1
 800507a:	d125      	bne.n	80050c8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800507c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800507e:	2b04      	cmp	r3, #4
 8005080:	d00e      	beq.n	80050a0 <I2C_Master_ADDR+0x18a>
 8005082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005084:	2b02      	cmp	r3, #2
 8005086:	d00b      	beq.n	80050a0 <I2C_Master_ADDR+0x18a>
 8005088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508a:	2b10      	cmp	r3, #16
 800508c:	d008      	beq.n	80050a0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	e007      	b.n	80050b0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050ae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b0:	2300      	movs	r3, #0
 80050b2:	61fb      	str	r3, [r7, #28]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	61fb      	str	r3, [r7, #28]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	61fb      	str	r3, [r7, #28]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	e0a1      	b.n	800520c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d8:	2300      	movs	r3, #0
 80050da:	61bb      	str	r3, [r7, #24]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	61bb      	str	r3, [r7, #24]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	61bb      	str	r3, [r7, #24]
 80050ec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e085      	b.n	800520c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d14d      	bne.n	80051a6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800510a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510c:	2b04      	cmp	r3, #4
 800510e:	d016      	beq.n	800513e <I2C_Master_ADDR+0x228>
 8005110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005112:	2b02      	cmp	r3, #2
 8005114:	d013      	beq.n	800513e <I2C_Master_ADDR+0x228>
 8005116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005118:	2b10      	cmp	r3, #16
 800511a:	d010      	beq.n	800513e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800512a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	e007      	b.n	800514e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800514c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005158:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800515c:	d117      	bne.n	800518e <I2C_Master_ADDR+0x278>
 800515e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005160:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005164:	d00b      	beq.n	800517e <I2C_Master_ADDR+0x268>
 8005166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005168:	2b01      	cmp	r3, #1
 800516a:	d008      	beq.n	800517e <I2C_Master_ADDR+0x268>
 800516c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516e:	2b08      	cmp	r3, #8
 8005170:	d005      	beq.n	800517e <I2C_Master_ADDR+0x268>
 8005172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005174:	2b10      	cmp	r3, #16
 8005176:	d002      	beq.n	800517e <I2C_Master_ADDR+0x268>
 8005178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800517a:	2b20      	cmp	r3, #32
 800517c:	d107      	bne.n	800518e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800518c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	e032      	b.n	800520c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051b4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051c4:	d117      	bne.n	80051f6 <I2C_Master_ADDR+0x2e0>
 80051c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051cc:	d00b      	beq.n	80051e6 <I2C_Master_ADDR+0x2d0>
 80051ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d008      	beq.n	80051e6 <I2C_Master_ADDR+0x2d0>
 80051d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d005      	beq.n	80051e6 <I2C_Master_ADDR+0x2d0>
 80051da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051dc:	2b10      	cmp	r3, #16
 80051de:	d002      	beq.n	80051e6 <I2C_Master_ADDR+0x2d0>
 80051e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	d107      	bne.n	80051f6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80051f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f6:	2300      	movs	r3, #0
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005212:	e00b      	b.n	800522c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
}
 800522a:	e7ff      	b.n	800522c <I2C_Master_ADDR+0x316>
 800522c:	bf00      	nop
 800522e:	3744      	adds	r7, #68	@ 0x44
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005246:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d02b      	beq.n	80052aa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005256:	781a      	ldrb	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800527a:	b29b      	uxth	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d114      	bne.n	80052aa <I2C_SlaveTransmit_TXE+0x72>
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	2b29      	cmp	r3, #41	@ 0x29
 8005284:	d111      	bne.n	80052aa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005294:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2221      	movs	r2, #33	@ 0x21
 800529a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2228      	movs	r2, #40	@ 0x28
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff f9cb 	bl	8004640 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80052aa:	bf00      	nop
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d011      	beq.n	80052e8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c8:	781a      	ldrb	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052de:	b29b      	uxth	r3, r3
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005302:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d02c      	beq.n	8005368 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d114      	bne.n	8005368 <I2C_SlaveReceive_RXNE+0x74>
 800533e:	7bfb      	ldrb	r3, [r7, #15]
 8005340:	2b2a      	cmp	r3, #42	@ 0x2a
 8005342:	d111      	bne.n	8005368 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005352:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2222      	movs	r2, #34	@ 0x22
 8005358:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2228      	movs	r2, #40	@ 0x28
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7ff f976 	bl	8004654 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005368:	bf00      	nop
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d012      	beq.n	80053a8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80053be:	2300      	movs	r3, #0
 80053c0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80053ce:	2b28      	cmp	r3, #40	@ 0x28
 80053d0:	d125      	bne.n	800541e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053e0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80053ec:	2301      	movs	r3, #1
 80053ee:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d103      	bne.n	8005402 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	81bb      	strh	r3, [r7, #12]
 8005400:	e002      	b.n	8005408 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005410:	89ba      	ldrh	r2, [r7, #12]
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	4619      	mov	r1, r3
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff f926 	bl	8004668 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800541c:	e00e      	b.n	800543c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800541e:	2300      	movs	r3, #0
 8005420:	60bb      	str	r3, [r7, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	60bb      	str	r3, [r7, #8]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800543c:	bf00      	nop
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005452:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005462:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005464:	2300      	movs	r3, #0
 8005466:	60bb      	str	r3, [r7, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	60bb      	str	r3, [r7, #8]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005490:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800549c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054a0:	d172      	bne.n	8005588 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	2b22      	cmp	r3, #34	@ 0x22
 80054a6:	d002      	beq.n	80054ae <I2C_Slave_STOPF+0x6a>
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
 80054aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80054ac:	d135      	bne.n	800551a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d005      	beq.n	80054d2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ca:	f043 0204 	orr.w	r2, r3, #4
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fd ff86 	bl	80033f8 <HAL_DMA_GetState>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d049      	beq.n	8005586 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f6:	4a69      	ldr	r2, [pc, #420]	@ (800569c <I2C_Slave_STOPF+0x258>)
 80054f8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fd fdce 	bl	80030a0 <HAL_DMA_Abort_IT>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d03d      	beq.n	8005586 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005514:	4610      	mov	r0, r2
 8005516:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005518:	e035      	b.n	8005586 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	b29a      	uxth	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800552c:	b29b      	uxth	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d005      	beq.n	800553e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005536:	f043 0204 	orr.w	r2, r3, #4
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800554c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005552:	4618      	mov	r0, r3
 8005554:	f7fd ff50 	bl	80033f8 <HAL_DMA_GetState>
 8005558:	4603      	mov	r3, r0
 800555a:	2b01      	cmp	r3, #1
 800555c:	d014      	beq.n	8005588 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005562:	4a4e      	ldr	r2, [pc, #312]	@ (800569c <I2C_Slave_STOPF+0x258>)
 8005564:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800556a:	4618      	mov	r0, r3
 800556c:	f7fd fd98 	bl	80030a0 <HAL_DMA_Abort_IT>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d008      	beq.n	8005588 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800557a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005580:	4610      	mov	r0, r2
 8005582:	4798      	blx	r3
 8005584:	e000      	b.n	8005588 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005586:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800558c:	b29b      	uxth	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d03e      	beq.n	8005610 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b04      	cmp	r3, #4
 800559e:	d112      	bne.n	80055c6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055bc:	b29b      	uxth	r3, r3
 80055be:	3b01      	subs	r3, #1
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d0:	2b40      	cmp	r3, #64	@ 0x40
 80055d2:	d112      	bne.n	80055fa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691a      	ldr	r2, [r3, #16]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055fe:	b29b      	uxth	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005608:	f043 0204 	orr.w	r2, r3, #4
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f8b7 	bl	800578c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800561e:	e039      	b.n	8005694 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	2b2a      	cmp	r3, #42	@ 0x2a
 8005624:	d109      	bne.n	800563a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2228      	movs	r2, #40	@ 0x28
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff f80d 	bl	8004654 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b28      	cmp	r3, #40	@ 0x28
 8005644:	d111      	bne.n	800566a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a15      	ldr	r2, [pc, #84]	@ (80056a0 <I2C_Slave_STOPF+0x25c>)
 800564a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff f80e 	bl	8004684 <HAL_I2C_ListenCpltCallback>
}
 8005668:	e014      	b.n	8005694 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566e:	2b22      	cmp	r3, #34	@ 0x22
 8005670:	d002      	beq.n	8005678 <I2C_Slave_STOPF+0x234>
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	2b22      	cmp	r3, #34	@ 0x22
 8005676:	d10d      	bne.n	8005694 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2220      	movs	r2, #32
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fe ffe0 	bl	8004654 <HAL_I2C_SlaveRxCpltCallback>
}
 8005694:	bf00      	nop
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	08005ced 	.word	0x08005ced
 80056a0:	ffff0000 	.word	0xffff0000

080056a4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056b2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d002      	beq.n	80056c6 <I2C_Slave_AF+0x22>
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d129      	bne.n	800571a <I2C_Slave_AF+0x76>
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	2b28      	cmp	r3, #40	@ 0x28
 80056ca:	d126      	bne.n	800571a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a2e      	ldr	r2, [pc, #184]	@ (8005788 <I2C_Slave_AF+0xe4>)
 80056d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80056e0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80056ea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056fa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fe ffb6 	bl	8004684 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005718:	e031      	b.n	800577e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800571a:	7bfb      	ldrb	r3, [r7, #15]
 800571c:	2b21      	cmp	r3, #33	@ 0x21
 800571e:	d129      	bne.n	8005774 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a19      	ldr	r2, [pc, #100]	@ (8005788 <I2C_Slave_AF+0xe4>)
 8005724:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2221      	movs	r2, #33	@ 0x21
 800572a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800574a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005754:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005764:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fe fa22 	bl	8003bb0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7fe ff67 	bl	8004640 <HAL_I2C_SlaveTxCpltCallback>
}
 8005772:	e004      	b.n	800577e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800577c:	615a      	str	r2, [r3, #20]
}
 800577e:	bf00      	nop
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	ffff0000 	.word	0xffff0000

0800578c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800579a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80057a4:	7bbb      	ldrb	r3, [r7, #14]
 80057a6:	2b10      	cmp	r3, #16
 80057a8:	d002      	beq.n	80057b0 <I2C_ITError+0x24>
 80057aa:	7bbb      	ldrb	r3, [r7, #14]
 80057ac:	2b40      	cmp	r3, #64	@ 0x40
 80057ae:	d10a      	bne.n	80057c6 <I2C_ITError+0x3a>
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
 80057b2:	2b22      	cmp	r3, #34	@ 0x22
 80057b4:	d107      	bne.n	80057c6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057c4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
 80057c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80057cc:	2b28      	cmp	r3, #40	@ 0x28
 80057ce:	d107      	bne.n	80057e0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2228      	movs	r2, #40	@ 0x28
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80057de:	e015      	b.n	800580c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057ee:	d00a      	beq.n	8005806 <I2C_ITError+0x7a>
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2b60      	cmp	r3, #96	@ 0x60
 80057f4:	d007      	beq.n	8005806 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005816:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800581a:	d162      	bne.n	80058e2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800582a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005830:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b01      	cmp	r3, #1
 8005838:	d020      	beq.n	800587c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800583e:	4a6a      	ldr	r2, [pc, #424]	@ (80059e8 <I2C_ITError+0x25c>)
 8005840:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005846:	4618      	mov	r0, r3
 8005848:	f7fd fc2a 	bl	80030a0 <HAL_DMA_Abort_IT>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 8089 	beq.w	8005966 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0201 	bic.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005876:	4610      	mov	r0, r2
 8005878:	4798      	blx	r3
 800587a:	e074      	b.n	8005966 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005880:	4a59      	ldr	r2, [pc, #356]	@ (80059e8 <I2C_ITError+0x25c>)
 8005882:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005888:	4618      	mov	r0, r3
 800588a:	f7fd fc09 	bl	80030a0 <HAL_DMA_Abort_IT>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d068      	beq.n	8005966 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800589e:	2b40      	cmp	r3, #64	@ 0x40
 80058a0:	d10b      	bne.n	80058ba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0201 	bic.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80058dc:	4610      	mov	r0, r2
 80058de:	4798      	blx	r3
 80058e0:	e041      	b.n	8005966 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b60      	cmp	r3, #96	@ 0x60
 80058ec:	d125      	bne.n	800593a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005906:	2b40      	cmp	r3, #64	@ 0x40
 8005908:	d10b      	bne.n	8005922 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591c:	1c5a      	adds	r2, r3, #1
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0201 	bic.w	r2, r2, #1
 8005930:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fe fece 	bl	80046d4 <HAL_I2C_AbortCpltCallback>
 8005938:	e015      	b.n	8005966 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005944:	2b40      	cmp	r3, #64	@ 0x40
 8005946:	d10b      	bne.n	8005960 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691a      	ldr	r2, [r3, #16]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7fe fead 	bl	80046c0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10e      	bne.n	8005994 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800597c:	2b00      	cmp	r3, #0
 800597e:	d109      	bne.n	8005994 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005986:	2b00      	cmp	r3, #0
 8005988:	d104      	bne.n	8005994 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80059a2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059aa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d113      	bne.n	80059e0 <I2C_ITError+0x254>
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	2b28      	cmp	r3, #40	@ 0x28
 80059bc:	d110      	bne.n	80059e0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a0a      	ldr	r2, [pc, #40]	@ (80059ec <I2C_ITError+0x260>)
 80059c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2220      	movs	r2, #32
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fe fe52 	bl	8004684 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80059e0:	bf00      	nop
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	08005ced 	.word	0x08005ced
 80059ec:	ffff0000 	.word	0xffff0000

080059f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b088      	sub	sp, #32
 80059f4:	af02      	add	r7, sp, #8
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	4608      	mov	r0, r1
 80059fa:	4611      	mov	r1, r2
 80059fc:	461a      	mov	r2, r3
 80059fe:	4603      	mov	r3, r0
 8005a00:	817b      	strh	r3, [r7, #10]
 8005a02:	460b      	mov	r3, r1
 8005a04:	813b      	strh	r3, [r7, #8]
 8005a06:	4613      	mov	r3, r2
 8005a08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 fa08 	bl	8005e3c <I2C_WaitOnFlagUntilTimeout>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00d      	beq.n	8005a4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a40:	d103      	bne.n	8005a4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e05f      	b.n	8005b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a4e:	897b      	ldrh	r3, [r7, #10]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	461a      	mov	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	6a3a      	ldr	r2, [r7, #32]
 8005a62:	492d      	ldr	r1, [pc, #180]	@ (8005b18 <I2C_RequestMemoryWrite+0x128>)
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 fa63 	bl	8005f30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e04c      	b.n	8005b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a8c:	6a39      	ldr	r1, [r7, #32]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 faee 	bl	8006070 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00d      	beq.n	8005ab6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d107      	bne.n	8005ab2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ab0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e02b      	b.n	8005b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d105      	bne.n	8005ac8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005abc:	893b      	ldrh	r3, [r7, #8]
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	611a      	str	r2, [r3, #16]
 8005ac6:	e021      	b.n	8005b0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ac8:	893b      	ldrh	r3, [r7, #8]
 8005aca:	0a1b      	lsrs	r3, r3, #8
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad8:	6a39      	ldr	r1, [r7, #32]
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 fac8 	bl	8006070 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00d      	beq.n	8005b02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d107      	bne.n	8005afe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005afc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e005      	b.n	8005b0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b02:	893b      	ldrh	r3, [r7, #8]
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	00010002 	.word	0x00010002

08005b1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b088      	sub	sp, #32
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	4608      	mov	r0, r1
 8005b26:	4611      	mov	r1, r2
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	817b      	strh	r3, [r7, #10]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	813b      	strh	r3, [r7, #8]
 8005b32:	4613      	mov	r3, r2
 8005b34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f96a 	bl	8005e3c <I2C_WaitOnFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00d      	beq.n	8005b8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b7c:	d103      	bne.n	8005b86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e0aa      	b.n	8005ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b8a:	897b      	ldrh	r3, [r7, #10]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9c:	6a3a      	ldr	r2, [r7, #32]
 8005b9e:	4952      	ldr	r1, [pc, #328]	@ (8005ce8 <I2C_RequestMemoryRead+0x1cc>)
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f9c5 	bl	8005f30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e097      	b.n	8005ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bc8:	6a39      	ldr	r1, [r7, #32]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 fa50 	bl	8006070 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00d      	beq.n	8005bf2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d107      	bne.n	8005bee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e076      	b.n	8005ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bf2:	88fb      	ldrh	r3, [r7, #6]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d105      	bne.n	8005c04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bf8:	893b      	ldrh	r3, [r7, #8]
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	611a      	str	r2, [r3, #16]
 8005c02:	e021      	b.n	8005c48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c04:	893b      	ldrh	r3, [r7, #8]
 8005c06:	0a1b      	lsrs	r3, r3, #8
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c14:	6a39      	ldr	r1, [r7, #32]
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 fa2a 	bl	8006070 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00d      	beq.n	8005c3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d107      	bne.n	8005c3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e050      	b.n	8005ce0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c3e:	893b      	ldrh	r3, [r7, #8]
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c4a:	6a39      	ldr	r1, [r7, #32]
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 fa0f 	bl	8006070 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00d      	beq.n	8005c74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d107      	bne.n	8005c70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e035      	b.n	8005ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f8d3 	bl	8005e3c <I2C_WaitOnFlagUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00d      	beq.n	8005cb8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005caa:	d103      	bne.n	8005cb4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cb2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e013      	b.n	8005ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cb8:	897b      	ldrh	r3, [r7, #10]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	f043 0301 	orr.w	r3, r3, #1
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cca:	6a3a      	ldr	r2, [r7, #32]
 8005ccc:	4906      	ldr	r1, [pc, #24]	@ (8005ce8 <I2C_RequestMemoryRead+0x1cc>)
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 f92e 	bl	8005f30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	00010002 	.word	0x00010002

08005cec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d04:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d06:	4b4b      	ldr	r3, [pc, #300]	@ (8005e34 <I2C_DMAAbort+0x148>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	08db      	lsrs	r3, r3, #3
 8005d0c:	4a4a      	ldr	r2, [pc, #296]	@ (8005e38 <I2C_DMAAbort+0x14c>)
 8005d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d12:	0a1a      	lsrs	r2, r3, #8
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	00da      	lsls	r2, r3, #3
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2a:	f043 0220 	orr.w	r2, r3, #32
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005d32:	e00a      	b.n	8005d4a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d48:	d0ea      	beq.n	8005d20 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d56:	2200      	movs	r2, #0
 8005d58:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d66:	2200      	movs	r2, #0
 8005d68:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d78:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0201 	bic.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b60      	cmp	r3, #96	@ 0x60
 8005dba:	d10e      	bne.n	8005dda <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005dd2:	6978      	ldr	r0, [r7, #20]
 8005dd4:	f7fe fc7e 	bl	80046d4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005dd8:	e027      	b.n	8005e2a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005dda:	7cfb      	ldrb	r3, [r7, #19]
 8005ddc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005de0:	2b28      	cmp	r3, #40	@ 0x28
 8005de2:	d117      	bne.n	8005e14 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e02:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2200      	movs	r2, #0
 8005e08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2228      	movs	r2, #40	@ 0x28
 8005e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005e12:	e007      	b.n	8005e24 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005e24:	6978      	ldr	r0, [r7, #20]
 8005e26:	f7fe fc4b 	bl	80046c0 <HAL_I2C_ErrorCallback>
}
 8005e2a:	bf00      	nop
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000204 	.word	0x20000204
 8005e38:	14f8b589 	.word	0x14f8b589

08005e3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e4c:	e048      	b.n	8005ee0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e54:	d044      	beq.n	8005ee0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e56:	f7fc faa1 	bl	800239c <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d302      	bcc.n	8005e6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d139      	bne.n	8005ee0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	0c1b      	lsrs	r3, r3, #16
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d10d      	bne.n	8005e92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	43da      	mvns	r2, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	4013      	ands	r3, r2
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	bf0c      	ite	eq
 8005e88:	2301      	moveq	r3, #1
 8005e8a:	2300      	movne	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	461a      	mov	r2, r3
 8005e90:	e00c      	b.n	8005eac <I2C_WaitOnFlagUntilTimeout+0x70>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	43da      	mvns	r2, r3
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	bf0c      	ite	eq
 8005ea4:	2301      	moveq	r3, #1
 8005ea6:	2300      	movne	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	461a      	mov	r2, r3
 8005eac:	79fb      	ldrb	r3, [r7, #7]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d116      	bne.n	8005ee0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ecc:	f043 0220 	orr.w	r2, r3, #32
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e023      	b.n	8005f28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	0c1b      	lsrs	r3, r3, #16
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d10d      	bne.n	8005f06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	43da      	mvns	r2, r3
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	bf0c      	ite	eq
 8005efc:	2301      	moveq	r3, #1
 8005efe:	2300      	movne	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	461a      	mov	r2, r3
 8005f04:	e00c      	b.n	8005f20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	43da      	mvns	r2, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4013      	ands	r3, r2
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bf0c      	ite	eq
 8005f18:	2301      	moveq	r3, #1
 8005f1a:	2300      	movne	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	461a      	mov	r2, r3
 8005f20:	79fb      	ldrb	r3, [r7, #7]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d093      	beq.n	8005e4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
 8005f3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f3e:	e071      	b.n	8006024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f4e:	d123      	bne.n	8005f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f84:	f043 0204 	orr.w	r2, r3, #4
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e067      	b.n	8006068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9e:	d041      	beq.n	8006024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa0:	f7fc f9fc 	bl	800239c <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d302      	bcc.n	8005fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d136      	bne.n	8006024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	0c1b      	lsrs	r3, r3, #16
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d10c      	bne.n	8005fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	43da      	mvns	r2, r3
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	bf14      	ite	ne
 8005fd2:	2301      	movne	r3, #1
 8005fd4:	2300      	moveq	r3, #0
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	e00b      	b.n	8005ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	43da      	mvns	r2, r3
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	bf14      	ite	ne
 8005fec:	2301      	movne	r3, #1
 8005fee:	2300      	moveq	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d016      	beq.n	8006024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006010:	f043 0220 	orr.w	r2, r3, #32
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e021      	b.n	8006068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	0c1b      	lsrs	r3, r3, #16
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b01      	cmp	r3, #1
 800602c:	d10c      	bne.n	8006048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	43da      	mvns	r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	4013      	ands	r3, r2
 800603a:	b29b      	uxth	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	bf14      	ite	ne
 8006040:	2301      	movne	r3, #1
 8006042:	2300      	moveq	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	e00b      	b.n	8006060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	43da      	mvns	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4013      	ands	r3, r2
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	bf14      	ite	ne
 800605a:	2301      	movne	r3, #1
 800605c:	2300      	moveq	r3, #0
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	f47f af6d 	bne.w	8005f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800607c:	e034      	b.n	80060e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 f915 	bl	80062ae <I2C_IsAcknowledgeFailed>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e034      	b.n	80060f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006094:	d028      	beq.n	80060e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006096:	f7fc f981 	bl	800239c <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d302      	bcc.n	80060ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d11d      	bne.n	80060e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060b6:	2b80      	cmp	r3, #128	@ 0x80
 80060b8:	d016      	beq.n	80060e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d4:	f043 0220 	orr.w	r2, r3, #32
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e007      	b.n	80060f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060f2:	2b80      	cmp	r3, #128	@ 0x80
 80060f4:	d1c3      	bne.n	800607e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800610c:	e034      	b.n	8006178 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 f8cd 	bl	80062ae <I2C_IsAcknowledgeFailed>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e034      	b.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006124:	d028      	beq.n	8006178 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006126:	f7fc f939 	bl	800239c <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	429a      	cmp	r2, r3
 8006134:	d302      	bcc.n	800613c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d11d      	bne.n	8006178 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b04      	cmp	r3, #4
 8006148:	d016      	beq.n	8006178 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2220      	movs	r2, #32
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006164:	f043 0220 	orr.w	r2, r3, #32
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e007      	b.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	2b04      	cmp	r3, #4
 8006184:	d1c3      	bne.n	800610e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800619c:	4b13      	ldr	r3, [pc, #76]	@ (80061ec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	08db      	lsrs	r3, r3, #3
 80061a2:	4a13      	ldr	r2, [pc, #76]	@ (80061f0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80061a4:	fba2 2303 	umull	r2, r3, r2, r3
 80061a8:	0a1a      	lsrs	r2, r3, #8
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d107      	bne.n	80061ce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c2:	f043 0220 	orr.w	r2, r3, #32
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e008      	b.n	80061e0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061dc:	d0e9      	beq.n	80061b2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	20000204 	.word	0x20000204
 80061f0:	14f8b589 	.word	0x14f8b589

080061f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006200:	e049      	b.n	8006296 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	f003 0310 	and.w	r3, r3, #16
 800620c:	2b10      	cmp	r3, #16
 800620e:	d119      	bne.n	8006244 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0210 	mvn.w	r2, #16
 8006218:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e030      	b.n	80062a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006244:	f7fc f8aa 	bl	800239c <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	429a      	cmp	r2, r3
 8006252:	d302      	bcc.n	800625a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d11d      	bne.n	8006296 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006264:	2b40      	cmp	r3, #64	@ 0x40
 8006266:	d016      	beq.n	8006296 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2220      	movs	r2, #32
 8006272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006282:	f043 0220 	orr.w	r2, r3, #32
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e007      	b.n	80062a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a0:	2b40      	cmp	r3, #64	@ 0x40
 80062a2:	d1ae      	bne.n	8006202 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062c4:	d11b      	bne.n	80062fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80062ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ea:	f043 0204 	orr.w	r2, r3, #4
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e000      	b.n	8006300 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006318:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800631c:	d103      	bne.n	8006326 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006324:	e007      	b.n	8006336 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800632e:	d102      	bne.n	8006336 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2208      	movs	r2, #8
 8006334:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
	...

08006344 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e267      	b.n	8006826 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d075      	beq.n	800644e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006362:	4b88      	ldr	r3, [pc, #544]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 030c 	and.w	r3, r3, #12
 800636a:	2b04      	cmp	r3, #4
 800636c:	d00c      	beq.n	8006388 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800636e:	4b85      	ldr	r3, [pc, #532]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006376:	2b08      	cmp	r3, #8
 8006378:	d112      	bne.n	80063a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800637a:	4b82      	ldr	r3, [pc, #520]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006382:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006386:	d10b      	bne.n	80063a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006388:	4b7e      	ldr	r3, [pc, #504]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d05b      	beq.n	800644c <HAL_RCC_OscConfig+0x108>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d157      	bne.n	800644c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e242      	b.n	8006826 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063a8:	d106      	bne.n	80063b8 <HAL_RCC_OscConfig+0x74>
 80063aa:	4b76      	ldr	r3, [pc, #472]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a75      	ldr	r2, [pc, #468]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 80063b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	e01d      	b.n	80063f4 <HAL_RCC_OscConfig+0xb0>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063c0:	d10c      	bne.n	80063dc <HAL_RCC_OscConfig+0x98>
 80063c2:	4b70      	ldr	r3, [pc, #448]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a6f      	ldr	r2, [pc, #444]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 80063c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	4b6d      	ldr	r3, [pc, #436]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a6c      	ldr	r2, [pc, #432]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 80063d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	e00b      	b.n	80063f4 <HAL_RCC_OscConfig+0xb0>
 80063dc:	4b69      	ldr	r3, [pc, #420]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a68      	ldr	r2, [pc, #416]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 80063e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	4b66      	ldr	r3, [pc, #408]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a65      	ldr	r2, [pc, #404]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 80063ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d013      	beq.n	8006424 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063fc:	f7fb ffce 	bl	800239c <HAL_GetTick>
 8006400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006404:	f7fb ffca 	bl	800239c <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b64      	cmp	r3, #100	@ 0x64
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e207      	b.n	8006826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006416:	4b5b      	ldr	r3, [pc, #364]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0f0      	beq.n	8006404 <HAL_RCC_OscConfig+0xc0>
 8006422:	e014      	b.n	800644e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006424:	f7fb ffba 	bl	800239c <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800642c:	f7fb ffb6 	bl	800239c <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b64      	cmp	r3, #100	@ 0x64
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e1f3      	b.n	8006826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800643e:	4b51      	ldr	r3, [pc, #324]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1f0      	bne.n	800642c <HAL_RCC_OscConfig+0xe8>
 800644a:	e000      	b.n	800644e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800644c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d063      	beq.n	8006522 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800645a:	4b4a      	ldr	r3, [pc, #296]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 030c 	and.w	r3, r3, #12
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00b      	beq.n	800647e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006466:	4b47      	ldr	r3, [pc, #284]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800646e:	2b08      	cmp	r3, #8
 8006470:	d11c      	bne.n	80064ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006472:	4b44      	ldr	r3, [pc, #272]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d116      	bne.n	80064ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800647e:	4b41      	ldr	r3, [pc, #260]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d005      	beq.n	8006496 <HAL_RCC_OscConfig+0x152>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d001      	beq.n	8006496 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e1c7      	b.n	8006826 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006496:	4b3b      	ldr	r3, [pc, #236]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	4937      	ldr	r1, [pc, #220]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064aa:	e03a      	b.n	8006522 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d020      	beq.n	80064f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064b4:	4b34      	ldr	r3, [pc, #208]	@ (8006588 <HAL_RCC_OscConfig+0x244>)
 80064b6:	2201      	movs	r2, #1
 80064b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ba:	f7fb ff6f 	bl	800239c <HAL_GetTick>
 80064be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c0:	e008      	b.n	80064d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064c2:	f7fb ff6b 	bl	800239c <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e1a8      	b.n	8006826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d4:	4b2b      	ldr	r3, [pc, #172]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d0f0      	beq.n	80064c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064e0:	4b28      	ldr	r3, [pc, #160]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	4925      	ldr	r1, [pc, #148]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	600b      	str	r3, [r1, #0]
 80064f4:	e015      	b.n	8006522 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064f6:	4b24      	ldr	r3, [pc, #144]	@ (8006588 <HAL_RCC_OscConfig+0x244>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fc:	f7fb ff4e 	bl	800239c <HAL_GetTick>
 8006500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006504:	f7fb ff4a 	bl	800239c <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e187      	b.n	8006826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006516:	4b1b      	ldr	r3, [pc, #108]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1f0      	bne.n	8006504 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b00      	cmp	r3, #0
 800652c:	d036      	beq.n	800659c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d016      	beq.n	8006564 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006536:	4b15      	ldr	r3, [pc, #84]	@ (800658c <HAL_RCC_OscConfig+0x248>)
 8006538:	2201      	movs	r2, #1
 800653a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800653c:	f7fb ff2e 	bl	800239c <HAL_GetTick>
 8006540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006542:	e008      	b.n	8006556 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006544:	f7fb ff2a 	bl	800239c <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e167      	b.n	8006826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006556:	4b0b      	ldr	r3, [pc, #44]	@ (8006584 <HAL_RCC_OscConfig+0x240>)
 8006558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0f0      	beq.n	8006544 <HAL_RCC_OscConfig+0x200>
 8006562:	e01b      	b.n	800659c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006564:	4b09      	ldr	r3, [pc, #36]	@ (800658c <HAL_RCC_OscConfig+0x248>)
 8006566:	2200      	movs	r2, #0
 8006568:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800656a:	f7fb ff17 	bl	800239c <HAL_GetTick>
 800656e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006570:	e00e      	b.n	8006590 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006572:	f7fb ff13 	bl	800239c <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d907      	bls.n	8006590 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e150      	b.n	8006826 <HAL_RCC_OscConfig+0x4e2>
 8006584:	40023800 	.word	0x40023800
 8006588:	42470000 	.word	0x42470000
 800658c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006590:	4b88      	ldr	r3, [pc, #544]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 8006592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1ea      	bne.n	8006572 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0304 	and.w	r3, r3, #4
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 8097 	beq.w	80066d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065ae:	4b81      	ldr	r3, [pc, #516]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 80065b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10f      	bne.n	80065da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]
 80065be:	4b7d      	ldr	r3, [pc, #500]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 80065c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c2:	4a7c      	ldr	r2, [pc, #496]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 80065c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80065ca:	4b7a      	ldr	r3, [pc, #488]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 80065cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065d2:	60bb      	str	r3, [r7, #8]
 80065d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065d6:	2301      	movs	r3, #1
 80065d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065da:	4b77      	ldr	r3, [pc, #476]	@ (80067b8 <HAL_RCC_OscConfig+0x474>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d118      	bne.n	8006618 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065e6:	4b74      	ldr	r3, [pc, #464]	@ (80067b8 <HAL_RCC_OscConfig+0x474>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a73      	ldr	r2, [pc, #460]	@ (80067b8 <HAL_RCC_OscConfig+0x474>)
 80065ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065f2:	f7fb fed3 	bl	800239c <HAL_GetTick>
 80065f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f8:	e008      	b.n	800660c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065fa:	f7fb fecf 	bl	800239c <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d901      	bls.n	800660c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e10c      	b.n	8006826 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660c:	4b6a      	ldr	r3, [pc, #424]	@ (80067b8 <HAL_RCC_OscConfig+0x474>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0f0      	beq.n	80065fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d106      	bne.n	800662e <HAL_RCC_OscConfig+0x2ea>
 8006620:	4b64      	ldr	r3, [pc, #400]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 8006622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006624:	4a63      	ldr	r2, [pc, #396]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	6713      	str	r3, [r2, #112]	@ 0x70
 800662c:	e01c      	b.n	8006668 <HAL_RCC_OscConfig+0x324>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	2b05      	cmp	r3, #5
 8006634:	d10c      	bne.n	8006650 <HAL_RCC_OscConfig+0x30c>
 8006636:	4b5f      	ldr	r3, [pc, #380]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 8006638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800663a:	4a5e      	ldr	r2, [pc, #376]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 800663c:	f043 0304 	orr.w	r3, r3, #4
 8006640:	6713      	str	r3, [r2, #112]	@ 0x70
 8006642:	4b5c      	ldr	r3, [pc, #368]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 8006644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006646:	4a5b      	ldr	r2, [pc, #364]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 8006648:	f043 0301 	orr.w	r3, r3, #1
 800664c:	6713      	str	r3, [r2, #112]	@ 0x70
 800664e:	e00b      	b.n	8006668 <HAL_RCC_OscConfig+0x324>
 8006650:	4b58      	ldr	r3, [pc, #352]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 8006652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006654:	4a57      	ldr	r2, [pc, #348]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 8006656:	f023 0301 	bic.w	r3, r3, #1
 800665a:	6713      	str	r3, [r2, #112]	@ 0x70
 800665c:	4b55      	ldr	r3, [pc, #340]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 800665e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006660:	4a54      	ldr	r2, [pc, #336]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 8006662:	f023 0304 	bic.w	r3, r3, #4
 8006666:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d015      	beq.n	800669c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006670:	f7fb fe94 	bl	800239c <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006676:	e00a      	b.n	800668e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006678:	f7fb fe90 	bl	800239c <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006686:	4293      	cmp	r3, r2
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e0cb      	b.n	8006826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800668e:	4b49      	ldr	r3, [pc, #292]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 8006690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0ee      	beq.n	8006678 <HAL_RCC_OscConfig+0x334>
 800669a:	e014      	b.n	80066c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800669c:	f7fb fe7e 	bl	800239c <HAL_GetTick>
 80066a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066a2:	e00a      	b.n	80066ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066a4:	f7fb fe7a 	bl	800239c <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e0b5      	b.n	8006826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ba:	4b3e      	ldr	r3, [pc, #248]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 80066bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1ee      	bne.n	80066a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d105      	bne.n	80066d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066cc:	4b39      	ldr	r3, [pc, #228]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 80066ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d0:	4a38      	ldr	r2, [pc, #224]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 80066d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 80a1 	beq.w	8006824 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066e2:	4b34      	ldr	r3, [pc, #208]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 030c 	and.w	r3, r3, #12
 80066ea:	2b08      	cmp	r3, #8
 80066ec:	d05c      	beq.n	80067a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d141      	bne.n	800677a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f6:	4b31      	ldr	r3, [pc, #196]	@ (80067bc <HAL_RCC_OscConfig+0x478>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066fc:	f7fb fe4e 	bl	800239c <HAL_GetTick>
 8006700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006702:	e008      	b.n	8006716 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006704:	f7fb fe4a 	bl	800239c <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d901      	bls.n	8006716 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e087      	b.n	8006826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006716:	4b27      	ldr	r3, [pc, #156]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1f0      	bne.n	8006704 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	69da      	ldr	r2, [r3, #28]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006730:	019b      	lsls	r3, r3, #6
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006738:	085b      	lsrs	r3, r3, #1
 800673a:	3b01      	subs	r3, #1
 800673c:	041b      	lsls	r3, r3, #16
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006744:	061b      	lsls	r3, r3, #24
 8006746:	491b      	ldr	r1, [pc, #108]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 8006748:	4313      	orrs	r3, r2
 800674a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800674c:	4b1b      	ldr	r3, [pc, #108]	@ (80067bc <HAL_RCC_OscConfig+0x478>)
 800674e:	2201      	movs	r2, #1
 8006750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006752:	f7fb fe23 	bl	800239c <HAL_GetTick>
 8006756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006758:	e008      	b.n	800676c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800675a:	f7fb fe1f 	bl	800239c <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	2b02      	cmp	r3, #2
 8006766:	d901      	bls.n	800676c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e05c      	b.n	8006826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800676c:	4b11      	ldr	r3, [pc, #68]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d0f0      	beq.n	800675a <HAL_RCC_OscConfig+0x416>
 8006778:	e054      	b.n	8006824 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800677a:	4b10      	ldr	r3, [pc, #64]	@ (80067bc <HAL_RCC_OscConfig+0x478>)
 800677c:	2200      	movs	r2, #0
 800677e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006780:	f7fb fe0c 	bl	800239c <HAL_GetTick>
 8006784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006788:	f7fb fe08 	bl	800239c <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e045      	b.n	8006826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800679a:	4b06      	ldr	r3, [pc, #24]	@ (80067b4 <HAL_RCC_OscConfig+0x470>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1f0      	bne.n	8006788 <HAL_RCC_OscConfig+0x444>
 80067a6:	e03d      	b.n	8006824 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d107      	bne.n	80067c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e038      	b.n	8006826 <HAL_RCC_OscConfig+0x4e2>
 80067b4:	40023800 	.word	0x40023800
 80067b8:	40007000 	.word	0x40007000
 80067bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006830 <HAL_RCC_OscConfig+0x4ec>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d028      	beq.n	8006820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067d8:	429a      	cmp	r2, r3
 80067da:	d121      	bne.n	8006820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d11a      	bne.n	8006820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80067f0:	4013      	ands	r3, r2
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d111      	bne.n	8006820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006806:	085b      	lsrs	r3, r3, #1
 8006808:	3b01      	subs	r3, #1
 800680a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800680c:	429a      	cmp	r2, r3
 800680e:	d107      	bne.n	8006820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800681c:	429a      	cmp	r2, r3
 800681e:	d001      	beq.n	8006824 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e000      	b.n	8006826 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	40023800 	.word	0x40023800

08006834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e0cc      	b.n	80069e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006848:	4b68      	ldr	r3, [pc, #416]	@ (80069ec <HAL_RCC_ClockConfig+0x1b8>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d90c      	bls.n	8006870 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006856:	4b65      	ldr	r3, [pc, #404]	@ (80069ec <HAL_RCC_ClockConfig+0x1b8>)
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800685e:	4b63      	ldr	r3, [pc, #396]	@ (80069ec <HAL_RCC_ClockConfig+0x1b8>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	429a      	cmp	r2, r3
 800686a:	d001      	beq.n	8006870 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e0b8      	b.n	80069e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d020      	beq.n	80068be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b00      	cmp	r3, #0
 8006886:	d005      	beq.n	8006894 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006888:	4b59      	ldr	r3, [pc, #356]	@ (80069f0 <HAL_RCC_ClockConfig+0x1bc>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	4a58      	ldr	r2, [pc, #352]	@ (80069f0 <HAL_RCC_ClockConfig+0x1bc>)
 800688e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006892:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0308 	and.w	r3, r3, #8
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068a0:	4b53      	ldr	r3, [pc, #332]	@ (80069f0 <HAL_RCC_ClockConfig+0x1bc>)
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	4a52      	ldr	r2, [pc, #328]	@ (80069f0 <HAL_RCC_ClockConfig+0x1bc>)
 80068a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80068aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068ac:	4b50      	ldr	r3, [pc, #320]	@ (80069f0 <HAL_RCC_ClockConfig+0x1bc>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	494d      	ldr	r1, [pc, #308]	@ (80069f0 <HAL_RCC_ClockConfig+0x1bc>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d044      	beq.n	8006954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d107      	bne.n	80068e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068d2:	4b47      	ldr	r3, [pc, #284]	@ (80069f0 <HAL_RCC_ClockConfig+0x1bc>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d119      	bne.n	8006912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e07f      	b.n	80069e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d003      	beq.n	80068f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d107      	bne.n	8006902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068f2:	4b3f      	ldr	r3, [pc, #252]	@ (80069f0 <HAL_RCC_ClockConfig+0x1bc>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d109      	bne.n	8006912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e06f      	b.n	80069e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006902:	4b3b      	ldr	r3, [pc, #236]	@ (80069f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e067      	b.n	80069e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006912:	4b37      	ldr	r3, [pc, #220]	@ (80069f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f023 0203 	bic.w	r2, r3, #3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	4934      	ldr	r1, [pc, #208]	@ (80069f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006920:	4313      	orrs	r3, r2
 8006922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006924:	f7fb fd3a 	bl	800239c <HAL_GetTick>
 8006928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800692a:	e00a      	b.n	8006942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800692c:	f7fb fd36 	bl	800239c <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800693a:	4293      	cmp	r3, r2
 800693c:	d901      	bls.n	8006942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e04f      	b.n	80069e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006942:	4b2b      	ldr	r3, [pc, #172]	@ (80069f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f003 020c 	and.w	r2, r3, #12
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	429a      	cmp	r2, r3
 8006952:	d1eb      	bne.n	800692c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006954:	4b25      	ldr	r3, [pc, #148]	@ (80069ec <HAL_RCC_ClockConfig+0x1b8>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0307 	and.w	r3, r3, #7
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d20c      	bcs.n	800697c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006962:	4b22      	ldr	r3, [pc, #136]	@ (80069ec <HAL_RCC_ClockConfig+0x1b8>)
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	b2d2      	uxtb	r2, r2
 8006968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800696a:	4b20      	ldr	r3, [pc, #128]	@ (80069ec <HAL_RCC_ClockConfig+0x1b8>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0307 	and.w	r3, r3, #7
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	429a      	cmp	r2, r3
 8006976:	d001      	beq.n	800697c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e032      	b.n	80069e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d008      	beq.n	800699a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006988:	4b19      	ldr	r3, [pc, #100]	@ (80069f0 <HAL_RCC_ClockConfig+0x1bc>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	4916      	ldr	r1, [pc, #88]	@ (80069f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006996:	4313      	orrs	r3, r2
 8006998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0308 	and.w	r3, r3, #8
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d009      	beq.n	80069ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069a6:	4b12      	ldr	r3, [pc, #72]	@ (80069f0 <HAL_RCC_ClockConfig+0x1bc>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	490e      	ldr	r1, [pc, #56]	@ (80069f0 <HAL_RCC_ClockConfig+0x1bc>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069ba:	f000 f821 	bl	8006a00 <HAL_RCC_GetSysClockFreq>
 80069be:	4602      	mov	r2, r0
 80069c0:	4b0b      	ldr	r3, [pc, #44]	@ (80069f0 <HAL_RCC_ClockConfig+0x1bc>)
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	091b      	lsrs	r3, r3, #4
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	490a      	ldr	r1, [pc, #40]	@ (80069f4 <HAL_RCC_ClockConfig+0x1c0>)
 80069cc:	5ccb      	ldrb	r3, [r1, r3]
 80069ce:	fa22 f303 	lsr.w	r3, r2, r3
 80069d2:	4a09      	ldr	r2, [pc, #36]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c4>)
 80069d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80069d6:	4b09      	ldr	r3, [pc, #36]	@ (80069fc <HAL_RCC_ClockConfig+0x1c8>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fb fc9a 	bl	8002314 <HAL_InitTick>

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	40023c00 	.word	0x40023c00
 80069f0:	40023800 	.word	0x40023800
 80069f4:	0800c664 	.word	0x0800c664
 80069f8:	20000204 	.word	0x20000204
 80069fc:	20000208 	.word	0x20000208

08006a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a04:	b094      	sub	sp, #80	@ 0x50
 8006a06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a10:	2300      	movs	r3, #0
 8006a12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a18:	4b79      	ldr	r3, [pc, #484]	@ (8006c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 030c 	and.w	r3, r3, #12
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d00d      	beq.n	8006a40 <HAL_RCC_GetSysClockFreq+0x40>
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	f200 80e1 	bhi.w	8006bec <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d002      	beq.n	8006a34 <HAL_RCC_GetSysClockFreq+0x34>
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d003      	beq.n	8006a3a <HAL_RCC_GetSysClockFreq+0x3a>
 8006a32:	e0db      	b.n	8006bec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a34:	4b73      	ldr	r3, [pc, #460]	@ (8006c04 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a36:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006a38:	e0db      	b.n	8006bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a3a:	4b73      	ldr	r3, [pc, #460]	@ (8006c08 <HAL_RCC_GetSysClockFreq+0x208>)
 8006a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a3e:	e0d8      	b.n	8006bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a40:	4b6f      	ldr	r3, [pc, #444]	@ (8006c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a48:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a4a:	4b6d      	ldr	r3, [pc, #436]	@ (8006c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d063      	beq.n	8006b1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a56:	4b6a      	ldr	r3, [pc, #424]	@ (8006c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	099b      	lsrs	r3, r3, #6
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a68:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006a72:	4622      	mov	r2, r4
 8006a74:	462b      	mov	r3, r5
 8006a76:	f04f 0000 	mov.w	r0, #0
 8006a7a:	f04f 0100 	mov.w	r1, #0
 8006a7e:	0159      	lsls	r1, r3, #5
 8006a80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a84:	0150      	lsls	r0, r2, #5
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	1a51      	subs	r1, r2, r1
 8006a8e:	6139      	str	r1, [r7, #16]
 8006a90:	4629      	mov	r1, r5
 8006a92:	eb63 0301 	sbc.w	r3, r3, r1
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	f04f 0200 	mov.w	r2, #0
 8006a9c:	f04f 0300 	mov.w	r3, #0
 8006aa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006aa4:	4659      	mov	r1, fp
 8006aa6:	018b      	lsls	r3, r1, #6
 8006aa8:	4651      	mov	r1, sl
 8006aaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006aae:	4651      	mov	r1, sl
 8006ab0:	018a      	lsls	r2, r1, #6
 8006ab2:	4651      	mov	r1, sl
 8006ab4:	ebb2 0801 	subs.w	r8, r2, r1
 8006ab8:	4659      	mov	r1, fp
 8006aba:	eb63 0901 	sbc.w	r9, r3, r1
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	f04f 0300 	mov.w	r3, #0
 8006ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ad2:	4690      	mov	r8, r2
 8006ad4:	4699      	mov	r9, r3
 8006ad6:	4623      	mov	r3, r4
 8006ad8:	eb18 0303 	adds.w	r3, r8, r3
 8006adc:	60bb      	str	r3, [r7, #8]
 8006ade:	462b      	mov	r3, r5
 8006ae0:	eb49 0303 	adc.w	r3, r9, r3
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	f04f 0200 	mov.w	r2, #0
 8006aea:	f04f 0300 	mov.w	r3, #0
 8006aee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006af2:	4629      	mov	r1, r5
 8006af4:	024b      	lsls	r3, r1, #9
 8006af6:	4621      	mov	r1, r4
 8006af8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006afc:	4621      	mov	r1, r4
 8006afe:	024a      	lsls	r2, r1, #9
 8006b00:	4610      	mov	r0, r2
 8006b02:	4619      	mov	r1, r3
 8006b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b06:	2200      	movs	r2, #0
 8006b08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b10:	f7f9 ff80 	bl	8000a14 <__aeabi_uldivmod>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4613      	mov	r3, r2
 8006b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b1c:	e058      	b.n	8006bd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b1e:	4b38      	ldr	r3, [pc, #224]	@ (8006c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	099b      	lsrs	r3, r3, #6
 8006b24:	2200      	movs	r2, #0
 8006b26:	4618      	mov	r0, r3
 8006b28:	4611      	mov	r1, r2
 8006b2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b2e:	623b      	str	r3, [r7, #32]
 8006b30:	2300      	movs	r3, #0
 8006b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b38:	4642      	mov	r2, r8
 8006b3a:	464b      	mov	r3, r9
 8006b3c:	f04f 0000 	mov.w	r0, #0
 8006b40:	f04f 0100 	mov.w	r1, #0
 8006b44:	0159      	lsls	r1, r3, #5
 8006b46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b4a:	0150      	lsls	r0, r2, #5
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4641      	mov	r1, r8
 8006b52:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b56:	4649      	mov	r1, r9
 8006b58:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b5c:	f04f 0200 	mov.w	r2, #0
 8006b60:	f04f 0300 	mov.w	r3, #0
 8006b64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b70:	ebb2 040a 	subs.w	r4, r2, sl
 8006b74:	eb63 050b 	sbc.w	r5, r3, fp
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	f04f 0300 	mov.w	r3, #0
 8006b80:	00eb      	lsls	r3, r5, #3
 8006b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b86:	00e2      	lsls	r2, r4, #3
 8006b88:	4614      	mov	r4, r2
 8006b8a:	461d      	mov	r5, r3
 8006b8c:	4643      	mov	r3, r8
 8006b8e:	18e3      	adds	r3, r4, r3
 8006b90:	603b      	str	r3, [r7, #0]
 8006b92:	464b      	mov	r3, r9
 8006b94:	eb45 0303 	adc.w	r3, r5, r3
 8006b98:	607b      	str	r3, [r7, #4]
 8006b9a:	f04f 0200 	mov.w	r2, #0
 8006b9e:	f04f 0300 	mov.w	r3, #0
 8006ba2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	028b      	lsls	r3, r1, #10
 8006baa:	4621      	mov	r1, r4
 8006bac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	028a      	lsls	r2, r1, #10
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bba:	2200      	movs	r2, #0
 8006bbc:	61bb      	str	r3, [r7, #24]
 8006bbe:	61fa      	str	r2, [r7, #28]
 8006bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bc4:	f7f9 ff26 	bl	8000a14 <__aeabi_uldivmod>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4613      	mov	r3, r2
 8006bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	0c1b      	lsrs	r3, r3, #16
 8006bd6:	f003 0303 	and.w	r3, r3, #3
 8006bda:	3301      	adds	r3, #1
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006be0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006be2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006bea:	e002      	b.n	8006bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bec:	4b05      	ldr	r3, [pc, #20]	@ (8006c04 <HAL_RCC_GetSysClockFreq+0x204>)
 8006bee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3750      	adds	r7, #80	@ 0x50
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bfe:	bf00      	nop
 8006c00:	40023800 	.word	0x40023800
 8006c04:	00f42400 	.word	0x00f42400
 8006c08:	007a1200 	.word	0x007a1200

08006c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c10:	4b03      	ldr	r3, [pc, #12]	@ (8006c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c12:	681b      	ldr	r3, [r3, #0]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	20000204 	.word	0x20000204

08006c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c28:	f7ff fff0 	bl	8006c0c <HAL_RCC_GetHCLKFreq>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	4b05      	ldr	r3, [pc, #20]	@ (8006c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	0a9b      	lsrs	r3, r3, #10
 8006c34:	f003 0307 	and.w	r3, r3, #7
 8006c38:	4903      	ldr	r1, [pc, #12]	@ (8006c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c3a:	5ccb      	ldrb	r3, [r1, r3]
 8006c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	40023800 	.word	0x40023800
 8006c48:	0800c674 	.word	0x0800c674

08006c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c50:	f7ff ffdc 	bl	8006c0c <HAL_RCC_GetHCLKFreq>
 8006c54:	4602      	mov	r2, r0
 8006c56:	4b05      	ldr	r3, [pc, #20]	@ (8006c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	0b5b      	lsrs	r3, r3, #13
 8006c5c:	f003 0307 	and.w	r3, r3, #7
 8006c60:	4903      	ldr	r1, [pc, #12]	@ (8006c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c62:	5ccb      	ldrb	r3, [r1, r3]
 8006c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	40023800 	.word	0x40023800
 8006c70:	0800c674 	.word	0x0800c674

08006c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e04c      	b.n	8006d20 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d111      	bne.n	8006cb6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 f8e0 	bl	8007e60 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d102      	bne.n	8006cae <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a1f      	ldr	r2, [pc, #124]	@ (8006d28 <HAL_TIM_Base_Init+0xb4>)
 8006cac:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2202      	movs	r2, #2
 8006cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4610      	mov	r0, r2
 8006cca:	f000 fdf1 	bl	80078b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	08001e35 	.word	0x08001e35

08006d2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d001      	beq.n	8006d44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e03c      	b.n	8006dbe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a1e      	ldr	r2, [pc, #120]	@ (8006dcc <HAL_TIM_Base_Start+0xa0>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d018      	beq.n	8006d88 <HAL_TIM_Base_Start+0x5c>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d5e:	d013      	beq.n	8006d88 <HAL_TIM_Base_Start+0x5c>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a1a      	ldr	r2, [pc, #104]	@ (8006dd0 <HAL_TIM_Base_Start+0xa4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d00e      	beq.n	8006d88 <HAL_TIM_Base_Start+0x5c>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a19      	ldr	r2, [pc, #100]	@ (8006dd4 <HAL_TIM_Base_Start+0xa8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d009      	beq.n	8006d88 <HAL_TIM_Base_Start+0x5c>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a17      	ldr	r2, [pc, #92]	@ (8006dd8 <HAL_TIM_Base_Start+0xac>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d004      	beq.n	8006d88 <HAL_TIM_Base_Start+0x5c>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a16      	ldr	r2, [pc, #88]	@ (8006ddc <HAL_TIM_Base_Start+0xb0>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d111      	bne.n	8006dac <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f003 0307 	and.w	r3, r3, #7
 8006d92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b06      	cmp	r3, #6
 8006d98:	d010      	beq.n	8006dbc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f042 0201 	orr.w	r2, r2, #1
 8006da8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006daa:	e007      	b.n	8006dbc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f042 0201 	orr.w	r2, r2, #1
 8006dba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	40010000 	.word	0x40010000
 8006dd0:	40000400 	.word	0x40000400
 8006dd4:	40000800 	.word	0x40000800
 8006dd8:	40000c00 	.word	0x40000c00
 8006ddc:	40014000 	.word	0x40014000

08006de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d001      	beq.n	8006df8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e044      	b.n	8006e82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0201 	orr.w	r2, r2, #1
 8006e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a1e      	ldr	r2, [pc, #120]	@ (8006e90 <HAL_TIM_Base_Start_IT+0xb0>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d018      	beq.n	8006e4c <HAL_TIM_Base_Start_IT+0x6c>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e22:	d013      	beq.n	8006e4c <HAL_TIM_Base_Start_IT+0x6c>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a1a      	ldr	r2, [pc, #104]	@ (8006e94 <HAL_TIM_Base_Start_IT+0xb4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d00e      	beq.n	8006e4c <HAL_TIM_Base_Start_IT+0x6c>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a19      	ldr	r2, [pc, #100]	@ (8006e98 <HAL_TIM_Base_Start_IT+0xb8>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d009      	beq.n	8006e4c <HAL_TIM_Base_Start_IT+0x6c>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a17      	ldr	r2, [pc, #92]	@ (8006e9c <HAL_TIM_Base_Start_IT+0xbc>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d004      	beq.n	8006e4c <HAL_TIM_Base_Start_IT+0x6c>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a16      	ldr	r2, [pc, #88]	@ (8006ea0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d111      	bne.n	8006e70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b06      	cmp	r3, #6
 8006e5c:	d010      	beq.n	8006e80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f042 0201 	orr.w	r2, r2, #1
 8006e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e6e:	e007      	b.n	8006e80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0201 	orr.w	r2, r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	40010000 	.word	0x40010000
 8006e94:	40000400 	.word	0x40000400
 8006e98:	40000800 	.word	0x40000800
 8006e9c:	40000c00 	.word	0x40000c00
 8006ea0:	40014000 	.word	0x40014000

08006ea4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e04c      	b.n	8006f50 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d111      	bne.n	8006ee6 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 ffc8 	bl	8007e60 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d102      	bne.n	8006ede <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a1f      	ldr	r2, [pc, #124]	@ (8006f58 <HAL_TIM_OC_Init+0xb4>)
 8006edc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2202      	movs	r2, #2
 8006eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4610      	mov	r0, r2
 8006efa:	f000 fcd9 	bl	80078b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	08006f5d 	.word	0x08006f5d

08006f5c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e04c      	b.n	800701e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d111      	bne.n	8006fb4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 ff61 	bl	8007e60 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d102      	bne.n	8006fac <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8007028 <HAL_TIM_OnePulse_Init+0xb8>)
 8006faa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	f000 fc72 	bl	80078b0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0208 	bic.w	r2, r2, #8
 8006fda:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6819      	ldr	r1, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	0800702d 	.word	0x0800702d

0800702c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007050:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007058:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007060:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007068:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d108      	bne.n	8007082 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d105      	bne.n	8007082 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007076:	7b7b      	ldrb	r3, [r7, #13]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d102      	bne.n	8007082 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800707c:	7b3b      	ldrb	r3, [r7, #12]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d001      	beq.n	8007086 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e03b      	b.n	80070fe <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2202      	movs	r2, #2
 800708a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2202      	movs	r2, #2
 8007092:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2202      	movs	r2, #2
 800709a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2202      	movs	r2, #2
 80070a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68da      	ldr	r2, [r3, #12]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f042 0202 	orr.w	r2, r2, #2
 80070b4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f042 0204 	orr.w	r2, r2, #4
 80070c4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2201      	movs	r2, #1
 80070cc:	2100      	movs	r1, #0
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 fea0 	bl	8007e14 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2201      	movs	r2, #1
 80070da:	2104      	movs	r1, #4
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fe99 	bl	8007e14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a08      	ldr	r2, [pc, #32]	@ (8007108 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d107      	bne.n	80070fc <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	40010000 	.word	0x40010000

0800710c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d026      	beq.n	800717c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d021      	beq.n	800717c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f06f 0202 	mvn.w	r2, #2
 8007140:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	f003 0303 	and.w	r3, r3, #3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	4798      	blx	r3
 8007160:	e009      	b.n	8007176 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f003 0304 	and.w	r3, r3, #4
 8007182:	2b00      	cmp	r3, #0
 8007184:	d026      	beq.n	80071d4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	d021      	beq.n	80071d4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f06f 0204 	mvn.w	r2, #4
 8007198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2202      	movs	r2, #2
 800719e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d005      	beq.n	80071ba <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	4798      	blx	r3
 80071b8:	e009      	b.n	80071ce <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f003 0308 	and.w	r3, r3, #8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d026      	beq.n	800722c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f003 0308 	and.w	r3, r3, #8
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d021      	beq.n	800722c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f06f 0208 	mvn.w	r2, #8
 80071f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2204      	movs	r2, #4
 80071f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	f003 0303 	and.w	r3, r3, #3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d005      	beq.n	8007212 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	4798      	blx	r3
 8007210:	e009      	b.n	8007226 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f003 0310 	and.w	r3, r3, #16
 8007232:	2b00      	cmp	r3, #0
 8007234:	d026      	beq.n	8007284 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f003 0310 	and.w	r3, r3, #16
 800723c:	2b00      	cmp	r3, #0
 800723e:	d021      	beq.n	8007284 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0210 	mvn.w	r2, #16
 8007248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2208      	movs	r2, #8
 800724e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	4798      	blx	r3
 8007268:	e009      	b.n	800727e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00e      	beq.n	80072ac <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	2b00      	cmp	r3, #0
 8007296:	d009      	beq.n	80072ac <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f06f 0201 	mvn.w	r2, #1
 80072a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00e      	beq.n	80072d4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d009      	beq.n	80072d4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80072c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00e      	beq.n	80072fc <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d009      	beq.n	80072fc <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80072f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	f003 0320 	and.w	r3, r3, #32
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00e      	beq.n	8007324 <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f003 0320 	and.w	r3, r3, #32
 800730c:	2b00      	cmp	r3, #0
 800730e:	d009      	beq.n	8007324 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f06f 0220 	mvn.w	r2, #32
 8007318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007324:	bf00      	nop
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007342:	2b01      	cmp	r3, #1
 8007344:	d101      	bne.n	800734a <HAL_TIM_OC_ConfigChannel+0x1e>
 8007346:	2302      	movs	r3, #2
 8007348:	e048      	b.n	80073dc <HAL_TIM_OC_ConfigChannel+0xb0>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b0c      	cmp	r3, #12
 8007356:	d839      	bhi.n	80073cc <HAL_TIM_OC_ConfigChannel+0xa0>
 8007358:	a201      	add	r2, pc, #4	@ (adr r2, 8007360 <HAL_TIM_OC_ConfigChannel+0x34>)
 800735a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735e:	bf00      	nop
 8007360:	08007395 	.word	0x08007395
 8007364:	080073cd 	.word	0x080073cd
 8007368:	080073cd 	.word	0x080073cd
 800736c:	080073cd 	.word	0x080073cd
 8007370:	080073a3 	.word	0x080073a3
 8007374:	080073cd 	.word	0x080073cd
 8007378:	080073cd 	.word	0x080073cd
 800737c:	080073cd 	.word	0x080073cd
 8007380:	080073b1 	.word	0x080073b1
 8007384:	080073cd 	.word	0x080073cd
 8007388:	080073cd 	.word	0x080073cd
 800738c:	080073cd 	.word	0x080073cd
 8007390:	080073bf 	.word	0x080073bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68b9      	ldr	r1, [r7, #8]
 800739a:	4618      	mov	r0, r3
 800739c:	f000 fb14 	bl	80079c8 <TIM_OC1_SetConfig>
      break;
 80073a0:	e017      	b.n	80073d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68b9      	ldr	r1, [r7, #8]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 fb73 	bl	8007a94 <TIM_OC2_SetConfig>
      break;
 80073ae:	e010      	b.n	80073d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fbd8 	bl	8007b6c <TIM_OC3_SetConfig>
      break;
 80073bc:	e009      	b.n	80073d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68b9      	ldr	r1, [r7, #8]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 fc3b 	bl	8007c40 <TIM_OC4_SetConfig>
      break;
 80073ca:	e002      	b.n	80073d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	75fb      	strb	r3, [r7, #23]
      break;
 80073d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073da:	7dfb      	ldrb	r3, [r7, #23]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_TIM_ConfigClockSource+0x1c>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e0b4      	b.n	800756a <HAL_TIM_ConfigClockSource+0x186>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800741e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007426:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007438:	d03e      	beq.n	80074b8 <HAL_TIM_ConfigClockSource+0xd4>
 800743a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800743e:	f200 8087 	bhi.w	8007550 <HAL_TIM_ConfigClockSource+0x16c>
 8007442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007446:	f000 8086 	beq.w	8007556 <HAL_TIM_ConfigClockSource+0x172>
 800744a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800744e:	d87f      	bhi.n	8007550 <HAL_TIM_ConfigClockSource+0x16c>
 8007450:	2b70      	cmp	r3, #112	@ 0x70
 8007452:	d01a      	beq.n	800748a <HAL_TIM_ConfigClockSource+0xa6>
 8007454:	2b70      	cmp	r3, #112	@ 0x70
 8007456:	d87b      	bhi.n	8007550 <HAL_TIM_ConfigClockSource+0x16c>
 8007458:	2b60      	cmp	r3, #96	@ 0x60
 800745a:	d050      	beq.n	80074fe <HAL_TIM_ConfigClockSource+0x11a>
 800745c:	2b60      	cmp	r3, #96	@ 0x60
 800745e:	d877      	bhi.n	8007550 <HAL_TIM_ConfigClockSource+0x16c>
 8007460:	2b50      	cmp	r3, #80	@ 0x50
 8007462:	d03c      	beq.n	80074de <HAL_TIM_ConfigClockSource+0xfa>
 8007464:	2b50      	cmp	r3, #80	@ 0x50
 8007466:	d873      	bhi.n	8007550 <HAL_TIM_ConfigClockSource+0x16c>
 8007468:	2b40      	cmp	r3, #64	@ 0x40
 800746a:	d058      	beq.n	800751e <HAL_TIM_ConfigClockSource+0x13a>
 800746c:	2b40      	cmp	r3, #64	@ 0x40
 800746e:	d86f      	bhi.n	8007550 <HAL_TIM_ConfigClockSource+0x16c>
 8007470:	2b30      	cmp	r3, #48	@ 0x30
 8007472:	d064      	beq.n	800753e <HAL_TIM_ConfigClockSource+0x15a>
 8007474:	2b30      	cmp	r3, #48	@ 0x30
 8007476:	d86b      	bhi.n	8007550 <HAL_TIM_ConfigClockSource+0x16c>
 8007478:	2b20      	cmp	r3, #32
 800747a:	d060      	beq.n	800753e <HAL_TIM_ConfigClockSource+0x15a>
 800747c:	2b20      	cmp	r3, #32
 800747e:	d867      	bhi.n	8007550 <HAL_TIM_ConfigClockSource+0x16c>
 8007480:	2b00      	cmp	r3, #0
 8007482:	d05c      	beq.n	800753e <HAL_TIM_ConfigClockSource+0x15a>
 8007484:	2b10      	cmp	r3, #16
 8007486:	d05a      	beq.n	800753e <HAL_TIM_ConfigClockSource+0x15a>
 8007488:	e062      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800749a:	f000 fc9b 	bl	8007dd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80074ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	609a      	str	r2, [r3, #8]
      break;
 80074b6:	e04f      	b.n	8007558 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074c8:	f000 fc84 	bl	8007dd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689a      	ldr	r2, [r3, #8]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074da:	609a      	str	r2, [r3, #8]
      break;
 80074dc:	e03c      	b.n	8007558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ea:	461a      	mov	r2, r3
 80074ec:	f000 fbf8 	bl	8007ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2150      	movs	r1, #80	@ 0x50
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 fc51 	bl	8007d9e <TIM_ITRx_SetConfig>
      break;
 80074fc:	e02c      	b.n	8007558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800750a:	461a      	mov	r2, r3
 800750c:	f000 fc17 	bl	8007d3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2160      	movs	r1, #96	@ 0x60
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fc41 	bl	8007d9e <TIM_ITRx_SetConfig>
      break;
 800751c:	e01c      	b.n	8007558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800752a:	461a      	mov	r2, r3
 800752c:	f000 fbd8 	bl	8007ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2140      	movs	r1, #64	@ 0x40
 8007536:	4618      	mov	r0, r3
 8007538:	f000 fc31 	bl	8007d9e <TIM_ITRx_SetConfig>
      break;
 800753c:	e00c      	b.n	8007558 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4619      	mov	r1, r3
 8007548:	4610      	mov	r0, r2
 800754a:	f000 fc28 	bl	8007d9e <TIM_ITRx_SetConfig>
      break;
 800754e:	e003      	b.n	8007558 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	73fb      	strb	r3, [r7, #15]
      break;
 8007554:	e000      	b.n	8007558 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007556:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007568:	7bfb      	ldrb	r3, [r7, #15]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800757a:	bf00      	nop
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007586:	b480      	push	{r7}
 8007588:	b083      	sub	sp, #12
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800758e:	bf00      	nop
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075a2:	bf00      	nop
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b083      	sub	sp, #12
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80075ca:	bf00      	nop
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80075f2:	bf00      	nop
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075fe:	b480      	push	{r7}
 8007600:	b083      	sub	sp, #12
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007606:	bf00      	nop
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800761a:	bf00      	nop
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800762e:	bf00      	nop
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
	...

0800763c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	460b      	mov	r3, r1
 8007646:	607a      	str	r2, [r7, #4]
 8007648:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e125      	b.n	80078a4 <HAL_TIM_RegisterCallback+0x268>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800765e:	b2db      	uxtb	r3, r3
 8007660:	2b01      	cmp	r3, #1
 8007662:	f040 80b9 	bne.w	80077d8 <HAL_TIM_RegisterCallback+0x19c>
  {
    switch (CallbackID)
 8007666:	7afb      	ldrb	r3, [r7, #11]
 8007668:	2b1a      	cmp	r3, #26
 800766a:	f200 80b2 	bhi.w	80077d2 <HAL_TIM_RegisterCallback+0x196>
 800766e:	a201      	add	r2, pc, #4	@ (adr r2, 8007674 <HAL_TIM_RegisterCallback+0x38>)
 8007670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007674:	080076e1 	.word	0x080076e1
 8007678:	080076e9 	.word	0x080076e9
 800767c:	080076f1 	.word	0x080076f1
 8007680:	080076f9 	.word	0x080076f9
 8007684:	08007701 	.word	0x08007701
 8007688:	08007709 	.word	0x08007709
 800768c:	08007711 	.word	0x08007711
 8007690:	08007719 	.word	0x08007719
 8007694:	08007721 	.word	0x08007721
 8007698:	08007729 	.word	0x08007729
 800769c:	08007731 	.word	0x08007731
 80076a0:	08007739 	.word	0x08007739
 80076a4:	08007741 	.word	0x08007741
 80076a8:	08007749 	.word	0x08007749
 80076ac:	08007751 	.word	0x08007751
 80076b0:	0800775b 	.word	0x0800775b
 80076b4:	08007765 	.word	0x08007765
 80076b8:	0800776f 	.word	0x0800776f
 80076bc:	08007779 	.word	0x08007779
 80076c0:	08007783 	.word	0x08007783
 80076c4:	0800778d 	.word	0x0800778d
 80076c8:	08007797 	.word	0x08007797
 80076cc:	080077a1 	.word	0x080077a1
 80076d0:	080077ab 	.word	0x080077ab
 80076d4:	080077b5 	.word	0x080077b5
 80076d8:	080077bf 	.word	0x080077bf
 80076dc:	080077c9 	.word	0x080077c9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 80076e6:	e0dc      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80076ee:	e0d8      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80076f6:	e0d4      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80076fe:	e0d0      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007706:	e0cc      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800770e:	e0c8      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007716:	e0c4      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800771e:	e0c0      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007726:	e0bc      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800772e:	e0b8      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007736:	e0b4      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800773e:	e0b0      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007746:	e0ac      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800774e:	e0a8      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007758:	e0a3      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007762:	e09e      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800776c:	e099      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8007776:	e094      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007780:	e08f      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800778a:	e08a      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007794:	e085      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800779e:	e080      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80077a8:	e07b      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80077b2:	e076      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80077bc:	e071      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80077c6:	e06c      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80077d0:	e067      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	75fb      	strb	r3, [r7, #23]
        break;
 80077d6:	e064      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d15c      	bne.n	800789e <HAL_TIM_RegisterCallback+0x262>
  {
    switch (CallbackID)
 80077e4:	7afb      	ldrb	r3, [r7, #11]
 80077e6:	2b0d      	cmp	r3, #13
 80077e8:	d856      	bhi.n	8007898 <HAL_TIM_RegisterCallback+0x25c>
 80077ea:	a201      	add	r2, pc, #4	@ (adr r2, 80077f0 <HAL_TIM_RegisterCallback+0x1b4>)
 80077ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f0:	08007829 	.word	0x08007829
 80077f4:	08007831 	.word	0x08007831
 80077f8:	08007839 	.word	0x08007839
 80077fc:	08007841 	.word	0x08007841
 8007800:	08007849 	.word	0x08007849
 8007804:	08007851 	.word	0x08007851
 8007808:	08007859 	.word	0x08007859
 800780c:	08007861 	.word	0x08007861
 8007810:	08007869 	.word	0x08007869
 8007814:	08007871 	.word	0x08007871
 8007818:	08007879 	.word	0x08007879
 800781c:	08007881 	.word	0x08007881
 8007820:	08007889 	.word	0x08007889
 8007824:	08007891 	.word	0x08007891
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 800782e:	e038      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007836:	e034      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800783e:	e030      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007846:	e02c      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800784e:	e028      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007856:	e024      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800785e:	e020      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007866:	e01c      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800786e:	e018      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007876:	e014      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800787e:	e010      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007886:	e00c      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800788e:	e008      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007896:	e004      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	75fb      	strb	r3, [r7, #23]
        break;
 800789c:	e001      	b.n	80078a2 <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	371c      	adds	r7, #28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a3a      	ldr	r2, [pc, #232]	@ (80079ac <TIM_Base_SetConfig+0xfc>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d00f      	beq.n	80078e8 <TIM_Base_SetConfig+0x38>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ce:	d00b      	beq.n	80078e8 <TIM_Base_SetConfig+0x38>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a37      	ldr	r2, [pc, #220]	@ (80079b0 <TIM_Base_SetConfig+0x100>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d007      	beq.n	80078e8 <TIM_Base_SetConfig+0x38>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a36      	ldr	r2, [pc, #216]	@ (80079b4 <TIM_Base_SetConfig+0x104>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d003      	beq.n	80078e8 <TIM_Base_SetConfig+0x38>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a35      	ldr	r2, [pc, #212]	@ (80079b8 <TIM_Base_SetConfig+0x108>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d108      	bne.n	80078fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a2b      	ldr	r2, [pc, #172]	@ (80079ac <TIM_Base_SetConfig+0xfc>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d01b      	beq.n	800793a <TIM_Base_SetConfig+0x8a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007908:	d017      	beq.n	800793a <TIM_Base_SetConfig+0x8a>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a28      	ldr	r2, [pc, #160]	@ (80079b0 <TIM_Base_SetConfig+0x100>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d013      	beq.n	800793a <TIM_Base_SetConfig+0x8a>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a27      	ldr	r2, [pc, #156]	@ (80079b4 <TIM_Base_SetConfig+0x104>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d00f      	beq.n	800793a <TIM_Base_SetConfig+0x8a>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a26      	ldr	r2, [pc, #152]	@ (80079b8 <TIM_Base_SetConfig+0x108>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d00b      	beq.n	800793a <TIM_Base_SetConfig+0x8a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a25      	ldr	r2, [pc, #148]	@ (80079bc <TIM_Base_SetConfig+0x10c>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d007      	beq.n	800793a <TIM_Base_SetConfig+0x8a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a24      	ldr	r2, [pc, #144]	@ (80079c0 <TIM_Base_SetConfig+0x110>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d003      	beq.n	800793a <TIM_Base_SetConfig+0x8a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a23      	ldr	r2, [pc, #140]	@ (80079c4 <TIM_Base_SetConfig+0x114>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d108      	bne.n	800794c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	4313      	orrs	r3, r2
 800794a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	4313      	orrs	r3, r2
 8007958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	689a      	ldr	r2, [r3, #8]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a0e      	ldr	r2, [pc, #56]	@ (80079ac <TIM_Base_SetConfig+0xfc>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d103      	bne.n	8007980 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	691a      	ldr	r2, [r3, #16]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	2b01      	cmp	r3, #1
 8007990:	d105      	bne.n	800799e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	f023 0201 	bic.w	r2, r3, #1
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	611a      	str	r2, [r3, #16]
  }
}
 800799e:	bf00      	nop
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	40010000 	.word	0x40010000
 80079b0:	40000400 	.word	0x40000400
 80079b4:	40000800 	.word	0x40000800
 80079b8:	40000c00 	.word	0x40000c00
 80079bc:	40014000 	.word	0x40014000
 80079c0:	40014400 	.word	0x40014400
 80079c4:	40014800 	.word	0x40014800

080079c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	f023 0201 	bic.w	r2, r3, #1
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 0303 	bic.w	r3, r3, #3
 80079fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f023 0302 	bic.w	r3, r3, #2
 8007a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8007a90 <TIM_OC1_SetConfig+0xc8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d10c      	bne.n	8007a3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f023 0308 	bic.w	r3, r3, #8
 8007a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f023 0304 	bic.w	r3, r3, #4
 8007a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a13      	ldr	r2, [pc, #76]	@ (8007a90 <TIM_OC1_SetConfig+0xc8>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d111      	bne.n	8007a6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	621a      	str	r2, [r3, #32]
}
 8007a84:	bf00      	nop
 8007a86:	371c      	adds	r7, #28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	40010000 	.word	0x40010000

08007a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	f023 0210 	bic.w	r2, r3, #16
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	021b      	lsls	r3, r3, #8
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f023 0320 	bic.w	r3, r3, #32
 8007ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a1e      	ldr	r2, [pc, #120]	@ (8007b68 <TIM_OC2_SetConfig+0xd4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d10d      	bne.n	8007b10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	011b      	lsls	r3, r3, #4
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a15      	ldr	r2, [pc, #84]	@ (8007b68 <TIM_OC2_SetConfig+0xd4>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d113      	bne.n	8007b40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	621a      	str	r2, [r3, #32]
}
 8007b5a:	bf00      	nop
 8007b5c:	371c      	adds	r7, #28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	40010000 	.word	0x40010000

08007b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 0303 	bic.w	r3, r3, #3
 8007ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	021b      	lsls	r3, r3, #8
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c3c <TIM_OC3_SetConfig+0xd0>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d10d      	bne.n	8007be6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	021b      	lsls	r3, r3, #8
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a14      	ldr	r2, [pc, #80]	@ (8007c3c <TIM_OC3_SetConfig+0xd0>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d113      	bne.n	8007c16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	621a      	str	r2, [r3, #32]
}
 8007c30:	bf00      	nop
 8007c32:	371c      	adds	r7, #28
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	40010000 	.word	0x40010000

08007c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b087      	sub	sp, #28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	021b      	lsls	r3, r3, #8
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	031b      	lsls	r3, r3, #12
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a10      	ldr	r2, [pc, #64]	@ (8007cdc <TIM_OC4_SetConfig+0x9c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d109      	bne.n	8007cb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	019b      	lsls	r3, r3, #6
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	621a      	str	r2, [r3, #32]
}
 8007cce:	bf00      	nop
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	40010000 	.word	0x40010000

08007ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	f023 0201 	bic.w	r2, r3, #1
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	011b      	lsls	r3, r3, #4
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f023 030a 	bic.w	r3, r3, #10
 8007d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	621a      	str	r2, [r3, #32]
}
 8007d32:	bf00      	nop
 8007d34:	371c      	adds	r7, #28
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b087      	sub	sp, #28
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6a1b      	ldr	r3, [r3, #32]
 8007d54:	f023 0210 	bic.w	r2, r3, #16
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	031b      	lsls	r3, r3, #12
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007d7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	011b      	lsls	r3, r3, #4
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	621a      	str	r2, [r3, #32]
}
 8007d92:	bf00      	nop
 8007d94:	371c      	adds	r7, #28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b085      	sub	sp, #20
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	f043 0307 	orr.w	r3, r3, #7
 8007dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	609a      	str	r2, [r3, #8]
}
 8007dc8:	bf00      	nop
 8007dca:	3714      	adds	r7, #20
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
 8007de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	021a      	lsls	r2, r3, #8
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	431a      	orrs	r2, r3
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	609a      	str	r2, [r3, #8]
}
 8007e08:	bf00      	nop
 8007e0a:	371c      	adds	r7, #28
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b087      	sub	sp, #28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f003 031f 	and.w	r3, r3, #31
 8007e26:	2201      	movs	r2, #1
 8007e28:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6a1a      	ldr	r2, [r3, #32]
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	43db      	mvns	r3, r3
 8007e36:	401a      	ands	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a1a      	ldr	r2, [r3, #32]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f003 031f 	and.w	r3, r3, #31
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	fa01 f303 	lsl.w	r3, r1, r3
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	621a      	str	r2, [r3, #32]
}
 8007e52:	bf00      	nop
 8007e54:	371c      	adds	r7, #28
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
	...

08007e60 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8007edc <TIM_ResetCallback+0x7c>)
 8007e6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a1b      	ldr	r2, [pc, #108]	@ (8007ee0 <TIM_ResetCallback+0x80>)
 8007e74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8007ee4 <TIM_ResetCallback+0x84>)
 8007e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a19      	ldr	r2, [pc, #100]	@ (8007ee8 <TIM_ResetCallback+0x88>)
 8007e84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a18      	ldr	r2, [pc, #96]	@ (8007eec <TIM_ResetCallback+0x8c>)
 8007e8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a17      	ldr	r2, [pc, #92]	@ (8007ef0 <TIM_ResetCallback+0x90>)
 8007e94:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a16      	ldr	r2, [pc, #88]	@ (8007ef4 <TIM_ResetCallback+0x94>)
 8007e9c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a15      	ldr	r2, [pc, #84]	@ (8007ef8 <TIM_ResetCallback+0x98>)
 8007ea4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a14      	ldr	r2, [pc, #80]	@ (8007efc <TIM_ResetCallback+0x9c>)
 8007eac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a13      	ldr	r2, [pc, #76]	@ (8007f00 <TIM_ResetCallback+0xa0>)
 8007eb4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a12      	ldr	r2, [pc, #72]	@ (8007f04 <TIM_ResetCallback+0xa4>)
 8007ebc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a11      	ldr	r2, [pc, #68]	@ (8007f08 <TIM_ResetCallback+0xa8>)
 8007ec4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a10      	ldr	r2, [pc, #64]	@ (8007f0c <TIM_ResetCallback+0xac>)
 8007ecc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	08007573 	.word	0x08007573
 8007ee0:	08007587 	.word	0x08007587
 8007ee4:	080075ff 	.word	0x080075ff
 8007ee8:	08007613 	.word	0x08007613
 8007eec:	080075af 	.word	0x080075af
 8007ef0:	080075c3 	.word	0x080075c3
 8007ef4:	0800759b 	.word	0x0800759b
 8007ef8:	080075d7 	.word	0x080075d7
 8007efc:	080075eb 	.word	0x080075eb
 8007f00:	08007627 	.word	0x08007627
 8007f04:	08007fed 	.word	0x08007fed
 8007f08:	08008001 	.word	0x08008001
 8007f0c:	08008015 	.word	0x08008015

08007f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d101      	bne.n	8007f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f24:	2302      	movs	r3, #2
 8007f26:	e050      	b.n	8007fca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2202      	movs	r2, #2
 8007f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a1c      	ldr	r2, [pc, #112]	@ (8007fd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d018      	beq.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f74:	d013      	beq.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a18      	ldr	r2, [pc, #96]	@ (8007fdc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d00e      	beq.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a16      	ldr	r2, [pc, #88]	@ (8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d009      	beq.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a15      	ldr	r2, [pc, #84]	@ (8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d004      	beq.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a13      	ldr	r2, [pc, #76]	@ (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d10c      	bne.n	8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	40010000 	.word	0x40010000
 8007fdc:	40000400 	.word	0x40000400
 8007fe0:	40000800 	.word	0x40000800
 8007fe4:	40000c00 	.word	0x40000c00
 8007fe8:	40014000 	.word	0x40014000

08007fec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e04d      	b.n	80080d6 <HAL_UART_Init+0xae>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d111      	bne.n	800806a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fd0e 	bl	8008a70 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008058:	2b00      	cmp	r3, #0
 800805a:	d102      	bne.n	8008062 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a20      	ldr	r2, [pc, #128]	@ (80080e0 <HAL_UART_Init+0xb8>)
 8008060:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2224      	movs	r2, #36	@ 0x24
 800806e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68da      	ldr	r2, [r3, #12]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008080:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 ffd8 	bl	8009038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	691a      	ldr	r2, [r3, #16]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008096:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	695a      	ldr	r2, [r3, #20]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80080a6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68da      	ldr	r2, [r3, #12]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80080b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2220      	movs	r2, #32
 80080c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2220      	movs	r2, #32
 80080ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	08001ee9 	.word	0x08001ee9

080080e4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	460b      	mov	r3, r1
 80080ee:	607a      	str	r2, [r7, #4]
 80080f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d107      	bne.n	800810c <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008100:	f043 0220 	orr.w	r2, r3, #32
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	645a      	str	r2, [r3, #68]	@ 0x44

    return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e07c      	b.n	8008206 <HAL_UART_RegisterCallback+0x122>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b20      	cmp	r3, #32
 8008116:	d150      	bne.n	80081ba <HAL_UART_RegisterCallback+0xd6>
  {
    switch (CallbackID)
 8008118:	7afb      	ldrb	r3, [r7, #11]
 800811a:	2b0c      	cmp	r3, #12
 800811c:	d844      	bhi.n	80081a8 <HAL_UART_RegisterCallback+0xc4>
 800811e:	a201      	add	r2, pc, #4	@ (adr r2, 8008124 <HAL_UART_RegisterCallback+0x40>)
 8008120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008124:	08008159 	.word	0x08008159
 8008128:	08008161 	.word	0x08008161
 800812c:	08008169 	.word	0x08008169
 8008130:	08008171 	.word	0x08008171
 8008134:	08008179 	.word	0x08008179
 8008138:	08008181 	.word	0x08008181
 800813c:	08008189 	.word	0x08008189
 8008140:	08008191 	.word	0x08008191
 8008144:	080081a9 	.word	0x080081a9
 8008148:	080081a9 	.word	0x080081a9
 800814c:	080081a9 	.word	0x080081a9
 8008150:	08008199 	.word	0x08008199
 8008154:	080081a1 	.word	0x080081a1
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 800815e:	e051      	b.n	8008204 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008166:	e04d      	b.n	8008204 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800816e:	e049      	b.n	8008204 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008176:	e045      	b.n	8008204 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800817e:	e041      	b.n	8008204 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008186:	e03d      	b.n	8008204 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800818e:	e039      	b.n	8008204 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008196:	e035      	b.n	8008204 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800819e:	e031      	b.n	8008204 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80081a6:	e02d      	b.n	8008204 <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ac:	f043 0220 	orr.w	r2, r3, #32
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	75fb      	strb	r3, [r7, #23]
        break;
 80081b8:	e024      	b.n	8008204 <HAL_UART_RegisterCallback+0x120>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d116      	bne.n	80081f4 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80081c6:	7afb      	ldrb	r3, [r7, #11]
 80081c8:	2b0b      	cmp	r3, #11
 80081ca:	d002      	beq.n	80081d2 <HAL_UART_RegisterCallback+0xee>
 80081cc:	2b0c      	cmp	r3, #12
 80081ce:	d004      	beq.n	80081da <HAL_UART_RegisterCallback+0xf6>
 80081d0:	e007      	b.n	80081e2 <HAL_UART_RegisterCallback+0xfe>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80081d8:	e014      	b.n	8008204 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80081e0:	e010      	b.n	8008204 <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081e6:	f043 0220 	orr.w	r2, r3, #32
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	75fb      	strb	r3, [r7, #23]
        break;
 80081f2:	e007      	b.n	8008204 <HAL_UART_RegisterCallback+0x120>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081f8:	f043 0220 	orr.w	r2, r3, #32
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Return error status */
    status =  HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008204:	7dfb      	ldrb	r3, [r7, #23]
}
 8008206:	4618      	mov	r0, r3
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop

08008214 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	4613      	mov	r3, r2
 8008220:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b20      	cmp	r3, #32
 800822c:	d112      	bne.n	8008254 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <HAL_UART_Receive_IT+0x26>
 8008234:	88fb      	ldrh	r3, [r7, #6]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d101      	bne.n	800823e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e00b      	b.n	8008256 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008244:	88fb      	ldrh	r3, [r7, #6]
 8008246:	461a      	mov	r2, r3
 8008248:	68b9      	ldr	r1, [r7, #8]
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f000 fcf0 	bl	8008c30 <UART_Start_Receive_IT>
 8008250:	4603      	mov	r3, r0
 8008252:	e000      	b.n	8008256 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008254:	2302      	movs	r3, #2
  }
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
	...

08008260 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b08c      	sub	sp, #48	@ 0x30
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	4613      	mov	r3, r2
 800826c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b20      	cmp	r3, #32
 8008278:	d156      	bne.n	8008328 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <HAL_UART_Transmit_DMA+0x26>
 8008280:	88fb      	ldrh	r3, [r7, #6]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e04f      	b.n	800832a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	88fa      	ldrh	r2, [r7, #6]
 8008294:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	88fa      	ldrh	r2, [r7, #6]
 800829a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2221      	movs	r2, #33	@ 0x21
 80082a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ae:	4a21      	ldr	r2, [pc, #132]	@ (8008334 <HAL_UART_Transmit_DMA+0xd4>)
 80082b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b6:	4a20      	ldr	r2, [pc, #128]	@ (8008338 <HAL_UART_Transmit_DMA+0xd8>)
 80082b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082be:	4a1f      	ldr	r2, [pc, #124]	@ (800833c <HAL_UART_Transmit_DMA+0xdc>)
 80082c0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c6:	2200      	movs	r2, #0
 80082c8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80082ca:	f107 0308 	add.w	r3, r7, #8
 80082ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80082d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d6:	6819      	ldr	r1, [r3, #0]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3304      	adds	r3, #4
 80082de:	461a      	mov	r2, r3
 80082e0:	88fb      	ldrh	r3, [r7, #6]
 80082e2:	f7fa fe15 	bl	8002f10 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3314      	adds	r3, #20
 80082f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	e853 3f00 	ldrex	r3, [r3]
 80082fe:	617b      	str	r3, [r7, #20]
   return(result);
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008306:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3314      	adds	r3, #20
 800830e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008310:	627a      	str	r2, [r7, #36]	@ 0x24
 8008312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008314:	6a39      	ldr	r1, [r7, #32]
 8008316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008318:	e841 2300 	strex	r3, r2, [r1]
 800831c:	61fb      	str	r3, [r7, #28]
   return(result);
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1e5      	bne.n	80082f0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	e000      	b.n	800832a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008328:	2302      	movs	r3, #2
  }
}
 800832a:	4618      	mov	r0, r3
 800832c:	3730      	adds	r7, #48	@ 0x30
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	08008ae1 	.word	0x08008ae1
 8008338:	08008b7d 	.word	0x08008b7d
 800833c:	08008b9b 	.word	0x08008b9b

08008340 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b09a      	sub	sp, #104	@ 0x68
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	330c      	adds	r3, #12
 800834e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008350:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008352:	e853 3f00 	ldrex	r3, [r3]
 8008356:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800835a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800835e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	330c      	adds	r3, #12
 8008366:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008368:	657a      	str	r2, [r7, #84]	@ 0x54
 800836a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800836e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008370:	e841 2300 	strex	r3, r2, [r1]
 8008374:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1e5      	bne.n	8008348 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3314      	adds	r3, #20
 8008382:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800838c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838e:	f023 0301 	bic.w	r3, r3, #1
 8008392:	663b      	str	r3, [r7, #96]	@ 0x60
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3314      	adds	r3, #20
 800839a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800839c:	643a      	str	r2, [r7, #64]	@ 0x40
 800839e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083a4:	e841 2300 	strex	r3, r2, [r1]
 80083a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1e5      	bne.n	800837c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d119      	bne.n	80083ec <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	330c      	adds	r3, #12
 80083be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	e853 3f00 	ldrex	r3, [r3]
 80083c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	f023 0310 	bic.w	r3, r3, #16
 80083ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	330c      	adds	r3, #12
 80083d6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80083d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083e0:	e841 2300 	strex	r3, r2, [r1]
 80083e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1e5      	bne.n	80083b8 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083f6:	2b40      	cmp	r3, #64	@ 0x40
 80083f8:	d136      	bne.n	8008468 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	3314      	adds	r3, #20
 8008400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	60bb      	str	r3, [r7, #8]
   return(result);
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008410:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3314      	adds	r3, #20
 8008418:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800841a:	61ba      	str	r2, [r7, #24]
 800841c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	6979      	ldr	r1, [r7, #20]
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	613b      	str	r3, [r7, #16]
   return(result);
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e5      	bne.n	80083fa <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008432:	2b00      	cmp	r3, #0
 8008434:	d018      	beq.n	8008468 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800843a:	2200      	movs	r2, #0
 800843c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008442:	4618      	mov	r0, r3
 8008444:	f7fa fdbc 	bl	8002fc0 <HAL_DMA_Abort>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00c      	beq.n	8008468 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008452:	4618      	mov	r0, r3
 8008454:	f7fa ffde 	bl	8003414 <HAL_DMA_GetError>
 8008458:	4603      	mov	r3, r0
 800845a:	2b20      	cmp	r3, #32
 800845c:	d104      	bne.n	8008468 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2210      	movs	r2, #16
 8008462:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e00a      	b.n	800847e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2220      	movs	r2, #32
 8008472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3768      	adds	r7, #104	@ 0x68
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
	...

08008488 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b0ba      	sub	sp, #232	@ 0xe8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80084b4:	2300      	movs	r3, #0
 80084b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80084ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084be:	f003 030f 	and.w	r3, r3, #15
 80084c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80084c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10f      	bne.n	80084ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d009      	beq.n	80084ee <HAL_UART_IRQHandler+0x66>
 80084da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084de:	f003 0320 	and.w	r3, r3, #32
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fce5 	bl	8008eb6 <UART_Receive_IT>
      return;
 80084ec:	e260      	b.n	80089b0 <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80084ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 80e1 	beq.w	80086ba <HAL_UART_IRQHandler+0x232>
 80084f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	2b00      	cmp	r3, #0
 8008502:	d106      	bne.n	8008512 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008508:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 80d4 	beq.w	80086ba <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008516:	f003 0301 	and.w	r3, r3, #1
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00b      	beq.n	8008536 <HAL_UART_IRQHandler+0xae>
 800851e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008526:	2b00      	cmp	r3, #0
 8008528:	d005      	beq.n	8008536 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800852e:	f043 0201 	orr.w	r2, r3, #1
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800853a:	f003 0304 	and.w	r3, r3, #4
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00b      	beq.n	800855a <HAL_UART_IRQHandler+0xd2>
 8008542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b00      	cmp	r3, #0
 800854c:	d005      	beq.n	800855a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008552:	f043 0202 	orr.w	r2, r3, #2
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800855a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800855e:	f003 0302 	and.w	r3, r3, #2
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00b      	beq.n	800857e <HAL_UART_IRQHandler+0xf6>
 8008566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008576:	f043 0204 	orr.w	r2, r3, #4
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800857e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008582:	f003 0308 	and.w	r3, r3, #8
 8008586:	2b00      	cmp	r3, #0
 8008588:	d011      	beq.n	80085ae <HAL_UART_IRQHandler+0x126>
 800858a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800858e:	f003 0320 	and.w	r3, r3, #32
 8008592:	2b00      	cmp	r3, #0
 8008594:	d105      	bne.n	80085a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d005      	beq.n	80085ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085a6:	f043 0208 	orr.w	r2, r3, #8
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 81f7 	beq.w	80089a6 <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085bc:	f003 0320 	and.w	r3, r3, #32
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d008      	beq.n	80085d6 <HAL_UART_IRQHandler+0x14e>
 80085c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085c8:	f003 0320 	and.w	r3, r3, #32
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d002      	beq.n	80085d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fc70 	bl	8008eb6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085e0:	2b40      	cmp	r3, #64	@ 0x40
 80085e2:	bf0c      	ite	eq
 80085e4:	2301      	moveq	r3, #1
 80085e6:	2300      	movne	r3, #0
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085f2:	f003 0308 	and.w	r3, r3, #8
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d103      	bne.n	8008602 <HAL_UART_IRQHandler+0x17a>
 80085fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d051      	beq.n	80086a6 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fb76 	bl	8008cf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008612:	2b40      	cmp	r3, #64	@ 0x40
 8008614:	d142      	bne.n	800869c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3314      	adds	r3, #20
 800861c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008620:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008624:	e853 3f00 	ldrex	r3, [r3]
 8008628:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800862c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008630:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008634:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3314      	adds	r3, #20
 800863e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008642:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008646:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800864e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800865a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1d9      	bne.n	8008616 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008666:	2b00      	cmp	r3, #0
 8008668:	d013      	beq.n	8008692 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800866e:	4a80      	ldr	r2, [pc, #512]	@ (8008870 <HAL_UART_IRQHandler+0x3e8>)
 8008670:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008676:	4618      	mov	r0, r3
 8008678:	f7fa fd12 	bl	80030a0 <HAL_DMA_Abort_IT>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d019      	beq.n	80086b6 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800868c:	4610      	mov	r0, r2
 800868e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008690:	e011      	b.n	80086b6 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800869a:	e00c      	b.n	80086b6 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086a4:	e007      	b.n	80086b6 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80086b4:	e177      	b.n	80089a6 <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b6:	bf00      	nop
    return;
 80086b8:	e175      	b.n	80089a6 <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086be:	2b01      	cmp	r3, #1
 80086c0:	f040 8151 	bne.w	8008966 <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80086c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086c8:	f003 0310 	and.w	r3, r3, #16
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 814a 	beq.w	8008966 <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80086d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086d6:	f003 0310 	and.w	r3, r3, #16
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f000 8143 	beq.w	8008966 <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086e0:	2300      	movs	r3, #0
 80086e2:	60bb      	str	r3, [r7, #8]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	60bb      	str	r3, [r7, #8]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	60bb      	str	r3, [r7, #8]
 80086f4:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	695b      	ldr	r3, [r3, #20]
 80086fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008700:	2b40      	cmp	r3, #64	@ 0x40
 8008702:	f040 80b7 	bne.w	8008874 <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008712:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 8147 	beq.w	80089aa <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008720:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008724:	429a      	cmp	r2, r3
 8008726:	f080 8140 	bcs.w	80089aa <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008730:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008736:	69db      	ldr	r3, [r3, #28]
 8008738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800873c:	f000 8088 	beq.w	8008850 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	330c      	adds	r3, #12
 8008746:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800874e:	e853 3f00 	ldrex	r3, [r3]
 8008752:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008756:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800875a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800875e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	330c      	adds	r3, #12
 8008768:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800876c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008770:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008774:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008778:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800877c:	e841 2300 	strex	r3, r2, [r1]
 8008780:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008784:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1d9      	bne.n	8008740 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3314      	adds	r3, #20
 8008792:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008794:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008796:	e853 3f00 	ldrex	r3, [r3]
 800879a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800879c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800879e:	f023 0301 	bic.w	r3, r3, #1
 80087a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3314      	adds	r3, #20
 80087ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087b0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80087b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80087b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80087bc:	e841 2300 	strex	r3, r2, [r1]
 80087c0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80087c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1e1      	bne.n	800878c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3314      	adds	r3, #20
 80087ce:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087d2:	e853 3f00 	ldrex	r3, [r3]
 80087d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80087d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3314      	adds	r3, #20
 80087e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80087ec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80087ee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80087f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80087f4:	e841 2300 	strex	r3, r2, [r1]
 80087f8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80087fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1e3      	bne.n	80087c8 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2220      	movs	r2, #32
 8008804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	330c      	adds	r3, #12
 8008814:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800881e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008820:	f023 0310 	bic.w	r3, r3, #16
 8008824:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	330c      	adds	r3, #12
 800882e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008832:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008834:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008838:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008840:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e3      	bne.n	800880e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800884a:	4618      	mov	r0, r3
 800884c:	f7fa fbb8 	bl	8002fc0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 8008862:	b292      	uxth	r2, r2
 8008864:	1a8a      	subs	r2, r1, r2
 8008866:	b292      	uxth	r2, r2
 8008868:	4611      	mov	r1, r2
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800886e:	e09c      	b.n	80089aa <HAL_UART_IRQHandler+0x522>
 8008870:	08008dbb 	.word	0x08008dbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800887c:	b29b      	uxth	r3, r3
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008888:	b29b      	uxth	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	f000 808f 	beq.w	80089ae <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 8008890:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 808a 	beq.w	80089ae <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	330c      	adds	r3, #12
 80088a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a4:	e853 3f00 	ldrex	r3, [r3]
 80088a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	330c      	adds	r3, #12
 80088ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80088be:	647a      	str	r2, [r7, #68]	@ 0x44
 80088c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e3      	bne.n	800889a <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3314      	adds	r3, #20
 80088d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	623b      	str	r3, [r7, #32]
   return(result);
 80088e2:	6a3b      	ldr	r3, [r7, #32]
 80088e4:	f023 0301 	bic.w	r3, r3, #1
 80088e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3314      	adds	r3, #20
 80088f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80088f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80088f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e3      	bne.n	80088d2 <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2220      	movs	r2, #32
 800890e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	330c      	adds	r3, #12
 800891e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	e853 3f00 	ldrex	r3, [r3]
 8008926:	60fb      	str	r3, [r7, #12]
   return(result);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 0310 	bic.w	r3, r3, #16
 800892e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	330c      	adds	r3, #12
 8008938:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800893c:	61fa      	str	r2, [r7, #28]
 800893e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008940:	69b9      	ldr	r1, [r7, #24]
 8008942:	69fa      	ldr	r2, [r7, #28]
 8008944:	e841 2300 	strex	r3, r2, [r1]
 8008948:	617b      	str	r3, [r7, #20]
   return(result);
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1e3      	bne.n	8008918 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800895a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800895e:	4611      	mov	r1, r2
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008964:	e023      	b.n	80089ae <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800896a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800896e:	2b00      	cmp	r3, #0
 8008970:	d009      	beq.n	8008986 <HAL_UART_IRQHandler+0x4fe>
 8008972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800897a:	2b00      	cmp	r3, #0
 800897c:	d003      	beq.n	8008986 <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fa30 	bl	8008de4 <UART_Transmit_IT>
    return;
 8008984:	e014      	b.n	80089b0 <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800898a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00e      	beq.n	80089b0 <HAL_UART_IRQHandler+0x528>
 8008992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800899a:	2b00      	cmp	r3, #0
 800899c:	d008      	beq.n	80089b0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fa70 	bl	8008e84 <UART_EndTransmit_IT>
    return;
 80089a4:	e004      	b.n	80089b0 <HAL_UART_IRQHandler+0x528>
    return;
 80089a6:	bf00      	nop
 80089a8:	e002      	b.n	80089b0 <HAL_UART_IRQHandler+0x528>
      return;
 80089aa:	bf00      	nop
 80089ac:	e000      	b.n	80089b0 <HAL_UART_IRQHandler+0x528>
      return;
 80089ae:	bf00      	nop
  }
}
 80089b0:	37e8      	adds	r7, #232	@ 0xe8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop

080089b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	460b      	mov	r3, r1
 8008a62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a10      	ldr	r2, [pc, #64]	@ (8008abc <UART_InitCallbacksToDefault+0x4c>)
 8008a7c:	649a      	str	r2, [r3, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a0f      	ldr	r2, [pc, #60]	@ (8008ac0 <UART_InitCallbacksToDefault+0x50>)
 8008a82:	64da      	str	r2, [r3, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a0f      	ldr	r2, [pc, #60]	@ (8008ac4 <UART_InitCallbacksToDefault+0x54>)
 8008a88:	651a      	str	r2, [r3, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a0e      	ldr	r2, [pc, #56]	@ (8008ac8 <UART_InitCallbacksToDefault+0x58>)
 8008a8e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a0e      	ldr	r2, [pc, #56]	@ (8008acc <UART_InitCallbacksToDefault+0x5c>)
 8008a94:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a0d      	ldr	r2, [pc, #52]	@ (8008ad0 <UART_InitCallbacksToDefault+0x60>)
 8008a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8008ad4 <UART_InitCallbacksToDefault+0x64>)
 8008aa0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8008ad8 <UART_InitCallbacksToDefault+0x68>)
 8008aa6:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8008adc <UART_InitCallbacksToDefault+0x6c>)
 8008aac:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 8008aae:	bf00      	nop
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	080089cd 	.word	0x080089cd
 8008ac0:	080089b9 	.word	0x080089b9
 8008ac4:	080089f5 	.word	0x080089f5
 8008ac8:	080089e1 	.word	0x080089e1
 8008acc:	08008a09 	.word	0x08008a09
 8008ad0:	08008a1d 	.word	0x08008a1d
 8008ad4:	08008a31 	.word	0x08008a31
 8008ad8:	08008a45 	.word	0x08008a45
 8008adc:	08008a59 	.word	0x08008a59

08008ae0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b090      	sub	sp, #64	@ 0x40
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d137      	bne.n	8008b6c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008afe:	2200      	movs	r2, #0
 8008b00:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3314      	adds	r3, #20
 8008b08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	623b      	str	r3, [r7, #32]
   return(result);
 8008b12:	6a3b      	ldr	r3, [r7, #32]
 8008b14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	3314      	adds	r3, #20
 8008b20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b22:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e5      	bne.n	8008b02 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	330c      	adds	r3, #12
 8008b3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	330c      	adds	r3, #12
 8008b54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b56:	61fa      	str	r2, [r7, #28]
 8008b58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5a:	69b9      	ldr	r1, [r7, #24]
 8008b5c:	69fa      	ldr	r2, [r7, #28]
 8008b5e:	e841 2300 	strex	r3, r2, [r1]
 8008b62:	617b      	str	r3, [r7, #20]
   return(result);
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1e5      	bne.n	8008b36 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b6a:	e003      	b.n	8008b74 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8008b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b70:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008b72:	4798      	blx	r3
}
 8008b74:	bf00      	nop
 8008b76:	3740      	adds	r7, #64	@ 0x40
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b88:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b92:	bf00      	nop
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008baa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bb6:	2b80      	cmp	r3, #128	@ 0x80
 8008bb8:	bf0c      	ite	eq
 8008bba:	2301      	moveq	r3, #1
 8008bbc:	2300      	movne	r3, #0
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b21      	cmp	r3, #33	@ 0x21
 8008bcc:	d108      	bne.n	8008be0 <UART_DMAError+0x46>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d005      	beq.n	8008be0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008bda:	68b8      	ldr	r0, [r7, #8]
 8008bdc:	f000 f862 	bl	8008ca4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	695b      	ldr	r3, [r3, #20]
 8008be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bea:	2b40      	cmp	r3, #64	@ 0x40
 8008bec:	bf0c      	ite	eq
 8008bee:	2301      	moveq	r3, #1
 8008bf0:	2300      	movne	r3, #0
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b22      	cmp	r3, #34	@ 0x22
 8008c00:	d108      	bne.n	8008c14 <UART_DMAError+0x7a>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d005      	beq.n	8008c14 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008c0e:	68b8      	ldr	r0, [r7, #8]
 8008c10:	f000 f870 	bl	8008cf4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c18:	f043 0210 	orr.w	r2, r3, #16
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c24:	68b8      	ldr	r0, [r7, #8]
 8008c26:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c28:	bf00      	nop
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	88fa      	ldrh	r2, [r7, #6]
 8008c48:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	88fa      	ldrh	r2, [r7, #6]
 8008c4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2222      	movs	r2, #34	@ 0x22
 8008c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d007      	beq.n	8008c76 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68da      	ldr	r2, [r3, #12]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c74:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	695a      	ldr	r2, [r3, #20]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f042 0201 	orr.w	r2, r2, #1
 8008c84:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68da      	ldr	r2, [r3, #12]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f042 0220 	orr.w	r2, r2, #32
 8008c94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b089      	sub	sp, #36	@ 0x24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	330c      	adds	r3, #12
 8008cb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	e853 3f00 	ldrex	r3, [r3]
 8008cba:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008cc2:	61fb      	str	r3, [r7, #28]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	330c      	adds	r3, #12
 8008cca:	69fa      	ldr	r2, [r7, #28]
 8008ccc:	61ba      	str	r2, [r7, #24]
 8008cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd0:	6979      	ldr	r1, [r7, #20]
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	e841 2300 	strex	r3, r2, [r1]
 8008cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e5      	bne.n	8008cac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2220      	movs	r2, #32
 8008ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008ce8:	bf00      	nop
 8008cea:	3724      	adds	r7, #36	@ 0x24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b095      	sub	sp, #84	@ 0x54
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	330c      	adds	r3, #12
 8008d02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d06:	e853 3f00 	ldrex	r3, [r3]
 8008d0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	330c      	adds	r3, #12
 8008d1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d1c:	643a      	str	r2, [r7, #64]	@ 0x40
 8008d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d24:	e841 2300 	strex	r3, r2, [r1]
 8008d28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1e5      	bne.n	8008cfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3314      	adds	r3, #20
 8008d36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d38:	6a3b      	ldr	r3, [r7, #32]
 8008d3a:	e853 3f00 	ldrex	r3, [r3]
 8008d3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	f023 0301 	bic.w	r3, r3, #1
 8008d46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	3314      	adds	r3, #20
 8008d4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d58:	e841 2300 	strex	r3, r2, [r1]
 8008d5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e5      	bne.n	8008d30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d119      	bne.n	8008da0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	330c      	adds	r3, #12
 8008d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	e853 3f00 	ldrex	r3, [r3]
 8008d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	f023 0310 	bic.w	r3, r3, #16
 8008d82:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	330c      	adds	r3, #12
 8008d8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d8c:	61ba      	str	r2, [r7, #24]
 8008d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d90:	6979      	ldr	r1, [r7, #20]
 8008d92:	69ba      	ldr	r2, [r7, #24]
 8008d94:	e841 2300 	strex	r3, r2, [r1]
 8008d98:	613b      	str	r3, [r7, #16]
   return(result);
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1e5      	bne.n	8008d6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2220      	movs	r2, #32
 8008da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008dae:	bf00      	nop
 8008db0:	3754      	adds	r7, #84	@ 0x54
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	84da      	strh	r2, [r3, #38]	@ 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ddc:	bf00      	nop
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	2b21      	cmp	r3, #33	@ 0x21
 8008df6:	d13e      	bne.n	8008e76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e00:	d114      	bne.n	8008e2c <UART_Transmit_IT+0x48>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d110      	bne.n	8008e2c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	461a      	mov	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a1b      	ldr	r3, [r3, #32]
 8008e24:	1c9a      	adds	r2, r3, #2
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	621a      	str	r2, [r3, #32]
 8008e2a:	e008      	b.n	8008e3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a1b      	ldr	r3, [r3, #32]
 8008e30:	1c59      	adds	r1, r3, #1
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	6211      	str	r1, [r2, #32]
 8008e36:	781a      	ldrb	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	3b01      	subs	r3, #1
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10f      	bne.n	8008e72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68da      	ldr	r2, [r3, #12]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68da      	ldr	r2, [r3, #12]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e72:	2300      	movs	r3, #0
 8008e74:	e000      	b.n	8008e78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e76:	2302      	movs	r3, #2
  }
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68da      	ldr	r2, [r3, #12]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e9a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2220      	movs	r2, #32
 8008ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b08c      	sub	sp, #48	@ 0x30
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	2b22      	cmp	r3, #34	@ 0x22
 8008ec8:	f040 80b0 	bne.w	800902c <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ed4:	d117      	bne.n	8008f06 <UART_Receive_IT+0x50>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d113      	bne.n	8008f06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008efe:	1c9a      	adds	r2, r3, #2
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	629a      	str	r2, [r3, #40]	@ 0x28
 8008f04:	e026      	b.n	8008f54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f18:	d007      	beq.n	8008f2a <UART_Receive_IT+0x74>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10a      	bne.n	8008f38 <UART_Receive_IT+0x82>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d106      	bne.n	8008f38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f34:	701a      	strb	r2, [r3, #0]
 8008f36:	e008      	b.n	8008f4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f4e:	1c5a      	adds	r2, r3, #1
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	4619      	mov	r1, r3
 8008f62:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d15f      	bne.n	8009028 <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68da      	ldr	r2, [r3, #12]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f022 0220 	bic.w	r2, r2, #32
 8008f76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68da      	ldr	r2, [r3, #12]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008f86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	695a      	ldr	r2, [r3, #20]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f022 0201 	bic.w	r2, r2, #1
 8008f96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2220      	movs	r2, #32
 8008f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d136      	bne.n	800901c <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	330c      	adds	r3, #12
 8008fba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	e853 3f00 	ldrex	r3, [r3]
 8008fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f023 0310 	bic.w	r3, r3, #16
 8008fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	330c      	adds	r3, #12
 8008fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fd4:	623a      	str	r2, [r7, #32]
 8008fd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd8:	69f9      	ldr	r1, [r7, #28]
 8008fda:	6a3a      	ldr	r2, [r7, #32]
 8008fdc:	e841 2300 	strex	r3, r2, [r1]
 8008fe0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1e5      	bne.n	8008fb4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 0310 	and.w	r3, r3, #16
 8008ff2:	2b10      	cmp	r3, #16
 8008ff4:	d10a      	bne.n	800900c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	60fb      	str	r3, [r7, #12]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	60fb      	str	r3, [r7, #12]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	60fb      	str	r3, [r7, #12]
 800900a:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8009014:	4611      	mov	r1, r2
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	4798      	blx	r3
 800901a:	e003      	b.n	8009024 <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	e002      	b.n	800902e <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 8009028:	2300      	movs	r3, #0
 800902a:	e000      	b.n	800902e <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 800902c:	2302      	movs	r3, #2
  }
}
 800902e:	4618      	mov	r0, r3
 8009030:	3730      	adds	r7, #48	@ 0x30
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800903c:	b0c0      	sub	sp, #256	@ 0x100
 800903e:	af00      	add	r7, sp, #0
 8009040:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009054:	68d9      	ldr	r1, [r3, #12]
 8009056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	ea40 0301 	orr.w	r3, r0, r1
 8009060:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	431a      	orrs	r2, r3
 8009070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	431a      	orrs	r2, r3
 8009078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800907c:	69db      	ldr	r3, [r3, #28]
 800907e:	4313      	orrs	r3, r2
 8009080:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009090:	f021 010c 	bic.w	r1, r1, #12
 8009094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800909e:	430b      	orrs	r3, r1
 80090a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80090a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80090ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090b2:	6999      	ldr	r1, [r3, #24]
 80090b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	ea40 0301 	orr.w	r3, r0, r1
 80090be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	4b8f      	ldr	r3, [pc, #572]	@ (8009304 <UART_SetConfig+0x2cc>)
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d005      	beq.n	80090d8 <UART_SetConfig+0xa0>
 80090cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	4b8d      	ldr	r3, [pc, #564]	@ (8009308 <UART_SetConfig+0x2d0>)
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d104      	bne.n	80090e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80090d8:	f7fd fdb8 	bl	8006c4c <HAL_RCC_GetPCLK2Freq>
 80090dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80090e0:	e003      	b.n	80090ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80090e2:	f7fd fd9f 	bl	8006c24 <HAL_RCC_GetPCLK1Freq>
 80090e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090f4:	f040 810c 	bne.w	8009310 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80090f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090fc:	2200      	movs	r2, #0
 80090fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009102:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009106:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800910a:	4622      	mov	r2, r4
 800910c:	462b      	mov	r3, r5
 800910e:	1891      	adds	r1, r2, r2
 8009110:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009112:	415b      	adcs	r3, r3
 8009114:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009116:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800911a:	4621      	mov	r1, r4
 800911c:	eb12 0801 	adds.w	r8, r2, r1
 8009120:	4629      	mov	r1, r5
 8009122:	eb43 0901 	adc.w	r9, r3, r1
 8009126:	f04f 0200 	mov.w	r2, #0
 800912a:	f04f 0300 	mov.w	r3, #0
 800912e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800913a:	4690      	mov	r8, r2
 800913c:	4699      	mov	r9, r3
 800913e:	4623      	mov	r3, r4
 8009140:	eb18 0303 	adds.w	r3, r8, r3
 8009144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009148:	462b      	mov	r3, r5
 800914a:	eb49 0303 	adc.w	r3, r9, r3
 800914e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800915e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009162:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009166:	460b      	mov	r3, r1
 8009168:	18db      	adds	r3, r3, r3
 800916a:	653b      	str	r3, [r7, #80]	@ 0x50
 800916c:	4613      	mov	r3, r2
 800916e:	eb42 0303 	adc.w	r3, r2, r3
 8009172:	657b      	str	r3, [r7, #84]	@ 0x54
 8009174:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009178:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800917c:	f7f7 fc4a 	bl	8000a14 <__aeabi_uldivmod>
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	4b61      	ldr	r3, [pc, #388]	@ (800930c <UART_SetConfig+0x2d4>)
 8009186:	fba3 2302 	umull	r2, r3, r3, r2
 800918a:	095b      	lsrs	r3, r3, #5
 800918c:	011c      	lsls	r4, r3, #4
 800918e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009192:	2200      	movs	r2, #0
 8009194:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009198:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800919c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80091a0:	4642      	mov	r2, r8
 80091a2:	464b      	mov	r3, r9
 80091a4:	1891      	adds	r1, r2, r2
 80091a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80091a8:	415b      	adcs	r3, r3
 80091aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80091b0:	4641      	mov	r1, r8
 80091b2:	eb12 0a01 	adds.w	sl, r2, r1
 80091b6:	4649      	mov	r1, r9
 80091b8:	eb43 0b01 	adc.w	fp, r3, r1
 80091bc:	f04f 0200 	mov.w	r2, #0
 80091c0:	f04f 0300 	mov.w	r3, #0
 80091c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091d0:	4692      	mov	sl, r2
 80091d2:	469b      	mov	fp, r3
 80091d4:	4643      	mov	r3, r8
 80091d6:	eb1a 0303 	adds.w	r3, sl, r3
 80091da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091de:	464b      	mov	r3, r9
 80091e0:	eb4b 0303 	adc.w	r3, fp, r3
 80091e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80091e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80091f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80091fc:	460b      	mov	r3, r1
 80091fe:	18db      	adds	r3, r3, r3
 8009200:	643b      	str	r3, [r7, #64]	@ 0x40
 8009202:	4613      	mov	r3, r2
 8009204:	eb42 0303 	adc.w	r3, r2, r3
 8009208:	647b      	str	r3, [r7, #68]	@ 0x44
 800920a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800920e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009212:	f7f7 fbff 	bl	8000a14 <__aeabi_uldivmod>
 8009216:	4602      	mov	r2, r0
 8009218:	460b      	mov	r3, r1
 800921a:	4611      	mov	r1, r2
 800921c:	4b3b      	ldr	r3, [pc, #236]	@ (800930c <UART_SetConfig+0x2d4>)
 800921e:	fba3 2301 	umull	r2, r3, r3, r1
 8009222:	095b      	lsrs	r3, r3, #5
 8009224:	2264      	movs	r2, #100	@ 0x64
 8009226:	fb02 f303 	mul.w	r3, r2, r3
 800922a:	1acb      	subs	r3, r1, r3
 800922c:	00db      	lsls	r3, r3, #3
 800922e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009232:	4b36      	ldr	r3, [pc, #216]	@ (800930c <UART_SetConfig+0x2d4>)
 8009234:	fba3 2302 	umull	r2, r3, r3, r2
 8009238:	095b      	lsrs	r3, r3, #5
 800923a:	005b      	lsls	r3, r3, #1
 800923c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009240:	441c      	add	r4, r3
 8009242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009246:	2200      	movs	r2, #0
 8009248:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800924c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009250:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009254:	4642      	mov	r2, r8
 8009256:	464b      	mov	r3, r9
 8009258:	1891      	adds	r1, r2, r2
 800925a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800925c:	415b      	adcs	r3, r3
 800925e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009260:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009264:	4641      	mov	r1, r8
 8009266:	1851      	adds	r1, r2, r1
 8009268:	6339      	str	r1, [r7, #48]	@ 0x30
 800926a:	4649      	mov	r1, r9
 800926c:	414b      	adcs	r3, r1
 800926e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009270:	f04f 0200 	mov.w	r2, #0
 8009274:	f04f 0300 	mov.w	r3, #0
 8009278:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800927c:	4659      	mov	r1, fp
 800927e:	00cb      	lsls	r3, r1, #3
 8009280:	4651      	mov	r1, sl
 8009282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009286:	4651      	mov	r1, sl
 8009288:	00ca      	lsls	r2, r1, #3
 800928a:	4610      	mov	r0, r2
 800928c:	4619      	mov	r1, r3
 800928e:	4603      	mov	r3, r0
 8009290:	4642      	mov	r2, r8
 8009292:	189b      	adds	r3, r3, r2
 8009294:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009298:	464b      	mov	r3, r9
 800929a:	460a      	mov	r2, r1
 800929c:	eb42 0303 	adc.w	r3, r2, r3
 80092a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80092b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80092b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80092b8:	460b      	mov	r3, r1
 80092ba:	18db      	adds	r3, r3, r3
 80092bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092be:	4613      	mov	r3, r2
 80092c0:	eb42 0303 	adc.w	r3, r2, r3
 80092c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80092ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80092ce:	f7f7 fba1 	bl	8000a14 <__aeabi_uldivmod>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	4b0d      	ldr	r3, [pc, #52]	@ (800930c <UART_SetConfig+0x2d4>)
 80092d8:	fba3 1302 	umull	r1, r3, r3, r2
 80092dc:	095b      	lsrs	r3, r3, #5
 80092de:	2164      	movs	r1, #100	@ 0x64
 80092e0:	fb01 f303 	mul.w	r3, r1, r3
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	3332      	adds	r3, #50	@ 0x32
 80092ea:	4a08      	ldr	r2, [pc, #32]	@ (800930c <UART_SetConfig+0x2d4>)
 80092ec:	fba2 2303 	umull	r2, r3, r2, r3
 80092f0:	095b      	lsrs	r3, r3, #5
 80092f2:	f003 0207 	and.w	r2, r3, #7
 80092f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4422      	add	r2, r4
 80092fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009300:	e106      	b.n	8009510 <UART_SetConfig+0x4d8>
 8009302:	bf00      	nop
 8009304:	40011000 	.word	0x40011000
 8009308:	40011400 	.word	0x40011400
 800930c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009314:	2200      	movs	r2, #0
 8009316:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800931a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800931e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009322:	4642      	mov	r2, r8
 8009324:	464b      	mov	r3, r9
 8009326:	1891      	adds	r1, r2, r2
 8009328:	6239      	str	r1, [r7, #32]
 800932a:	415b      	adcs	r3, r3
 800932c:	627b      	str	r3, [r7, #36]	@ 0x24
 800932e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009332:	4641      	mov	r1, r8
 8009334:	1854      	adds	r4, r2, r1
 8009336:	4649      	mov	r1, r9
 8009338:	eb43 0501 	adc.w	r5, r3, r1
 800933c:	f04f 0200 	mov.w	r2, #0
 8009340:	f04f 0300 	mov.w	r3, #0
 8009344:	00eb      	lsls	r3, r5, #3
 8009346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800934a:	00e2      	lsls	r2, r4, #3
 800934c:	4614      	mov	r4, r2
 800934e:	461d      	mov	r5, r3
 8009350:	4643      	mov	r3, r8
 8009352:	18e3      	adds	r3, r4, r3
 8009354:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009358:	464b      	mov	r3, r9
 800935a:	eb45 0303 	adc.w	r3, r5, r3
 800935e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800936e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009372:	f04f 0200 	mov.w	r2, #0
 8009376:	f04f 0300 	mov.w	r3, #0
 800937a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800937e:	4629      	mov	r1, r5
 8009380:	008b      	lsls	r3, r1, #2
 8009382:	4621      	mov	r1, r4
 8009384:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009388:	4621      	mov	r1, r4
 800938a:	008a      	lsls	r2, r1, #2
 800938c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009390:	f7f7 fb40 	bl	8000a14 <__aeabi_uldivmod>
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	4b60      	ldr	r3, [pc, #384]	@ (800951c <UART_SetConfig+0x4e4>)
 800939a:	fba3 2302 	umull	r2, r3, r3, r2
 800939e:	095b      	lsrs	r3, r3, #5
 80093a0:	011c      	lsls	r4, r3, #4
 80093a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093a6:	2200      	movs	r2, #0
 80093a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80093b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80093b4:	4642      	mov	r2, r8
 80093b6:	464b      	mov	r3, r9
 80093b8:	1891      	adds	r1, r2, r2
 80093ba:	61b9      	str	r1, [r7, #24]
 80093bc:	415b      	adcs	r3, r3
 80093be:	61fb      	str	r3, [r7, #28]
 80093c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093c4:	4641      	mov	r1, r8
 80093c6:	1851      	adds	r1, r2, r1
 80093c8:	6139      	str	r1, [r7, #16]
 80093ca:	4649      	mov	r1, r9
 80093cc:	414b      	adcs	r3, r1
 80093ce:	617b      	str	r3, [r7, #20]
 80093d0:	f04f 0200 	mov.w	r2, #0
 80093d4:	f04f 0300 	mov.w	r3, #0
 80093d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80093dc:	4659      	mov	r1, fp
 80093de:	00cb      	lsls	r3, r1, #3
 80093e0:	4651      	mov	r1, sl
 80093e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093e6:	4651      	mov	r1, sl
 80093e8:	00ca      	lsls	r2, r1, #3
 80093ea:	4610      	mov	r0, r2
 80093ec:	4619      	mov	r1, r3
 80093ee:	4603      	mov	r3, r0
 80093f0:	4642      	mov	r2, r8
 80093f2:	189b      	adds	r3, r3, r2
 80093f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093f8:	464b      	mov	r3, r9
 80093fa:	460a      	mov	r2, r1
 80093fc:	eb42 0303 	adc.w	r3, r2, r3
 8009400:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800940e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009410:	f04f 0200 	mov.w	r2, #0
 8009414:	f04f 0300 	mov.w	r3, #0
 8009418:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800941c:	4649      	mov	r1, r9
 800941e:	008b      	lsls	r3, r1, #2
 8009420:	4641      	mov	r1, r8
 8009422:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009426:	4641      	mov	r1, r8
 8009428:	008a      	lsls	r2, r1, #2
 800942a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800942e:	f7f7 faf1 	bl	8000a14 <__aeabi_uldivmod>
 8009432:	4602      	mov	r2, r0
 8009434:	460b      	mov	r3, r1
 8009436:	4611      	mov	r1, r2
 8009438:	4b38      	ldr	r3, [pc, #224]	@ (800951c <UART_SetConfig+0x4e4>)
 800943a:	fba3 2301 	umull	r2, r3, r3, r1
 800943e:	095b      	lsrs	r3, r3, #5
 8009440:	2264      	movs	r2, #100	@ 0x64
 8009442:	fb02 f303 	mul.w	r3, r2, r3
 8009446:	1acb      	subs	r3, r1, r3
 8009448:	011b      	lsls	r3, r3, #4
 800944a:	3332      	adds	r3, #50	@ 0x32
 800944c:	4a33      	ldr	r2, [pc, #204]	@ (800951c <UART_SetConfig+0x4e4>)
 800944e:	fba2 2303 	umull	r2, r3, r2, r3
 8009452:	095b      	lsrs	r3, r3, #5
 8009454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009458:	441c      	add	r4, r3
 800945a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800945e:	2200      	movs	r2, #0
 8009460:	673b      	str	r3, [r7, #112]	@ 0x70
 8009462:	677a      	str	r2, [r7, #116]	@ 0x74
 8009464:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009468:	4642      	mov	r2, r8
 800946a:	464b      	mov	r3, r9
 800946c:	1891      	adds	r1, r2, r2
 800946e:	60b9      	str	r1, [r7, #8]
 8009470:	415b      	adcs	r3, r3
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009478:	4641      	mov	r1, r8
 800947a:	1851      	adds	r1, r2, r1
 800947c:	6039      	str	r1, [r7, #0]
 800947e:	4649      	mov	r1, r9
 8009480:	414b      	adcs	r3, r1
 8009482:	607b      	str	r3, [r7, #4]
 8009484:	f04f 0200 	mov.w	r2, #0
 8009488:	f04f 0300 	mov.w	r3, #0
 800948c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009490:	4659      	mov	r1, fp
 8009492:	00cb      	lsls	r3, r1, #3
 8009494:	4651      	mov	r1, sl
 8009496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800949a:	4651      	mov	r1, sl
 800949c:	00ca      	lsls	r2, r1, #3
 800949e:	4610      	mov	r0, r2
 80094a0:	4619      	mov	r1, r3
 80094a2:	4603      	mov	r3, r0
 80094a4:	4642      	mov	r2, r8
 80094a6:	189b      	adds	r3, r3, r2
 80094a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094aa:	464b      	mov	r3, r9
 80094ac:	460a      	mov	r2, r1
 80094ae:	eb42 0303 	adc.w	r3, r2, r3
 80094b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80094be:	667a      	str	r2, [r7, #100]	@ 0x64
 80094c0:	f04f 0200 	mov.w	r2, #0
 80094c4:	f04f 0300 	mov.w	r3, #0
 80094c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80094cc:	4649      	mov	r1, r9
 80094ce:	008b      	lsls	r3, r1, #2
 80094d0:	4641      	mov	r1, r8
 80094d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094d6:	4641      	mov	r1, r8
 80094d8:	008a      	lsls	r2, r1, #2
 80094da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80094de:	f7f7 fa99 	bl	8000a14 <__aeabi_uldivmod>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4b0d      	ldr	r3, [pc, #52]	@ (800951c <UART_SetConfig+0x4e4>)
 80094e8:	fba3 1302 	umull	r1, r3, r3, r2
 80094ec:	095b      	lsrs	r3, r3, #5
 80094ee:	2164      	movs	r1, #100	@ 0x64
 80094f0:	fb01 f303 	mul.w	r3, r1, r3
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	011b      	lsls	r3, r3, #4
 80094f8:	3332      	adds	r3, #50	@ 0x32
 80094fa:	4a08      	ldr	r2, [pc, #32]	@ (800951c <UART_SetConfig+0x4e4>)
 80094fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009500:	095b      	lsrs	r3, r3, #5
 8009502:	f003 020f 	and.w	r2, r3, #15
 8009506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4422      	add	r2, r4
 800950e:	609a      	str	r2, [r3, #8]
}
 8009510:	bf00      	nop
 8009512:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009516:	46bd      	mov	sp, r7
 8009518:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800951c:	51eb851f 	.word	0x51eb851f

08009520 <arm_cmplx_mag_f32>:
#else
void arm_cmplx_mag_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 8009520:	b480      	push	{r7}
 8009522:	b08b      	sub	sp, #44	@ 0x2c
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8009530:	e030      	b.n	8009594 <arm_cmplx_mag_f32+0x74>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

    real = *pSrc++;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	1d1a      	adds	r2, r3, #4
 8009536:	60fa      	str	r2, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	623b      	str	r3, [r7, #32]
    imag = *pSrc++;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	1d1a      	adds	r2, r3, #4
 8009540:	60fa      	str	r2, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	61fb      	str	r3, [r7, #28]

    /* store result in destination buffer. */
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 8009546:	edd7 7a08 	vldr	s15, [r7, #32]
 800954a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800954e:	edd7 7a07 	vldr	s15, [r7, #28]
 8009552:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	1d1a      	adds	r2, r3, #4
 800955e:	60ba      	str	r2, [r7, #8]
 8009560:	edc7 7a06 	vstr	s15, [r7, #24]
 8009564:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8009566:	edd7 7a06 	vldr	s15, [r7, #24]
 800956a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800956e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009572:	db07      	blt.n	8009584 <arm_cmplx_mag_f32+0x64>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 8009574:	edd7 7a06 	vldr	s15, [r7, #24]
 8009578:	eef1 7ae7 	vsqrt.f32	s15, s15
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	edc3 7a00 	vstr	s15, [r3]
  #endif
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8009582:	e004      	b.n	800958e <arm_cmplx_mag_f32+0x6e>
    }
    else
    {
      *pOut = 0.0f;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f04f 0200 	mov.w	r2, #0
 800958a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800958c:	bf00      	nop

    /* Decrement loop counter */
    blkCnt--;
 800958e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009590:	3b01      	subs	r3, #1
 8009592:	627b      	str	r3, [r7, #36]	@ 0x24
  while (blkCnt > 0U)
 8009594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1cb      	bne.n	8009532 <arm_cmplx_mag_f32+0x12>
  }

}
 800959a:	bf00      	nop
 800959c:	bf00      	nop
 800959e:	372c      	adds	r7, #44	@ 0x2c
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b089      	sub	sp, #36	@ 0x24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
 80095b4:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 80095b6:	2300      	movs	r3, #0
 80095b8:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	1d1a      	adds	r2, r3, #4
 80095be:	60fa      	str	r2, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80095ca:	e016      	b.n	80095fa <arm_max_f32+0x52>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal = *pSrc++;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	1d1a      	adds	r2, r3, #4
 80095d0:	60fa      	str	r2, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal)
 80095d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80095da:	edd7 7a04 	vldr	s15, [r7, #16]
 80095de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095e6:	d505      	bpl.n	80095f4 <arm_max_f32+0x4c>
    {
      /* Update the maximum value and it's index */
      out = maxVal;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	3b01      	subs	r3, #1
 80095f8:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1e5      	bne.n	80095cc <arm_max_f32+0x24>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	69fa      	ldr	r2, [r7, #28]
 8009604:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	697a      	ldr	r2, [r7, #20]
 800960a:	601a      	str	r2, [r3, #0]
}
 800960c:	bf00      	nop
 800960e:	3724      	adds	r7, #36	@ 0x24
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8009618:	b480      	push	{r7}
 800961a:	b089      	sub	sp, #36	@ 0x24
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	460b      	mov	r3, r1
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8009626:	2300      	movs	r3, #0
 8009628:	61fb      	str	r3, [r7, #28]
 800962a:	e043      	b.n	80096b4 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	005b      	lsls	r3, r3, #1
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	4413      	add	r3, r2
 8009634:	881b      	ldrh	r3, [r3, #0]
 8009636:	089b      	lsrs	r3, r3, #2
 8009638:	b29b      	uxth	r3, r3
 800963a:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	3301      	adds	r3, #1
 8009640:	005b      	lsls	r3, r3, #1
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	4413      	add	r3, r2
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	089b      	lsrs	r3, r3, #2
 800964a:	b29b      	uxth	r3, r3
 800964c:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	4413      	add	r3, r2
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	441a      	add	r2, r3
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	68f9      	ldr	r1, [r7, #12]
 8009668:	440b      	add	r3, r1
 800966a:	6812      	ldr	r2, [r2, #0]
 800966c:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	4413      	add	r3, r2
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	3301      	adds	r3, #1
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	4413      	add	r3, r2
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	3301      	adds	r3, #1
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	441a      	add	r2, r3
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	3301      	adds	r3, #1
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	68f9      	ldr	r1, [r7, #12]
 800969a:	440b      	add	r3, r1
 800969c:	6812      	ldr	r2, [r2, #0]
 800969e:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	3301      	adds	r3, #1
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	4413      	add	r3, r2
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	601a      	str	r2, [r3, #0]

    i += 2;
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	3302      	adds	r3, #2
 80096b2:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 80096b4:	897b      	ldrh	r3, [r7, #10]
 80096b6:	69fa      	ldr	r2, [r7, #28]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d3b7      	bcc.n	800962c <arm_bitreversal_32+0x14>
  }
}
 80096bc:	bf00      	nop
 80096be:	bf00      	nop
 80096c0:	3724      	adds	r7, #36	@ 0x24
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b0a0      	sub	sp, #128	@ 0x80
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 80096da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	4413      	add	r3, r2
 80096e2:	677b      	str	r3, [r7, #116]	@ 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	673b      	str	r3, [r7, #112]	@ 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	667b      	str	r3, [r7, #100]	@ 0x64
  pCol2 = p2;
 80096ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096f0:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Define new length */
  L >>= 1;
 80096f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80096f4:	085b      	lsrs	r3, r3, #1
 80096f6:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 80096f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	4413      	add	r3, r2
 8009700:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pMid2 = p2 + L;
 8009702:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009708:	4413      	add	r3, r2
 800970a:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 800970c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800970e:	089b      	lsrs	r3, r3, #2
 8009710:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009712:	e1b6      	b.n	8009a82 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	63bb      	str	r3, [r7, #56]	@ 0x38
    t1[1] = p1[1];
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    t1[2] = p1[2];
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	643b      	str	r3, [r7, #64]	@ 0x40
    t1[3] = p1[3];
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	647b      	str	r3, [r7, #68]	@ 0x44

    t2[0] = p2[0];
 800972c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	62bb      	str	r3, [r7, #40]	@ 0x28
    t2[1] = p2[1];
 8009732:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t2[2] = p2[2];
 8009738:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	633b      	str	r3, [r7, #48]	@ 0x30
    t2[3] = p2[3];
 800973e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	637b      	str	r3, [r7, #52]	@ 0x34

    t3[0] = pMid1[0];
 8009744:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 800974a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8009750:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8009756:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	627b      	str	r3, [r7, #36]	@ 0x24

    t4[0] = pMid2[0];
 800975c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8009762:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8009768:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 800976e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8009774:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8009778:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	1d1a      	adds	r2, r3, #4
 8009780:	603a      	str	r2, [r7, #0]
 8009782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009786:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 800978a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800978e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	1d1a      	adds	r2, r3, #4
 8009796:	603a      	str	r2, [r7, #0]
 8009798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800979c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 80097a0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80097a4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	1d1a      	adds	r2, r3, #4
 80097ac:	603a      	str	r2, [r7, #0]
 80097ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097b2:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 80097b6:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80097ba:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	1d1a      	adds	r2, r3, #4
 80097c2:	603a      	str	r2, [r7, #0]
 80097c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097c8:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 80097cc:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80097d0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80097d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097d8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    t2[1] = t1[1] - t2[1];
 80097dc:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80097e0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80097e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097e8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[2] = t1[2] - t2[2];
 80097ec:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80097f0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80097f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097f8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 80097fc:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8009800:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8009804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009808:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    *pMid1++ = t3[0] + t4[0];
 800980c:	ed97 7a06 	vldr	s14, [r7, #24]
 8009810:	edd7 7a02 	vldr	s15, [r7, #8]
 8009814:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009816:	1d1a      	adds	r2, r3, #4
 8009818:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800981a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800981e:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 8009822:	ed97 7a07 	vldr	s14, [r7, #28]
 8009826:	edd7 7a03 	vldr	s15, [r7, #12]
 800982a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800982c:	1d1a      	adds	r2, r3, #4
 800982e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009834:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8009838:	ed97 7a08 	vldr	s14, [r7, #32]
 800983c:	edd7 7a04 	vldr	s15, [r7, #16]
 8009840:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009842:	1d1a      	adds	r2, r3, #4
 8009844:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800984a:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 800984e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8009852:	edd7 7a05 	vldr	s15, [r7, #20]
 8009856:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009858:	1d1a      	adds	r2, r3, #4
 800985a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800985c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009860:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8009864:	ed97 7a02 	vldr	s14, [r7, #8]
 8009868:	edd7 7a06 	vldr	s15, [r7, #24]
 800986c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009870:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8009874:	ed97 7a03 	vldr	s14, [r7, #12]
 8009878:	edd7 7a07 	vldr	s15, [r7, #28]
 800987c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009880:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8009884:	ed97 7a04 	vldr	s14, [r7, #16]
 8009888:	edd7 7a08 	vldr	s15, [r7, #32]
 800988c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009890:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8009894:	ed97 7a05 	vldr	s14, [r7, #20]
 8009898:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800989c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098a0:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 80098a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80098a6:	1d1a      	adds	r2, r3, #4
 80098a8:	673a      	str	r2, [r7, #112]	@ 0x70
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 80098ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80098b0:	1d1a      	adds	r2, r3, #4
 80098b2:	673a      	str	r2, [r7, #112]	@ 0x70
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 80098b8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80098bc:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80098c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c4:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[1] * twI;
 80098c8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80098cc:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80098d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d4:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[1] * twR;
 80098d8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80098dc:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80098e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[0] * twI;
 80098e8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80098ec:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80098f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098f4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 80098f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098fa:	1d1a      	adds	r2, r3, #4
 80098fc:	677a      	str	r2, [r7, #116]	@ 0x74
 80098fe:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8009902:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8009906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800990a:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 800990e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009910:	1d1a      	adds	r2, r3, #4
 8009912:	677a      	str	r2, [r7, #116]	@ 0x74
 8009914:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8009918:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800991c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009920:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8009924:	edd7 7a02 	vldr	s15, [r7, #8]
 8009928:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800992c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009930:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[1] * twR;
 8009934:	edd7 7a03 	vldr	s15, [r7, #12]
 8009938:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800993c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009940:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[1] * twI;
 8009944:	edd7 7a03 	vldr	s15, [r7, #12]
 8009948:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800994c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009950:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[0] * twR;
 8009954:	edd7 7a02 	vldr	s15, [r7, #8]
 8009958:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800995c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009960:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 8009964:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009966:	1d1a      	adds	r2, r3, #4
 8009968:	67ba      	str	r2, [r7, #120]	@ 0x78
 800996a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800996e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8009972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009976:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800997a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800997c:	1d1a      	adds	r2, r3, #4
 800997e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8009980:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8009984:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8009988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800998c:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8009990:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009992:	1d1a      	adds	r2, r3, #4
 8009994:	673a      	str	r2, [r7, #112]	@ 0x70
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 800999a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800999c:	1d1a      	adds	r2, r3, #4
 800999e:	673a      	str	r2, [r7, #112]	@ 0x70
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	65bb      	str	r3, [r7, #88]	@ 0x58

    m0 = t2[2] * twR;
 80099a4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80099a8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80099ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099b0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[3] * twI;
 80099b4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80099b8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80099bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099c0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[3] * twR;
 80099c4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80099c8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80099cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[2] * twI;
 80099d4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80099d8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80099dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *p2++ = m0 + m1;
 80099e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099e6:	1d1a      	adds	r2, r3, #4
 80099e8:	677a      	str	r2, [r7, #116]	@ 0x74
 80099ea:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80099ee:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80099f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099f6:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80099fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099fc:	1d1a      	adds	r2, r3, #4
 80099fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8009a00:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8009a04:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8009a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a0c:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8009a10:	edd7 7a04 	vldr	s15, [r7, #16]
 8009a14:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8009a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a1c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[3] * twR;
 8009a20:	edd7 7a05 	vldr	s15, [r7, #20]
 8009a24:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8009a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a2c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[3] * twI;
 8009a30:	edd7 7a05 	vldr	s15, [r7, #20]
 8009a34:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8009a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a3c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[2] * twR;
 8009a40:	edd7 7a04 	vldr	s15, [r7, #16]
 8009a44:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8009a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a4c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 8009a50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a52:	1d1a      	adds	r2, r3, #4
 8009a54:	67ba      	str	r2, [r7, #120]	@ 0x78
 8009a56:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8009a5a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8009a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a62:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8009a66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a68:	1d1a      	adds	r2, r3, #4
 8009a6a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8009a6c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8009a70:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8009a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a78:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8009a7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f47f ae45 	bne.w	8009714 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8009a8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a8c:	b299      	uxth	r1, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685a      	ldr	r2, [r3, #4]
 8009a92:	2302      	movs	r3, #2
 8009a94:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8009a96:	f001 f80f 	bl	800aab8 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8009a9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a9c:	b299      	uxth	r1, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685a      	ldr	r2, [r3, #4]
 8009aa2:	2302      	movs	r3, #2
 8009aa4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8009aa6:	f001 f807 	bl	800aab8 <arm_radix8_butterfly_f32>
}
 8009aaa:	bf00      	nop
 8009aac:	3780      	adds	r7, #128	@ 0x80
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b0ac      	sub	sp, #176	@ 0xb0
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	881b      	ldrh	r3, [r3, #0]
 8009ac0:	085b      	lsrs	r3, r3, #1
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8009ac8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    float32_t * p3 = p2 + L;
 8009ad6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    float32_t * p4 = p3 + L;
 8009ae6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8009af0:	4413      	add	r3, r2
 8009af2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    pCol2 = p2;
 8009afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009afe:	67bb      	str	r3, [r7, #120]	@ 0x78
    pCol3 = p3;
 8009b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b04:	677b      	str	r3, [r7, #116]	@ 0x74
    pCol4 = p4;
 8009b06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b0a:	673b      	str	r3, [r7, #112]	@ 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8009b0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009b10:	3b04      	subs	r3, #4
 8009b12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pEnd2 = p3 - 1;
 8009b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b1a:	3b04      	subs	r3, #4
 8009b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    pEnd3 = p4 - 1;
 8009b20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b24:	3b04      	subs	r3, #4
 8009b26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    pEnd4 = pEnd3 + L;
 8009b2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8009b34:	4413      	add	r3, r2
 8009b36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b46:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009b4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    L >>= 1;
 8009b52:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009b56:	085b      	lsrs	r3, r3, #1
 8009b58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    twMod3 = 4;
 8009b60:	2304      	movs	r3, #4
 8009b62:	66bb      	str	r3, [r7, #104]	@ 0x68
    twMod4 = 6;
 8009b64:	2306      	movs	r3, #6
 8009b66:	667b      	str	r3, [r7, #100]	@ 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	ed93 7a00 	vldr	s14, [r3]
 8009b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b72:	edd3 7a00 	vldr	s15, [r3]
 8009b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b7a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	ed93 7a00 	vldr	s14, [r3]
 8009b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b88:	edd3 7a00 	vldr	s15, [r3]
 8009b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b90:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	3304      	adds	r3, #4
 8009b98:	ed93 7a00 	vldr	s14, [r3]
 8009b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ba0:	3304      	adds	r3, #4
 8009ba2:	edd3 7a00 	vldr	s15, [r3]
 8009ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009baa:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	ed93 7a00 	vldr	s14, [r3]
 8009bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bba:	3304      	adds	r3, #4
 8009bbc:	edd3 7a00 	vldr	s15, [r3]
 8009bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bc4:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8009bc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009bcc:	3304      	adds	r3, #4
 8009bce:	ed93 7a00 	vldr	s14, [r3]
 8009bd2:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8009bd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009bda:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009bde:	3304      	adds	r3, #4
 8009be0:	edd3 7a00 	vldr	s15, [r3]
 8009be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009be8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009bec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009bf0:	edd3 7a00 	vldr	s15, [r3]
 8009bf4:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8009bf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009bfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c00:	edd3 7a00 	vldr	s15, [r3]
 8009c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c08:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8009c0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009c10:	edd3 7a00 	vldr	s15, [r3]
 8009c14:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8009c18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c20:	edd3 7a00 	vldr	s15, [r3]
 8009c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c28:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8009c2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009c30:	3304      	adds	r3, #4
 8009c32:	edd3 7a00 	vldr	s15, [r3]
 8009c36:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8009c3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c42:	3304      	adds	r3, #4
 8009c44:	edd3 7a00 	vldr	s15, [r3]
 8009c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c4c:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8009c50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009c54:	3304      	adds	r3, #4
 8009c56:	edd3 7a00 	vldr	s15, [r3]
 8009c5a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8009c5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009c62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c66:	3304      	adds	r3, #4
 8009c68:	edd3 7a00 	vldr	s15, [r3]
 8009c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c70:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8009c74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009c78:	ed93 7a00 	vldr	s14, [r3]
 8009c7c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8009c80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c88:	edd3 7a00 	vldr	s15, [r3]
 8009c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c90:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009c94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009c98:	ed93 7a00 	vldr	s14, [r3]
 8009c9c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8009ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ca4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ca8:	edd3 7a00 	vldr	s15, [r3]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	1d1a      	adds	r2, r3, #4
 8009cb0:	603a      	str	r2, [r7, #0]
 8009cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cb6:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8009cba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009cbe:	3304      	adds	r3, #4
 8009cc0:	ed93 7a00 	vldr	s14, [r3]
 8009cc4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8009cc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ccc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	edd3 7a00 	vldr	s15, [r3]
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	1d1a      	adds	r2, r3, #4
 8009cda:	603a      	str	r2, [r7, #0]
 8009cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ce0:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8009ce4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009ce8:	1d1a      	adds	r2, r3, #4
 8009cea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8009cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cf0:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8009cf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009cf6:	1d1a      	adds	r2, r3, #4
 8009cf8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8009cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cfe:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8009d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009d04:	1d1a      	adds	r2, r3, #4
 8009d06:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009d0a:	69fa      	ldr	r2, [r7, #28]
 8009d0c:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8009d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009d12:	1d1a      	adds	r2, r3, #4
 8009d14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009d18:	6a3a      	ldr	r2, [r7, #32]
 8009d1a:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8009d1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d20:	1d1a      	adds	r2, r3, #4
 8009d22:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8009d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d2e:	1d1a      	adds	r2, r3, #4
 8009d30:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8009d34:	693a      	ldr	r2, [r7, #16]
 8009d36:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8009d38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8009d40:	4413      	add	r3, r2
 8009d42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tw3 += twMod3;
 8009d46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009d4e:	4413      	add	r3, r2
 8009d50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tw4 += twMod4;
 8009d54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8009d62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d66:	3b02      	subs	r3, #2
 8009d68:	085b      	lsrs	r3, r3, #1
 8009d6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d6e:	e31c      	b.n	800a3aa <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	ed93 7a00 	vldr	s14, [r3]
 8009d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009d7a:	edd3 7a00 	vldr	s15, [r3]
 8009d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d82:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = p1[0] - p3[0];
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	ed93 7a00 	vldr	s14, [r3]
 8009d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009d90:	edd3 7a00 	vldr	s15, [r3]
 8009d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d98:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	3304      	adds	r3, #4
 8009da0:	ed93 7a00 	vldr	s14, [r3]
 8009da4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009da8:	3304      	adds	r3, #4
 8009daa:	edd3 7a00 	vldr	s15, [r3]
 8009dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009db2:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = p1[1] - p3[1];
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	3304      	adds	r3, #4
 8009dba:	ed93 7a00 	vldr	s14, [r3]
 8009dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009dc2:	3304      	adds	r3, #4
 8009dc4:	edd3 7a00 	vldr	s15, [r3]
 8009dc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009dcc:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8009dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	ed93 7a00 	vldr	s14, [r3]
 8009dda:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8009dde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009de2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009de6:	3304      	adds	r3, #4
 8009de8:	edd3 7a00 	vldr	s15, [r3]
 8009dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009df0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009df4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009df8:	edd3 7a00 	vldr	s15, [r3]
 8009dfc:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8009e00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e08:	edd3 7a00 	vldr	s15, [r3]
 8009e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e10:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8009e14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e18:	edd3 7a00 	vldr	s15, [r3]
 8009e1c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8009e20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e28:	edd3 7a00 	vldr	s15, [r3]
 8009e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e30:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8009e34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e38:	3304      	adds	r3, #4
 8009e3a:	edd3 7a00 	vldr	s15, [r3]
 8009e3e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8009e42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e4a:	3304      	adds	r3, #4
 8009e4c:	edd3 7a00 	vldr	s15, [r3]
 8009e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e54:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8009e58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e5c:	3304      	adds	r3, #4
 8009e5e:	edd3 7a00 	vldr	s15, [r3]
 8009e62:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8009e66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e6e:	3304      	adds	r3, #4
 8009e70:	edd3 7a00 	vldr	s15, [r3]
 8009e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e78:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8009e7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e80:	ed93 7a00 	vldr	s14, [r3]
 8009e84:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8009e88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e90:	edd3 7a00 	vldr	s15, [r3]
 8009e94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e98:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009e9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009ea0:	ed93 7a00 	vldr	s14, [r3]
 8009ea4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8009ea8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009eac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009eb0:	edd3 7a00 	vldr	s15, [r3]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	1d1a      	adds	r2, r3, #4
 8009eb8:	603a      	str	r2, [r7, #0]
 8009eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ebe:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8009ec2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	ed93 7a00 	vldr	s14, [r3]
 8009ecc:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8009ed0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ed4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ed8:	3304      	adds	r3, #4
 8009eda:	edd3 7a00 	vldr	s15, [r3]
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	1d1a      	adds	r2, r3, #4
 8009ee2:	603a      	str	r2, [r7, #0]
 8009ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ee8:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8009eec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ef0:	3b04      	subs	r3, #4
 8009ef2:	ed93 7a00 	vldr	s14, [r3]
 8009ef6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009efa:	3b04      	subs	r3, #4
 8009efc:	edd3 7a00 	vldr	s15, [r3]
 8009f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f04:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8009f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f0c:	3b04      	subs	r3, #4
 8009f0e:	ed93 7a00 	vldr	s14, [r3]
 8009f12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009f16:	3b04      	subs	r3, #4
 8009f18:	edd3 7a00 	vldr	s15, [r3]
 8009f1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f20:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8009f24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f28:	ed93 7a00 	vldr	s14, [r3]
 8009f2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009f30:	edd3 7a00 	vldr	s15, [r3]
 8009f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f38:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8009f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f40:	ed93 7a00 	vldr	s14, [r3]
 8009f44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009f48:	edd3 7a00 	vldr	s15, [r3]
 8009f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f50:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8009f54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f58:	ed93 7a00 	vldr	s14, [r3]
 8009f5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f60:	edd3 7a00 	vldr	s15, [r3]
 8009f64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f68:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8009f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f70:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8009f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f78:	ed93 7a00 	vldr	s14, [r3]
 8009f7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009f80:	edd3 7a00 	vldr	s15, [r3]
 8009f84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f8c:	3b04      	subs	r3, #4
 8009f8e:	edd3 7a00 	vldr	s15, [r3]
 8009f92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f9a:	3b04      	subs	r3, #4
 8009f9c:	edd3 7a00 	vldr	s15, [r3]
 8009fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fa4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8009fa8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009fac:	3b04      	subs	r3, #4
 8009fae:	edd3 7a00 	vldr	s15, [r3]
 8009fb2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8009fb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009fba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009fbe:	3b04      	subs	r3, #4
 8009fc0:	edd3 7a00 	vldr	s15, [r3]
 8009fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fc8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8009fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009fd0:	edd3 7a00 	vldr	s15, [r3]
 8009fd4:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8009fd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009fdc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009fe0:	edd3 7a00 	vldr	s15, [r3]
 8009fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fe8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8009fec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ff0:	ed93 7a00 	vldr	s14, [r3]
 8009ff4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ff8:	edd3 7a00 	vldr	s15, [r3]
 8009ffc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a000:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800a004:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a008:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800a00c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a010:	3b04      	subs	r3, #4
 800a012:	ed93 7a00 	vldr	s14, [r3]
 800a016:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a01a:	3b04      	subs	r3, #4
 800a01c:	edd3 7a00 	vldr	s15, [r3]
 800a020:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a024:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800a028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a02c:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 800a030:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a034:	ed93 7a00 	vldr	s14, [r3]
 800a038:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800a03c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a040:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a044:	edd3 7a00 	vldr	s15, [r3]
 800a048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a04c:	1f1a      	subs	r2, r3, #4
 800a04e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a052:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a056:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 800a05a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a05e:	3b04      	subs	r3, #4
 800a060:	ed93 7a00 	vldr	s14, [r3]
 800a064:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800a068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a06c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a070:	3b04      	subs	r3, #4
 800a072:	edd3 7a00 	vldr	s15, [r3]
 800a076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a07a:	1f1a      	subs	r2, r3, #4
 800a07c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a080:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a084:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 800a088:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a08c:	1d1a      	adds	r2, r3, #4
 800a08e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = *tw2++;
 800a096:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a09a:	1d1a      	adds	r2, r3, #4
 800a09c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 800a0a4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a0a8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800a0ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0b0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[1] * twI;
 800a0b4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a0b8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a0bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0c0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[1] * twR;
 800a0c4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a0c8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800a0cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0d0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[0] * twI;
 800a0d4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a0d8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a0dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p2++ = m0 + m1;
 800a0e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a0e8:	1d1a      	adds	r2, r3, #4
 800a0ea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800a0ee:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800a0f2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a0f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0fa:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 800a0fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a102:	1d1a      	adds	r2, r3, #4
 800a104:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800a108:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800a10c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800a110:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a114:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 800a118:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800a11c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a120:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a124:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[2] * twR;
 800a128:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800a12c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800a130:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a134:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[2] * twI;
 800a138:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800a13c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a140:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a144:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[3] * twR;
 800a148:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800a14c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800a150:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a154:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd2-- = m0 - m1;
 800a158:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a15c:	1f1a      	subs	r2, r3, #4
 800a15e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a162:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800a166:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a16a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a16e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 800a172:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a176:	1f1a      	subs	r2, r3, #4
 800a178:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a17c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800a180:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800a184:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a188:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 800a18c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw3[1];
 800a194:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a198:	3304      	adds	r3, #4
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw3 += twMod3;
 800a19e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      /* Top */
      m0 = t3[0] * twR;
 800a1ac:	edd7 7a07 	vldr	s15, [r7, #28]
 800a1b0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800a1b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1b8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t3[1] * twI;
 800a1bc:	edd7 7a08 	vldr	s15, [r7, #32]
 800a1c0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a1c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1c8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t3[1] * twR;
 800a1cc:	edd7 7a08 	vldr	s15, [r7, #32]
 800a1d0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800a1d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1d8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t3[0] * twI;
 800a1dc:	edd7 7a07 	vldr	s15, [r7, #28]
 800a1e0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a1e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1e8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p3++ = m0 + m1;
 800a1ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1f0:	1d1a      	adds	r2, r3, #4
 800a1f2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a1f6:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800a1fa:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a1fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a202:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 800a206:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a20a:	1d1a      	adds	r2, r3, #4
 800a20c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a210:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800a214:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800a218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a21c:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 800a220:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800a224:	eef1 7a67 	vneg.f32	s15, s15
 800a228:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800a22c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a230:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 =  t3[2] * twI;
 800a234:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800a238:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a23c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a240:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 =  t3[2] * twR;
 800a244:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800a248:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800a24c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a250:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 =  t3[3] * twI;
 800a254:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800a258:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a25c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a260:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd3-- = m0 - m1;
 800a264:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a268:	1f1a      	subs	r2, r3, #4
 800a26a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a26e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800a272:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a27a:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 800a27e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a282:	1f1a      	subs	r2, r3, #4
 800a284:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a288:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800a28c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800a290:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a294:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 800a298:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw4[1];
 800a2a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw4 += twMod4;
 800a2aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      /* Top */
      m0 = t4[0] * twR;
 800a2b8:	edd7 7a03 	vldr	s15, [r7, #12]
 800a2bc:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800a2c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2c4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[1] * twI;
 800a2c8:	edd7 7a04 	vldr	s15, [r7, #16]
 800a2cc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a2d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d4:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[1] * twR;
 800a2d8:	edd7 7a04 	vldr	s15, [r7, #16]
 800a2dc:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800a2e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2e4:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[0] * twI;
 800a2e8:	edd7 7a03 	vldr	s15, [r7, #12]
 800a2ec:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a2f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2f4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p4++ = m0 + m1;
 800a2f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a2fc:	1d1a      	adds	r2, r3, #4
 800a2fe:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800a302:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800a306:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a30a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a30e:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 800a312:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a316:	1d1a      	adds	r2, r3, #4
 800a318:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800a31c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800a320:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800a324:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a328:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 800a32c:	edd7 7a06 	vldr	s15, [r7, #24]
 800a330:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a334:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a338:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[2] * twR;
 800a33c:	edd7 7a05 	vldr	s15, [r7, #20]
 800a340:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800a344:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a348:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[2] * twI;
 800a34c:	edd7 7a05 	vldr	s15, [r7, #20]
 800a350:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a354:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a358:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[3] * twR;
 800a35c:	edd7 7a06 	vldr	s15, [r7, #24]
 800a360:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800a364:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a368:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd4-- = m0 - m1;
 800a36c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a370:	1f1a      	subs	r2, r3, #4
 800a372:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800a376:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800a37a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a37e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a382:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 800a386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a38a:	1f1a      	subs	r2, r3, #4
 800a38c:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800a390:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800a394:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800a398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a39c:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 800a3a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a3aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f47f acde 	bne.w	8009d70 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	ed93 7a00 	vldr	s14, [r3]
 800a3ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3be:	edd3 7a00 	vldr	s15, [r3]
 800a3c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3c6:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	ed93 7a00 	vldr	s14, [r3]
 800a3d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3d4:	edd3 7a00 	vldr	s15, [r3]
 800a3d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3dc:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	3304      	adds	r3, #4
 800a3e4:	ed93 7a00 	vldr	s14, [r3]
 800a3e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	edd3 7a00 	vldr	s15, [r3]
 800a3f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3f6:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	ed93 7a00 	vldr	s14, [r3]
 800a402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a406:	3304      	adds	r3, #4
 800a408:	edd3 7a00 	vldr	s15, [r3]
 800a40c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a410:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800a414:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a418:	3304      	adds	r3, #4
 800a41a:	ed93 7a00 	vldr	s14, [r3]
 800a41e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800a422:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a426:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a42a:	3304      	adds	r3, #4
 800a42c:	edd3 7a00 	vldr	s15, [r3]
 800a430:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a434:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800a438:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a43c:	edd3 7a00 	vldr	s15, [r3]
 800a440:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800a444:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a448:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a44c:	edd3 7a00 	vldr	s15, [r3]
 800a450:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a454:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800a458:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a45c:	edd3 7a00 	vldr	s15, [r3]
 800a460:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800a464:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a468:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a46c:	edd3 7a00 	vldr	s15, [r3]
 800a470:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a474:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800a478:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a47c:	3304      	adds	r3, #4
 800a47e:	edd3 7a00 	vldr	s15, [r3]
 800a482:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800a486:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a48a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a48e:	3304      	adds	r3, #4
 800a490:	edd3 7a00 	vldr	s15, [r3]
 800a494:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a498:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800a49c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a4a0:	3304      	adds	r3, #4
 800a4a2:	edd3 7a00 	vldr	s15, [r3]
 800a4a6:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800a4aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a4ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a4b2:	3304      	adds	r3, #4
 800a4b4:	edd3 7a00 	vldr	s15, [r3]
 800a4b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4bc:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800a4c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a4c4:	ed93 7a00 	vldr	s14, [r3]
 800a4c8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800a4cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a4d4:	edd3 7a00 	vldr	s15, [r3]
 800a4d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4dc:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800a4e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a4e4:	ed93 7a00 	vldr	s14, [r3]
 800a4e8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800a4ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a4f4:	edd3 7a00 	vldr	s15, [r3]
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	1d1a      	adds	r2, r3, #4
 800a4fc:	603a      	str	r2, [r7, #0]
 800a4fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a502:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800a506:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a50a:	3304      	adds	r3, #4
 800a50c:	ed93 7a00 	vldr	s14, [r3]
 800a510:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800a514:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a518:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a51c:	3304      	adds	r3, #4
 800a51e:	edd3 7a00 	vldr	s15, [r3]
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	1d1a      	adds	r2, r3, #4
 800a526:	603a      	str	r2, [r7, #0]
 800a528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a52c:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 800a530:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw2[1];
 800a538:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a53c:	3304      	adds	r3, #4
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t2[0] * twR;
 800a542:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a546:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800a54a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a54e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t2[1] * twI;
 800a552:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a556:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a55a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a55e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t2[1] * twR;
 800a562:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a566:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800a56a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a56e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t2[0] * twI;
 800a572:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a576:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a57a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a57e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p2++ = m0 + m1;
 800a582:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a586:	1d1a      	adds	r2, r3, #4
 800a588:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800a58c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800a590:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a594:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a598:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800a59c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a5a0:	1d1a      	adds	r2, r3, #4
 800a5a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800a5a6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800a5aa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800a5ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5b2:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 800a5b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw3[1];
 800a5be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t3[0] * twR;
 800a5c8:	edd7 7a07 	vldr	s15, [r7, #28]
 800a5cc:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800a5d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5d4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t3[1] * twI;
 800a5d8:	edd7 7a08 	vldr	s15, [r7, #32]
 800a5dc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a5e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5e4:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t3[1] * twR;
 800a5e8:	edd7 7a08 	vldr	s15, [r7, #32]
 800a5ec:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800a5f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5f4:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t3[0] * twI;
 800a5f8:	edd7 7a07 	vldr	s15, [r7, #28]
 800a5fc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a600:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a604:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p3++ = m0 + m1;
 800a608:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a60c:	1d1a      	adds	r2, r3, #4
 800a60e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a612:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800a616:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a61a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a61e:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 800a622:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a626:	1d1a      	adds	r2, r3, #4
 800a628:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a62c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800a630:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800a634:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a638:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 800a63c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw4[1];
 800a644:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a648:	3304      	adds	r3, #4
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t4[0] * twR;
 800a64e:	edd7 7a03 	vldr	s15, [r7, #12]
 800a652:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800a656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a65a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t4[1] * twI;
 800a65e:	edd7 7a04 	vldr	s15, [r7, #16]
 800a662:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a66a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t4[1] * twR;
 800a66e:	edd7 7a04 	vldr	s15, [r7, #16]
 800a672:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800a676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a67a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t4[0] * twI;
 800a67e:	edd7 7a03 	vldr	s15, [r7, #12]
 800a682:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800a686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a68a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p4++ = m0 + m1;
 800a68e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a692:	1d1a      	adds	r2, r3, #4
 800a694:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800a698:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800a69c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a6a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6a4:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 800a6a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a6ac:	1d1a      	adds	r2, r3, #4
 800a6ae:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800a6b2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800a6b6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800a6ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6be:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 800a6c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6c6:	b299      	uxth	r1, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	685a      	ldr	r2, [r3, #4]
 800a6cc:	2304      	movs	r3, #4
 800a6ce:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800a6d0:	f000 f9f2 	bl	800aab8 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 800a6d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6d8:	b299      	uxth	r1, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685a      	ldr	r2, [r3, #4]
 800a6de:	2304      	movs	r3, #4
 800a6e0:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800a6e2:	f000 f9e9 	bl	800aab8 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 800a6e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6ea:	b299      	uxth	r1, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	2304      	movs	r3, #4
 800a6f2:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800a6f4:	f000 f9e0 	bl	800aab8 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 800a6f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6fc:	b299      	uxth	r1, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685a      	ldr	r2, [r3, #4]
 800a702:	2304      	movs	r3, #4
 800a704:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800a706:	f000 f9d7 	bl	800aab8 <arm_radix8_butterfly_f32>
}
 800a70a:	bf00      	nop
 800a70c:	37b0      	adds	r7, #176	@ 0xb0
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b088      	sub	sp, #32
 800a716:	af00      	add	r7, sp, #0
 800a718:	60f8      	str	r0, [r7, #12]
 800a71a:	60b9      	str	r1, [r7, #8]
 800a71c:	4611      	mov	r1, r2
 800a71e:	461a      	mov	r2, r3
 800a720:	460b      	mov	r3, r1
 800a722:	71fb      	strb	r3, [r7, #7]
 800a724:	4613      	mov	r3, r2
 800a726:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	881b      	ldrh	r3, [r3, #0]
 800a72c:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 800a72e:	79fb      	ldrb	r3, [r7, #7]
 800a730:	2b01      	cmp	r3, #1
 800a732:	d117      	bne.n	800a764 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	3304      	adds	r3, #4
 800a738:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800a73a:	2300      	movs	r3, #0
 800a73c:	61fb      	str	r3, [r7, #28]
 800a73e:	e00d      	b.n	800a75c <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	edd3 7a00 	vldr	s15, [r3]
 800a746:	eef1 7a67 	vneg.f32	s15, s15
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	3308      	adds	r3, #8
 800a754:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	3301      	adds	r3, #1
 800a75a:	61fb      	str	r3, [r7, #28]
 800a75c:	69fa      	ldr	r2, [r7, #28]
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	429a      	cmp	r2, r3
 800a762:	d3ed      	bcc.n	800a740 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a76a:	d040      	beq.n	800a7ee <arm_cfft_f32+0xdc>
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a772:	d845      	bhi.n	800a800 <arm_cfft_f32+0xee>
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a77a:	d033      	beq.n	800a7e4 <arm_cfft_f32+0xd2>
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a782:	d83d      	bhi.n	800a800 <arm_cfft_f32+0xee>
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a78a:	d026      	beq.n	800a7da <arm_cfft_f32+0xc8>
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a792:	d835      	bhi.n	800a800 <arm_cfft_f32+0xee>
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a79a:	d028      	beq.n	800a7ee <arm_cfft_f32+0xdc>
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7a2:	d82d      	bhi.n	800a800 <arm_cfft_f32+0xee>
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7aa:	d01b      	beq.n	800a7e4 <arm_cfft_f32+0xd2>
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7b2:	d825      	bhi.n	800a800 <arm_cfft_f32+0xee>
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	2b80      	cmp	r3, #128	@ 0x80
 800a7b8:	d00f      	beq.n	800a7da <arm_cfft_f32+0xc8>
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	2b80      	cmp	r3, #128	@ 0x80
 800a7be:	d81f      	bhi.n	800a800 <arm_cfft_f32+0xee>
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	2b40      	cmp	r3, #64	@ 0x40
 800a7c4:	d013      	beq.n	800a7ee <arm_cfft_f32+0xdc>
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	2b40      	cmp	r3, #64	@ 0x40
 800a7ca:	d819      	bhi.n	800a800 <arm_cfft_f32+0xee>
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	2b10      	cmp	r3, #16
 800a7d0:	d003      	beq.n	800a7da <arm_cfft_f32+0xc8>
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	2b20      	cmp	r3, #32
 800a7d6:	d005      	beq.n	800a7e4 <arm_cfft_f32+0xd2>
 800a7d8:	e012      	b.n	800a800 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800a7da:	68b9      	ldr	r1, [r7, #8]
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	f7fe ff74 	bl	80096ca <arm_cfft_radix8by2_f32>
    break;
 800a7e2:	e00d      	b.n	800a800 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800a7e4:	68b9      	ldr	r1, [r7, #8]
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f7ff f963 	bl	8009ab2 <arm_cfft_radix8by4_f32>
    break;
 800a7ec:	e008      	b.n	800a800 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	b299      	uxth	r1, r3
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	685a      	ldr	r2, [r3, #4]
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	68b8      	ldr	r0, [r7, #8]
 800a7fa:	f000 f95d 	bl	800aab8 <arm_radix8_butterfly_f32>
    break;
 800a7fe:	bf00      	nop
  }

  if ( bitReverseFlag )
 800a800:	79bb      	ldrb	r3, [r7, #6]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d007      	beq.n	800a816 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	8999      	ldrh	r1, [r3, #12]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	461a      	mov	r2, r3
 800a810:	68b8      	ldr	r0, [r7, #8]
 800a812:	f7fe ff01 	bl	8009618 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 800a816:	79fb      	ldrb	r3, [r7, #7]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d130      	bne.n	800a87e <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	ee07 3a90 	vmov	s15, r3
 800a822:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a82a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a82e:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800a836:	2300      	movs	r3, #0
 800a838:	61fb      	str	r3, [r7, #28]
 800a83a:	e01c      	b.n	800a876 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	1d1a      	adds	r2, r3, #4
 800a840:	61ba      	str	r2, [r7, #24]
 800a842:	ed93 7a00 	vldr	s14, [r3]
 800a846:	edd7 7a04 	vldr	s15, [r7, #16]
 800a84a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a84e:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	edd3 7a00 	vldr	s15, [r3]
 800a858:	eeb1 7a67 	vneg.f32	s14, s15
 800a85c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a860:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a864:	69bb      	ldr	r3, [r7, #24]
 800a866:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	3304      	adds	r3, #4
 800a86e:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	3301      	adds	r3, #1
 800a874:	61fb      	str	r3, [r7, #28]
 800a876:	69fa      	ldr	r2, [r7, #28]
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d3de      	bcc.n	800a83c <arm_cfft_f32+0x12a>
    }
  }
}
 800a87e:	bf00      	nop
 800a880:	3720      	adds	r7, #32
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
	...

0800a888 <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024);
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	2300      	movs	r3, #0
 800a892:	73fb      	strb	r3, [r7, #15]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a89a:	801a      	strh	r2, [r3, #0]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	605a      	str	r2, [r3, #4]
 800a8a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a8cc <arm_cfft_init_2048_f32+0x44>)
 800a8a4:	899a      	ldrh	r2, [r3, #12]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	819a      	strh	r2, [r3, #12]
 800a8aa:	4b08      	ldr	r3, [pc, #32]	@ (800a8cc <arm_cfft_init_2048_f32+0x44>)
 800a8ac:	689a      	ldr	r2, [r3, #8]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	609a      	str	r2, [r3, #8]
 800a8b2:	4b06      	ldr	r3, [pc, #24]	@ (800a8cc <arm_cfft_init_2048_f32+0x44>)
 800a8b4:	685a      	ldr	r2, [r3, #4]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	605a      	str	r2, [r3, #4]
 800a8ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	08031914 	.word	0x08031914

0800a8d0 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024);
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	2300      	movs	r3, #0
 800a8da:	73fb      	strb	r3, [r7, #15]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a8e2:	801a      	strh	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	605a      	str	r2, [r3, #4]
 800a8ea:	4b0a      	ldr	r3, [pc, #40]	@ (800a914 <arm_cfft_init_1024_f32+0x44>)
 800a8ec:	899a      	ldrh	r2, [r3, #12]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	819a      	strh	r2, [r3, #12]
 800a8f2:	4b08      	ldr	r3, [pc, #32]	@ (800a914 <arm_cfft_init_1024_f32+0x44>)
 800a8f4:	689a      	ldr	r2, [r3, #8]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	609a      	str	r2, [r3, #8]
 800a8fa:	4b06      	ldr	r3, [pc, #24]	@ (800a914 <arm_cfft_init_1024_f32+0x44>)
 800a8fc:	685a      	ldr	r2, [r3, #4]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	605a      	str	r2, [r3, #4]
 800a902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a906:	4618      	mov	r0, r3
 800a908:	3714      	adds	r7, #20
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	08031904 	.word	0x08031904

0800a918 <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256);
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	2300      	movs	r3, #0
 800a922:	73fb      	strb	r3, [r7, #15]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a92a:	801a      	strh	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	605a      	str	r2, [r3, #4]
 800a932:	4b0a      	ldr	r3, [pc, #40]	@ (800a95c <arm_cfft_init_512_f32+0x44>)
 800a934:	899a      	ldrh	r2, [r3, #12]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	819a      	strh	r2, [r3, #12]
 800a93a:	4b08      	ldr	r3, [pc, #32]	@ (800a95c <arm_cfft_init_512_f32+0x44>)
 800a93c:	689a      	ldr	r2, [r3, #8]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	609a      	str	r2, [r3, #8]
 800a942:	4b06      	ldr	r3, [pc, #24]	@ (800a95c <arm_cfft_init_512_f32+0x44>)
 800a944:	685a      	ldr	r2, [r3, #4]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	605a      	str	r2, [r3, #4]
 800a94a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a94e:	4618      	mov	r0, r3
 800a950:	3714      	adds	r7, #20
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	080318f4 	.word	0x080318f4

0800a960 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256);
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	2300      	movs	r3, #0
 800a96a:	73fb      	strb	r3, [r7, #15]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a972:	801a      	strh	r2, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	605a      	str	r2, [r3, #4]
 800a97a:	4b0a      	ldr	r3, [pc, #40]	@ (800a9a4 <arm_cfft_init_256_f32+0x44>)
 800a97c:	899a      	ldrh	r2, [r3, #12]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	819a      	strh	r2, [r3, #12]
 800a982:	4b08      	ldr	r3, [pc, #32]	@ (800a9a4 <arm_cfft_init_256_f32+0x44>)
 800a984:	689a      	ldr	r2, [r3, #8]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	609a      	str	r2, [r3, #8]
 800a98a:	4b06      	ldr	r3, [pc, #24]	@ (800a9a4 <arm_cfft_init_256_f32+0x44>)
 800a98c:	685a      	ldr	r2, [r3, #4]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	605a      	str	r2, [r3, #4]
 800a992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a996:	4618      	mov	r0, r3
 800a998:	3714      	adds	r7, #20
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	080318e4 	.word	0x080318e4

0800a9a8 <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64);
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	73fb      	strb	r3, [r7, #15]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2280      	movs	r2, #128	@ 0x80
 800a9b8:	801a      	strh	r2, [r3, #0]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	605a      	str	r2, [r3, #4]
 800a9c0:	4b09      	ldr	r3, [pc, #36]	@ (800a9e8 <arm_cfft_init_128_f32+0x40>)
 800a9c2:	899a      	ldrh	r2, [r3, #12]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	819a      	strh	r2, [r3, #12]
 800a9c8:	4b07      	ldr	r3, [pc, #28]	@ (800a9e8 <arm_cfft_init_128_f32+0x40>)
 800a9ca:	689a      	ldr	r2, [r3, #8]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	609a      	str	r2, [r3, #8]
 800a9d0:	4b05      	ldr	r3, [pc, #20]	@ (800a9e8 <arm_cfft_init_128_f32+0x40>)
 800a9d2:	685a      	ldr	r2, [r3, #4]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	605a      	str	r2, [r3, #4]
 800a9d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3714      	adds	r7, #20
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr
 800a9e8:	080318d4 	.word	0x080318d4

0800a9ec <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64);
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	73fb      	strb	r3, [r7, #15]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2240      	movs	r2, #64	@ 0x40
 800a9fc:	801a      	strh	r2, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	605a      	str	r2, [r3, #4]
 800aa04:	4b09      	ldr	r3, [pc, #36]	@ (800aa2c <arm_cfft_init_64_f32+0x40>)
 800aa06:	899a      	ldrh	r2, [r3, #12]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	819a      	strh	r2, [r3, #12]
 800aa0c:	4b07      	ldr	r3, [pc, #28]	@ (800aa2c <arm_cfft_init_64_f32+0x40>)
 800aa0e:	689a      	ldr	r2, [r3, #8]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	609a      	str	r2, [r3, #8]
 800aa14:	4b05      	ldr	r3, [pc, #20]	@ (800aa2c <arm_cfft_init_64_f32+0x40>)
 800aa16:	685a      	ldr	r2, [r3, #4]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	605a      	str	r2, [r3, #4]
 800aa1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa20:	4618      	mov	r0, r3
 800aa22:	3714      	adds	r7, #20
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	080318c4 	.word	0x080318c4

0800aa30 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16);
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	2300      	movs	r3, #0
 800aa3a:	73fb      	strb	r3, [r7, #15]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2220      	movs	r2, #32
 800aa40:	801a      	strh	r2, [r3, #0]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	605a      	str	r2, [r3, #4]
 800aa48:	4b09      	ldr	r3, [pc, #36]	@ (800aa70 <arm_cfft_init_32_f32+0x40>)
 800aa4a:	899a      	ldrh	r2, [r3, #12]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	819a      	strh	r2, [r3, #12]
 800aa50:	4b07      	ldr	r3, [pc, #28]	@ (800aa70 <arm_cfft_init_32_f32+0x40>)
 800aa52:	689a      	ldr	r2, [r3, #8]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	609a      	str	r2, [r3, #8]
 800aa58:	4b05      	ldr	r3, [pc, #20]	@ (800aa70 <arm_cfft_init_32_f32+0x40>)
 800aa5a:	685a      	ldr	r2, [r3, #4]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	605a      	str	r2, [r3, #4]
 800aa60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa64:	4618      	mov	r0, r3
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	080318b4 	.word	0x080318b4

0800aa74 <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16);
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	73fb      	strb	r3, [r7, #15]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2210      	movs	r2, #16
 800aa84:	801a      	strh	r2, [r3, #0]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	605a      	str	r2, [r3, #4]
 800aa8c:	4b09      	ldr	r3, [pc, #36]	@ (800aab4 <arm_cfft_init_16_f32+0x40>)
 800aa8e:	899a      	ldrh	r2, [r3, #12]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	819a      	strh	r2, [r3, #12]
 800aa94:	4b07      	ldr	r3, [pc, #28]	@ (800aab4 <arm_cfft_init_16_f32+0x40>)
 800aa96:	689a      	ldr	r2, [r3, #8]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	609a      	str	r2, [r3, #8]
 800aa9c:	4b05      	ldr	r3, [pc, #20]	@ (800aab4 <arm_cfft_init_16_f32+0x40>)
 800aa9e:	685a      	ldr	r2, [r3, #4]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	605a      	str	r2, [r3, #4]
 800aaa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	080318a4 	.word	0x080318a4

0800aab8 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b0bd      	sub	sp, #244	@ 0xf4
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	607a      	str	r2, [r7, #4]
 800aac2:	461a      	mov	r2, r3
 800aac4:	460b      	mov	r3, r1
 800aac6:	817b      	strh	r3, [r7, #10]
 800aac8:	4613      	mov	r3, r2
 800aaca:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800aacc:	4b09      	ldr	r3, [pc, #36]	@ (800aaf4 <arm_radix8_butterfly_f32+0x3c>)
 800aace:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

   n2 = fftLen;
 800aad2:	897b      	ldrh	r3, [r7, #10]
 800aad4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

   do
   {
      n1 = n2;
 800aad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aadc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      n2 = n2 >> 3;
 800aae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aae4:	08db      	lsrs	r3, r3, #3
 800aae6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      i1 = 0;
 800aaea:	2300      	movs	r3, #0
 800aaec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800aaf0:	e002      	b.n	800aaf8 <arm_radix8_butterfly_f32+0x40>
 800aaf2:	bf00      	nop
 800aaf4:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 800aaf8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800aafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab00:	4413      	add	r3, r2
 800ab02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         i3 = i2 + n2;
 800ab06:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ab0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab0e:	4413      	add	r3, r2
 800ab10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
         i4 = i3 + n2;
 800ab14:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ab18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         i5 = i4 + n2;
 800ab22:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800ab26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab2a:	4413      	add	r3, r2
 800ab2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
         i6 = i5 + n2;
 800ab30:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800ab34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab38:	4413      	add	r3, r2
 800ab3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         i7 = i6 + n2;
 800ab3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ab42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab46:	4413      	add	r3, r2
 800ab48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
         i8 = i7 + n2;
 800ab4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800ab50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab54:	4413      	add	r3, r2
 800ab56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800ab5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ab5e:	00db      	lsls	r3, r3, #3
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	4413      	add	r3, r2
 800ab64:	ed93 7a00 	vldr	s14, [r3]
 800ab68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab6c:	00db      	lsls	r3, r3, #3
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	4413      	add	r3, r2
 800ab72:	edd3 7a00 	vldr	s15, [r3]
 800ab76:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab7a:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800ab7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ab82:	00db      	lsls	r3, r3, #3
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	4413      	add	r3, r2
 800ab88:	ed93 7a00 	vldr	s14, [r3]
 800ab8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab90:	00db      	lsls	r3, r3, #3
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	4413      	add	r3, r2
 800ab96:	edd3 7a00 	vldr	s15, [r3]
 800ab9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab9e:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800aba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aba6:	00db      	lsls	r3, r3, #3
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	4413      	add	r3, r2
 800abac:	ed93 7a00 	vldr	s14, [r3]
 800abb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800abb4:	00db      	lsls	r3, r3, #3
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	4413      	add	r3, r2
 800abba:	edd3 7a00 	vldr	s15, [r3]
 800abbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abc2:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800abc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800abca:	00db      	lsls	r3, r3, #3
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	4413      	add	r3, r2
 800abd0:	ed93 7a00 	vldr	s14, [r3]
 800abd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800abd8:	00db      	lsls	r3, r3, #3
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	4413      	add	r3, r2
 800abde:	edd3 7a00 	vldr	s15, [r3]
 800abe2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abe6:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800abea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800abee:	00db      	lsls	r3, r3, #3
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	4413      	add	r3, r2
 800abf4:	ed93 7a00 	vldr	s14, [r3]
 800abf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800abfc:	00db      	lsls	r3, r3, #3
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	4413      	add	r3, r2
 800ac02:	edd3 7a00 	vldr	s15, [r3]
 800ac06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac0a:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800ac0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ac12:	00db      	lsls	r3, r3, #3
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	4413      	add	r3, r2
 800ac18:	ed93 7a00 	vldr	s14, [r3]
 800ac1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ac20:	00db      	lsls	r3, r3, #3
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	4413      	add	r3, r2
 800ac26:	edd3 7a00 	vldr	s15, [r3]
 800ac2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac2e:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800ac32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ac36:	00db      	lsls	r3, r3, #3
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	ed93 7a00 	vldr	s14, [r3]
 800ac40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ac44:	00db      	lsls	r3, r3, #3
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	4413      	add	r3, r2
 800ac4a:	edd3 7a00 	vldr	s15, [r3]
 800ac4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac52:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800ac56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ac5a:	00db      	lsls	r3, r3, #3
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	4413      	add	r3, r2
 800ac60:	ed93 7a00 	vldr	s14, [r3]
 800ac64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ac68:	00db      	lsls	r3, r3, #3
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	edd3 7a00 	vldr	s15, [r3]
 800ac72:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac76:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         t1 = r1 - r3;
 800ac7a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800ac7e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800ac82:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac86:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r1 = r1 + r3;
 800ac8a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800ac8e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800ac92:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac96:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r3 = r2 - r4;
 800ac9a:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800ac9e:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800aca2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aca6:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r2 = r2 + r4;
 800acaa:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800acae:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800acb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acb6:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1] = r1 + r2;
 800acba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800acbe:	00db      	lsls	r3, r3, #3
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	4413      	add	r3, r2
 800acc4:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800acc8:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800accc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acd0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800acd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800acd8:	00db      	lsls	r3, r3, #3
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	4413      	add	r3, r2
 800acde:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800ace2:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800ace6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acea:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800acee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	3304      	adds	r3, #4
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	4413      	add	r3, r2
 800acfa:	ed93 7a00 	vldr	s14, [r3]
 800acfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ad02:	00db      	lsls	r3, r3, #3
 800ad04:	3304      	adds	r3, #4
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	4413      	add	r3, r2
 800ad0a:	edd3 7a00 	vldr	s15, [r3]
 800ad0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad12:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800ad16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ad1a:	00db      	lsls	r3, r3, #3
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	68fa      	ldr	r2, [r7, #12]
 800ad20:	4413      	add	r3, r2
 800ad22:	ed93 7a00 	vldr	s14, [r3]
 800ad26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ad2a:	00db      	lsls	r3, r3, #3
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	4413      	add	r3, r2
 800ad32:	edd3 7a00 	vldr	s15, [r3]
 800ad36:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad3a:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800ad3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ad42:	00db      	lsls	r3, r3, #3
 800ad44:	3304      	adds	r3, #4
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	4413      	add	r3, r2
 800ad4a:	ed93 7a00 	vldr	s14, [r3]
 800ad4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ad52:	00db      	lsls	r3, r3, #3
 800ad54:	3304      	adds	r3, #4
 800ad56:	68fa      	ldr	r2, [r7, #12]
 800ad58:	4413      	add	r3, r2
 800ad5a:	edd3 7a00 	vldr	s15, [r3]
 800ad5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad62:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800ad66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ad6a:	00db      	lsls	r3, r3, #3
 800ad6c:	3304      	adds	r3, #4
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	4413      	add	r3, r2
 800ad72:	ed93 7a00 	vldr	s14, [r3]
 800ad76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ad7a:	00db      	lsls	r3, r3, #3
 800ad7c:	3304      	adds	r3, #4
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	4413      	add	r3, r2
 800ad82:	edd3 7a00 	vldr	s15, [r3]
 800ad86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad8a:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800ad8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ad92:	00db      	lsls	r3, r3, #3
 800ad94:	3304      	adds	r3, #4
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	4413      	add	r3, r2
 800ad9a:	ed93 7a00 	vldr	s14, [r3]
 800ad9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ada2:	00db      	lsls	r3, r3, #3
 800ada4:	3304      	adds	r3, #4
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	4413      	add	r3, r2
 800adaa:	edd3 7a00 	vldr	s15, [r3]
 800adae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adb2:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800adb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800adba:	00db      	lsls	r3, r3, #3
 800adbc:	3304      	adds	r3, #4
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	4413      	add	r3, r2
 800adc2:	ed93 7a00 	vldr	s14, [r3]
 800adc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800adca:	00db      	lsls	r3, r3, #3
 800adcc:	3304      	adds	r3, #4
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	4413      	add	r3, r2
 800add2:	edd3 7a00 	vldr	s15, [r3]
 800add6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800adda:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800adde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ade2:	00db      	lsls	r3, r3, #3
 800ade4:	3304      	adds	r3, #4
 800ade6:	68fa      	ldr	r2, [r7, #12]
 800ade8:	4413      	add	r3, r2
 800adea:	ed93 7a00 	vldr	s14, [r3]
 800adee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800adf2:	00db      	lsls	r3, r3, #3
 800adf4:	3304      	adds	r3, #4
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	4413      	add	r3, r2
 800adfa:	edd3 7a00 	vldr	s15, [r3]
 800adfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae02:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800ae06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ae0a:	00db      	lsls	r3, r3, #3
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	4413      	add	r3, r2
 800ae12:	ed93 7a00 	vldr	s14, [r3]
 800ae16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ae1a:	00db      	lsls	r3, r3, #3
 800ae1c:	3304      	adds	r3, #4
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	4413      	add	r3, r2
 800ae22:	edd3 7a00 	vldr	s15, [r3]
 800ae26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae2a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         t2 = r1 - s3;
 800ae2e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800ae32:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800ae36:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae3a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         r1 = r1 + s3;
 800ae3e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800ae42:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800ae46:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae4a:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s3 = r2 - r4;
 800ae4e:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800ae52:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800ae56:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae5a:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         r2 = r2 + r4;
 800ae5e:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800ae62:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800ae66:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae6a:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800ae6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ae72:	00db      	lsls	r3, r3, #3
 800ae74:	3304      	adds	r3, #4
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	4413      	add	r3, r2
 800ae7a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800ae7e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800ae82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae86:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800ae8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae8e:	00db      	lsls	r3, r3, #3
 800ae90:	3304      	adds	r3, #4
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	4413      	add	r3, r2
 800ae96:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800ae9a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800ae9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aea2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800aea6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800aeaa:	00db      	lsls	r3, r3, #3
 800aeac:	68fa      	ldr	r2, [r7, #12]
 800aeae:	4413      	add	r3, r2
 800aeb0:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800aeb4:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800aeb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aebc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800aec0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aec4:	00db      	lsls	r3, r3, #3
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	4413      	add	r3, r2
 800aeca:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800aece:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800aed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aed6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800aeda:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800aede:	00db      	lsls	r3, r3, #3
 800aee0:	3304      	adds	r3, #4
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	4413      	add	r3, r2
 800aee6:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800aeea:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800aeee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aef2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800aef6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aefa:	00db      	lsls	r3, r3, #3
 800aefc:	3304      	adds	r3, #4
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	4413      	add	r3, r2
 800af02:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800af06:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800af0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af0e:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800af12:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800af16:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800af1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af1e:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800af22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af26:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r6 = (r6 + r8) * C81;
 800af2a:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800af2e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800af32:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af36:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800af3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af3e:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r2 = (s6 - s8) * C81;
 800af42:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 800af46:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800af4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af4e:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800af52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af56:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = (s6 + s8) * C81;
 800af5a:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 800af5e:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800af62:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af66:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800af6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af6e:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         t1 = r5 - r1;
 800af72:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800af76:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800af7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af7e:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r5 = r5 + r1;
 800af82:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800af86:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800af8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af8e:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r8 = r7 - r6;
 800af92:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800af96:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800af9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af9e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         r7 = r7 + r6;
 800afa2:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800afa6:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800afaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afae:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         t2 = s5 - r2;
 800afb2:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800afb6:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800afba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afbe:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         s5 = s5 + r2;
 800afc2:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800afc6:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800afca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afce:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         s8 = s7 - s6;
 800afd2:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800afd6:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800afda:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afde:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         s7 = s7 + s6;
 800afe2:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800afe6:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800afea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afee:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         pSrc[2 * i2]     = r5 + s7;
 800aff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aff6:	00db      	lsls	r3, r3, #3
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	4413      	add	r3, r2
 800affc:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800b000:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800b004:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b008:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800b00c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b010:	00db      	lsls	r3, r3, #3
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	4413      	add	r3, r2
 800b016:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800b01a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800b01e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b022:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800b026:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b02a:	00db      	lsls	r3, r3, #3
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	4413      	add	r3, r2
 800b030:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800b034:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800b038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b03c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800b040:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b044:	00db      	lsls	r3, r3, #3
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	4413      	add	r3, r2
 800b04a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800b04e:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800b052:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b056:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800b05a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b05e:	00db      	lsls	r3, r3, #3
 800b060:	3304      	adds	r3, #4
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	4413      	add	r3, r2
 800b066:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800b06a:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800b06e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b072:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800b076:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b07a:	00db      	lsls	r3, r3, #3
 800b07c:	3304      	adds	r3, #4
 800b07e:	68fa      	ldr	r2, [r7, #12]
 800b080:	4413      	add	r3, r2
 800b082:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800b086:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800b08a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b08e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800b092:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b096:	00db      	lsls	r3, r3, #3
 800b098:	3304      	adds	r3, #4
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	4413      	add	r3, r2
 800b09e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800b0a2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800b0a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0aa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800b0ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b0b2:	00db      	lsls	r3, r3, #3
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800b0be:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800b0c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0c6:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 800b0ca:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800b0ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b0d2:	4413      	add	r3, r2
 800b0d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      } while (i1 < fftLen);
 800b0d8:	897b      	ldrh	r3, [r7, #10]
 800b0da:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	f4ff ad0a 	bcc.w	800aaf8 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 800b0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0e8:	2b07      	cmp	r3, #7
 800b0ea:	f240 84e3 	bls.w	800bab4 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
      j = 1;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800b0fa:	893b      	ldrh	r3, [r7, #8]
 800b0fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800b100:	4413      	add	r3, r2
 800b102:	67fb      	str	r3, [r7, #124]	@ 0x7c
         ia1 = id;
 800b104:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b106:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
         ia2 = ia1 + id;
 800b10a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800b10e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b110:	4413      	add	r3, r2
 800b112:	67bb      	str	r3, [r7, #120]	@ 0x78
         ia3 = ia2 + id;
 800b114:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b116:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b118:	4413      	add	r3, r2
 800b11a:	677b      	str	r3, [r7, #116]	@ 0x74
         ia4 = ia3 + id;
 800b11c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b11e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b120:	4413      	add	r3, r2
 800b122:	673b      	str	r3, [r7, #112]	@ 0x70
         ia5 = ia4 + id;
 800b124:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b126:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b128:	4413      	add	r3, r2
 800b12a:	66fb      	str	r3, [r7, #108]	@ 0x6c
         ia6 = ia5 + id;
 800b12c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b12e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b130:	4413      	add	r3, r2
 800b132:	66bb      	str	r3, [r7, #104]	@ 0x68
         ia7 = ia6 + id;
 800b134:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b136:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b138:	4413      	add	r3, r2
 800b13a:	667b      	str	r3, [r7, #100]	@ 0x64

         co2 = pCoef[2 * ia1];
 800b13c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b140:	00db      	lsls	r3, r3, #3
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	4413      	add	r3, r2
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	663b      	str	r3, [r7, #96]	@ 0x60
         co3 = pCoef[2 * ia2];
 800b14a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b14c:	00db      	lsls	r3, r3, #3
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	4413      	add	r3, r2
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	65fb      	str	r3, [r7, #92]	@ 0x5c
         co4 = pCoef[2 * ia3];
 800b156:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b158:	00db      	lsls	r3, r3, #3
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	4413      	add	r3, r2
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	65bb      	str	r3, [r7, #88]	@ 0x58
         co5 = pCoef[2 * ia4];
 800b162:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b164:	00db      	lsls	r3, r3, #3
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	4413      	add	r3, r2
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	657b      	str	r3, [r7, #84]	@ 0x54
         co6 = pCoef[2 * ia5];
 800b16e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b170:	00db      	lsls	r3, r3, #3
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	4413      	add	r3, r2
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	653b      	str	r3, [r7, #80]	@ 0x50
         co7 = pCoef[2 * ia6];
 800b17a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b17c:	00db      	lsls	r3, r3, #3
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	4413      	add	r3, r2
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	64fb      	str	r3, [r7, #76]	@ 0x4c
         co8 = pCoef[2 * ia7];
 800b186:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b188:	00db      	lsls	r3, r3, #3
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	4413      	add	r3, r2
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	64bb      	str	r3, [r7, #72]	@ 0x48
         si2 = pCoef[2 * ia1 + 1];
 800b192:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b196:	00db      	lsls	r3, r3, #3
 800b198:	3304      	adds	r3, #4
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	4413      	add	r3, r2
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	647b      	str	r3, [r7, #68]	@ 0x44
         si3 = pCoef[2 * ia2 + 1];
 800b1a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1a4:	00db      	lsls	r3, r3, #3
 800b1a6:	3304      	adds	r3, #4
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	643b      	str	r3, [r7, #64]	@ 0x40
         si4 = pCoef[2 * ia3 + 1];
 800b1b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b1b2:	00db      	lsls	r3, r3, #3
 800b1b4:	3304      	adds	r3, #4
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800b1be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1c0:	00db      	lsls	r3, r3, #3
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	63bb      	str	r3, [r7, #56]	@ 0x38
         si6 = pCoef[2 * ia5 + 1];
 800b1cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1ce:	00db      	lsls	r3, r3, #3
 800b1d0:	3304      	adds	r3, #4
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	4413      	add	r3, r2
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	637b      	str	r3, [r7, #52]	@ 0x34
         si7 = pCoef[2 * ia6 + 1];
 800b1da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b1dc:	00db      	lsls	r3, r3, #3
 800b1de:	3304      	adds	r3, #4
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	633b      	str	r3, [r7, #48]	@ 0x30
         si8 = pCoef[2 * ia7 + 1];
 800b1e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1ea:	00db      	lsls	r3, r3, #3
 800b1ec:	3304      	adds	r3, #4
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

         i1 = j;
 800b1f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800b1fe:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800b202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b206:	4413      	add	r3, r2
 800b208:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            i3 = i2 + n2;
 800b20c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800b210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b214:	4413      	add	r3, r2
 800b216:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            i4 = i3 + n2;
 800b21a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b21e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b222:	4413      	add	r3, r2
 800b224:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            i5 = i4 + n2;
 800b228:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800b22c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b230:	4413      	add	r3, r2
 800b232:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            i6 = i5 + n2;
 800b236:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b23a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b23e:	4413      	add	r3, r2
 800b240:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            i7 = i6 + n2;
 800b244:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b24c:	4413      	add	r3, r2
 800b24e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            i8 = i7 + n2;
 800b252:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b25a:	4413      	add	r3, r2
 800b25c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800b260:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b264:	00db      	lsls	r3, r3, #3
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	4413      	add	r3, r2
 800b26a:	ed93 7a00 	vldr	s14, [r3]
 800b26e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b272:	00db      	lsls	r3, r3, #3
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	4413      	add	r3, r2
 800b278:	edd3 7a00 	vldr	s15, [r3]
 800b27c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b280:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800b284:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b288:	00db      	lsls	r3, r3, #3
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	4413      	add	r3, r2
 800b28e:	ed93 7a00 	vldr	s14, [r3]
 800b292:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b296:	00db      	lsls	r3, r3, #3
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	4413      	add	r3, r2
 800b29c:	edd3 7a00 	vldr	s15, [r3]
 800b2a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2a4:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800b2a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b2ac:	00db      	lsls	r3, r3, #3
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	ed93 7a00 	vldr	s14, [r3]
 800b2b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b2ba:	00db      	lsls	r3, r3, #3
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	4413      	add	r3, r2
 800b2c0:	edd3 7a00 	vldr	s15, [r3]
 800b2c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2c8:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800b2cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b2d0:	00db      	lsls	r3, r3, #3
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	ed93 7a00 	vldr	s14, [r3]
 800b2da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b2de:	00db      	lsls	r3, r3, #3
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	edd3 7a00 	vldr	s15, [r3]
 800b2e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2ec:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800b2f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b2f4:	00db      	lsls	r3, r3, #3
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	ed93 7a00 	vldr	s14, [r3]
 800b2fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b302:	00db      	lsls	r3, r3, #3
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	4413      	add	r3, r2
 800b308:	edd3 7a00 	vldr	s15, [r3]
 800b30c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b310:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800b314:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b318:	00db      	lsls	r3, r3, #3
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	4413      	add	r3, r2
 800b31e:	ed93 7a00 	vldr	s14, [r3]
 800b322:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b326:	00db      	lsls	r3, r3, #3
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	4413      	add	r3, r2
 800b32c:	edd3 7a00 	vldr	s15, [r3]
 800b330:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b334:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800b338:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b33c:	00db      	lsls	r3, r3, #3
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	4413      	add	r3, r2
 800b342:	ed93 7a00 	vldr	s14, [r3]
 800b346:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b34a:	00db      	lsls	r3, r3, #3
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	4413      	add	r3, r2
 800b350:	edd3 7a00 	vldr	s15, [r3]
 800b354:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b358:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800b35c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b360:	00db      	lsls	r3, r3, #3
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	4413      	add	r3, r2
 800b366:	ed93 7a00 	vldr	s14, [r3]
 800b36a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b36e:	00db      	lsls	r3, r3, #3
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	4413      	add	r3, r2
 800b374:	edd3 7a00 	vldr	s15, [r3]
 800b378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b37c:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            t1 = r1 - r3;
 800b380:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800b384:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800b388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b38c:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r1 = r1 + r3;
 800b390:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800b394:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800b398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b39c:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r3 = r2 - r4;
 800b3a0:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800b3a4:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800b3a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3ac:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r2 = r2 + r4;
 800b3b0:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800b3b4:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800b3b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3bc:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            pSrc[2 * i1] = r1 + r2;
 800b3c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b3c4:	00db      	lsls	r3, r3, #3
 800b3c6:	68fa      	ldr	r2, [r7, #12]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800b3ce:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800b3d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3d6:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800b3da:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800b3de:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800b3e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3e6:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800b3ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b3ee:	00db      	lsls	r3, r3, #3
 800b3f0:	3304      	adds	r3, #4
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	ed93 7a00 	vldr	s14, [r3]
 800b3fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b3fe:	00db      	lsls	r3, r3, #3
 800b400:	3304      	adds	r3, #4
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	4413      	add	r3, r2
 800b406:	edd3 7a00 	vldr	s15, [r3]
 800b40a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b40e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800b412:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b416:	00db      	lsls	r3, r3, #3
 800b418:	3304      	adds	r3, #4
 800b41a:	68fa      	ldr	r2, [r7, #12]
 800b41c:	4413      	add	r3, r2
 800b41e:	ed93 7a00 	vldr	s14, [r3]
 800b422:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b426:	00db      	lsls	r3, r3, #3
 800b428:	3304      	adds	r3, #4
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	4413      	add	r3, r2
 800b42e:	edd3 7a00 	vldr	s15, [r3]
 800b432:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b436:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800b43a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	3304      	adds	r3, #4
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	4413      	add	r3, r2
 800b446:	ed93 7a00 	vldr	s14, [r3]
 800b44a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b44e:	00db      	lsls	r3, r3, #3
 800b450:	3304      	adds	r3, #4
 800b452:	68fa      	ldr	r2, [r7, #12]
 800b454:	4413      	add	r3, r2
 800b456:	edd3 7a00 	vldr	s15, [r3]
 800b45a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b45e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800b462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b466:	00db      	lsls	r3, r3, #3
 800b468:	3304      	adds	r3, #4
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	4413      	add	r3, r2
 800b46e:	ed93 7a00 	vldr	s14, [r3]
 800b472:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b476:	00db      	lsls	r3, r3, #3
 800b478:	3304      	adds	r3, #4
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	4413      	add	r3, r2
 800b47e:	edd3 7a00 	vldr	s15, [r3]
 800b482:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b486:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800b48a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b48e:	00db      	lsls	r3, r3, #3
 800b490:	3304      	adds	r3, #4
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	4413      	add	r3, r2
 800b496:	ed93 7a00 	vldr	s14, [r3]
 800b49a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b49e:	00db      	lsls	r3, r3, #3
 800b4a0:	3304      	adds	r3, #4
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	edd3 7a00 	vldr	s15, [r3]
 800b4aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4ae:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800b4b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b4b6:	00db      	lsls	r3, r3, #3
 800b4b8:	3304      	adds	r3, #4
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	4413      	add	r3, r2
 800b4be:	ed93 7a00 	vldr	s14, [r3]
 800b4c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b4c6:	00db      	lsls	r3, r3, #3
 800b4c8:	3304      	adds	r3, #4
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	edd3 7a00 	vldr	s15, [r3]
 800b4d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4d6:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800b4da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b4de:	00db      	lsls	r3, r3, #3
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	ed93 7a00 	vldr	s14, [r3]
 800b4ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b4ee:	00db      	lsls	r3, r3, #3
 800b4f0:	3304      	adds	r3, #4
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	edd3 7a00 	vldr	s15, [r3]
 800b4fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4fe:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800b502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b506:	00db      	lsls	r3, r3, #3
 800b508:	3304      	adds	r3, #4
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	4413      	add	r3, r2
 800b50e:	ed93 7a00 	vldr	s14, [r3]
 800b512:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b516:	00db      	lsls	r3, r3, #3
 800b518:	3304      	adds	r3, #4
 800b51a:	68fa      	ldr	r2, [r7, #12]
 800b51c:	4413      	add	r3, r2
 800b51e:	edd3 7a00 	vldr	s15, [r3]
 800b522:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b526:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            t2 = s1 - s3;
 800b52a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b52e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800b532:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b536:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s1 = s1 + s3;
 800b53a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b53e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800b542:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b546:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s3 = s2 - s4;
 800b54a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b54e:	edd7 7a08 	vldr	s15, [r7, #32]
 800b552:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b556:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s2 = s2 + s4;
 800b55a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b55e:	edd7 7a08 	vldr	s15, [r7, #32]
 800b562:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b566:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            r1 = t1 + s3;
 800b56a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800b56e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800b572:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b576:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            t1 = t1 - s3;
 800b57a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800b57e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800b582:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b586:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800b58a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b58e:	00db      	lsls	r3, r3, #3
 800b590:	3304      	adds	r3, #4
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	4413      	add	r3, r2
 800b596:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b59a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b59e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5a2:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800b5a6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b5aa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b5ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5b2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s1 = t2 - r3;
 800b5b6:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800b5ba:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800b5be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5c2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            t2 = t2 + r3;
 800b5c6:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800b5ca:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800b5ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5d2:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co5 * r2;
 800b5d6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800b5da:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800b5de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5e2:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800b5e6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800b5ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b5ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5f2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800b5f6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800b5fa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b5fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b602:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800b606:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800b60a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800b60e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b612:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800b616:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b61a:	00db      	lsls	r3, r3, #3
 800b61c:	68fa      	ldr	r2, [r7, #12]
 800b61e:	4413      	add	r3, r2
 800b620:	ed97 7a07 	vldr	s14, [r7, #28]
 800b624:	edd7 7a06 	vldr	s15, [r7, #24]
 800b628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b62c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 800b630:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b634:	00db      	lsls	r3, r3, #3
 800b636:	3304      	adds	r3, #4
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	4413      	add	r3, r2
 800b63c:	ed97 7a05 	vldr	s14, [r7, #20]
 800b640:	edd7 7a04 	vldr	s15, [r7, #16]
 800b644:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b648:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800b64c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800b650:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800b654:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b658:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800b65c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800b660:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b664:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b668:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800b66c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800b670:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b674:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b678:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800b67c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800b680:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800b684:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b688:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800b68c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b690:	00db      	lsls	r3, r3, #3
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	4413      	add	r3, r2
 800b696:	ed97 7a07 	vldr	s14, [r7, #28]
 800b69a:	edd7 7a06 	vldr	s15, [r7, #24]
 800b69e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6a2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800b6a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b6aa:	00db      	lsls	r3, r3, #3
 800b6ac:	3304      	adds	r3, #4
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	ed97 7a05 	vldr	s14, [r7, #20]
 800b6b6:	edd7 7a04 	vldr	s15, [r7, #16]
 800b6ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6be:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800b6c2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800b6c6:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800b6ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ce:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800b6d2:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800b6d6:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800b6da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6de:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800b6e2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800b6e6:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800b6ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ee:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800b6f2:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800b6f6:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800b6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6fe:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800b702:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b706:	00db      	lsls	r3, r3, #3
 800b708:	68fa      	ldr	r2, [r7, #12]
 800b70a:	4413      	add	r3, r2
 800b70c:	ed97 7a07 	vldr	s14, [r7, #28]
 800b710:	edd7 7a06 	vldr	s15, [r7, #24]
 800b714:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b718:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800b71c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b720:	00db      	lsls	r3, r3, #3
 800b722:	3304      	adds	r3, #4
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	4413      	add	r3, r2
 800b728:	ed97 7a05 	vldr	s14, [r7, #20]
 800b72c:	edd7 7a04 	vldr	s15, [r7, #16]
 800b730:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b734:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 800b738:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800b73c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800b740:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b744:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800b748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b74c:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r6 = (r6 + r8) * C81;
 800b750:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800b754:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800b758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b75c:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800b760:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b764:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            s1 = (s6 - s8) * C81;
 800b768:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 800b76c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800b770:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b774:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800b778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b77c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s6 = (s6 + s8) * C81;
 800b780:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 800b784:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800b788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b78c:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800b790:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b794:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t1 = r5 - r1;
 800b798:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800b79c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800b7a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7a4:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r5 = r5 + r1;
 800b7a8:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800b7ac:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800b7b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7b4:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r8 = r7 - r6;
 800b7b8:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800b7bc:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800b7c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7c4:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            r7 = r7 + r6;
 800b7c8:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800b7cc:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800b7d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7d4:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            t2 = s5 - s1;
 800b7d8:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800b7dc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b7e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7e4:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s5 = s5 + s1;
 800b7e8:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800b7ec:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b7f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7f4:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s8 = s7 - s6;
 800b7f8:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800b7fc:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800b800:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b804:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            s7 = s7 + s6;
 800b808:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800b80c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800b810:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b814:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            r1 = r5 + s7;
 800b818:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800b81c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800b820:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b824:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = r5 - s7;
 800b828:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800b82c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800b830:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b834:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r6 = t1 + s8;
 800b838:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800b83c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800b840:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b844:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            t1 = t1 - s8;
 800b848:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800b84c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800b850:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b854:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            s1 = s5 - r7;
 800b858:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800b85c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800b860:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b864:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = s5 + r7;
 800b868:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800b86c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800b870:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b874:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s6 = t2 - r8;
 800b878:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800b87c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800b880:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b884:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t2 = t2 + r8;
 800b888:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800b88c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800b890:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b894:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co2 * r1;
 800b898:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800b89c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800b8a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8a4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 800b8a8:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800b8ac:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b8b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8b4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 800b8b8:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800b8bc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b8c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8c4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800b8c8:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800b8cc:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800b8d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8d4:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800b8d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b8dc:	00db      	lsls	r3, r3, #3
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	ed97 7a07 	vldr	s14, [r7, #28]
 800b8e6:	edd7 7a06 	vldr	s15, [r7, #24]
 800b8ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8ee:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800b8f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b8f6:	00db      	lsls	r3, r3, #3
 800b8f8:	3304      	adds	r3, #4
 800b8fa:	68fa      	ldr	r2, [r7, #12]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	ed97 7a05 	vldr	s14, [r7, #20]
 800b902:	edd7 7a04 	vldr	s15, [r7, #16]
 800b906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b90a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800b90e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800b912:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800b916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b91a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800b91e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b922:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800b926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b92a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800b92e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800b932:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800b936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b93a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800b93e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b942:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800b946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b94a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800b94e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b952:	00db      	lsls	r3, r3, #3
 800b954:	68fa      	ldr	r2, [r7, #12]
 800b956:	4413      	add	r3, r2
 800b958:	ed97 7a07 	vldr	s14, [r7, #28]
 800b95c:	edd7 7a06 	vldr	s15, [r7, #24]
 800b960:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b964:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 800b968:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b96c:	00db      	lsls	r3, r3, #3
 800b96e:	3304      	adds	r3, #4
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	4413      	add	r3, r2
 800b974:	ed97 7a05 	vldr	s14, [r7, #20]
 800b978:	edd7 7a04 	vldr	s15, [r7, #16]
 800b97c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b980:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800b984:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800b988:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800b98c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b990:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800b994:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800b998:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800b99c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9a0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800b9a4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800b9a8:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800b9ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9b0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800b9b4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800b9b8:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800b9bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9c0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800b9c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b9c8:	00db      	lsls	r3, r3, #3
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	ed97 7a07 	vldr	s14, [r7, #28]
 800b9d2:	edd7 7a06 	vldr	s15, [r7, #24]
 800b9d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9da:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800b9de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b9e2:	00db      	lsls	r3, r3, #3
 800b9e4:	3304      	adds	r3, #4
 800b9e6:	68fa      	ldr	r2, [r7, #12]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	ed97 7a05 	vldr	s14, [r7, #20]
 800b9ee:	edd7 7a04 	vldr	s15, [r7, #16]
 800b9f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9f6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800b9fa:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800b9fe:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800ba02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba06:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800ba0a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800ba0e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800ba12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba16:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800ba1a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800ba1e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800ba22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba26:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800ba2a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800ba2e:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800ba32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba36:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800ba3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ba3e:	00db      	lsls	r3, r3, #3
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	4413      	add	r3, r2
 800ba44:	ed97 7a07 	vldr	s14, [r7, #28]
 800ba48:	edd7 7a06 	vldr	s15, [r7, #24]
 800ba4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba50:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800ba54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ba58:	00db      	lsls	r3, r3, #3
 800ba5a:	3304      	adds	r3, #4
 800ba5c:	68fa      	ldr	r2, [r7, #12]
 800ba5e:	4413      	add	r3, r2
 800ba60:	ed97 7a05 	vldr	s14, [r7, #20]
 800ba64:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba6c:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 800ba70:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800ba74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba78:	4413      	add	r3, r2
 800ba7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
         } while (i1 < fftLen);
 800ba7e:	897b      	ldrh	r3, [r7, #10]
 800ba80:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800ba84:	429a      	cmp	r2, r3
 800ba86:	f4ff abba 	bcc.w	800b1fe <arm_radix8_butterfly_f32+0x746>

         j++;
 800ba8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba8e:	3301      	adds	r3, #1
 800ba90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      } while (j < n2);
 800ba94:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ba98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	f4ff ab2c 	bcc.w	800b0fa <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800baa2:	893b      	ldrh	r3, [r7, #8]
 800baa4:	00db      	lsls	r3, r3, #3
 800baa6:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 800baa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baac:	2b07      	cmp	r3, #7
 800baae:	f63f a813 	bhi.w	800aad8 <arm_radix8_butterfly_f32+0x20>
}
 800bab2:	e000      	b.n	800bab6 <arm_radix8_butterfly_f32+0xffe>
         break;
 800bab4:	bf00      	nop
}
 800bab6:	bf00      	nop
 800bab8:	37f4      	adds	r7, #244	@ 0xf4
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop

0800bac4 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b095      	sub	sp, #84	@ 0x54
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	695b      	ldr	r3, [r3, #20]
 800bad4:	64bb      	str	r3, [r7, #72]	@ 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	647b      	str	r3, [r7, #68]	@ 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	881b      	ldrh	r3, [r3, #0]
 800bae2:	3b01      	subs	r3, #1
 800bae4:	64fb      	str	r3, [r7, #76]	@ 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800bae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xBI = pB[1];
 800baec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   xAR = pA[0];
 800baf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	637b      	str	r3, [r7, #52]	@ 0x34
   xAI = pA[1];
 800baf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	633b      	str	r3, [r7, #48]	@ 0x30

   twR = *pCoeff++ ;
 800bafe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb00:	1d1a      	adds	r2, r3, #4
 800bb02:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	62fb      	str	r3, [r7, #44]	@ 0x2c
   twI = *pCoeff++ ;
 800bb08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb0a:	1d1a      	adds	r2, r3, #4
 800bb0c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	62bb      	str	r3, [r7, #40]	@ 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800bb12:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800bb16:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800bb1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb1e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800bb22:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800bb26:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800bb2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb2e:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800bb32:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800bb36:	edd7 7a08 	vldr	s15, [r7, #32]
 800bb3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	1d1a      	adds	r2, r3, #4
 800bb42:	607a      	str	r2, [r7, #4]
 800bb44:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800bb48:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb4c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 800bb50:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800bb54:	edd7 7a08 	vldr	s15, [r7, #32]
 800bb58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	1d1a      	adds	r2, r3, #4
 800bb60:	607a      	str	r2, [r7, #4]
 800bb62:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800bb66:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb6a:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800bb6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb70:	00db      	lsls	r3, r3, #3
 800bb72:	68ba      	ldr	r2, [r7, #8]
 800bb74:	4413      	add	r3, r2
 800bb76:	643b      	str	r3, [r7, #64]	@ 0x40
   pA += 2;
 800bb78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb7a:	3308      	adds	r3, #8
 800bb7c:	647b      	str	r3, [r7, #68]	@ 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800bb7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	63bb      	str	r3, [r7, #56]	@ 0x38
      xBR = pB[0];
 800bb84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAR = pA[0];
 800bb8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	637b      	str	r3, [r7, #52]	@ 0x34
      xAI = pA[1];
 800bb90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	633b      	str	r3, [r7, #48]	@ 0x30

      twR = *pCoeff++;
 800bb96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb98:	1d1a      	adds	r2, r3, #4
 800bb9a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 800bba0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bba2:	1d1a      	adds	r2, r3, #4
 800bba4:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xBR - xAR ;
 800bbaa:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800bbae:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800bbb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbb6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xBI + xAI ;
 800bbba:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800bbbe:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800bbc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbc6:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800bbca:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800bbce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800bbd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbd6:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800bbda:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800bbde:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800bbe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbe6:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800bbea:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800bbee:	edd7 7a08 	vldr	s15, [r7, #32]
 800bbf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbf6:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800bbfa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800bbfe:	edd7 7a08 	vldr	s15, [r7, #32]
 800bc02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc06:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800bc0a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800bc0e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800bc12:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bc16:	edd7 7a07 	vldr	s15, [r7, #28]
 800bc1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bc1e:	edd7 7a04 	vldr	s15, [r7, #16]
 800bc22:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	1d1a      	adds	r2, r3, #4
 800bc2a:	607a      	str	r2, [r7, #4]
 800bc2c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800bc30:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc34:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800bc38:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800bc3c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800bc40:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bc44:	edd7 7a06 	vldr	s15, [r7, #24]
 800bc48:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bc4c:	edd7 7a05 	vldr	s15, [r7, #20]
 800bc50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	1d1a      	adds	r2, r3, #4
 800bc58:	607a      	str	r2, [r7, #4]
 800bc5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800bc5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc62:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 800bc66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc68:	3308      	adds	r3, #8
 800bc6a:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 800bc6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc6e:	3b08      	subs	r3, #8
 800bc70:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 800bc72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc74:	3b01      	subs	r3, #1
 800bc76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   } while (k > 0);
 800bc78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	f73f af7f 	bgt.w	800bb7e <stage_rfft_f32+0xba>
}
 800bc80:	bf00      	nop
 800bc82:	bf00      	nop
 800bc84:	3754      	adds	r7, #84	@ 0x54
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr

0800bc8e <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800bc8e:	b480      	push	{r7}
 800bc90:	b095      	sub	sp, #84	@ 0x54
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	60f8      	str	r0, [r7, #12]
 800bc96:	60b9      	str	r1, [r7, #8]
 800bc98:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	695b      	ldr	r3, [r3, #20]
 800bc9e:	64bb      	str	r3, [r7, #72]	@ 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	647b      	str	r3, [r7, #68]	@ 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	881b      	ldrh	r3, [r3, #0]
 800bcac:	3b01      	subs	r3, #1
 800bcae:	64fb      	str	r3, [r7, #76]	@ 0x4c

   xAR = pA[0];
 800bcb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xAI = pA[1];
 800bcb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	63bb      	str	r3, [r7, #56]	@ 0x38

   pCoeff += 2 ;
 800bcbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcbe:	3308      	adds	r3, #8
 800bcc0:	64bb      	str	r3, [r7, #72]	@ 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800bcc2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800bcc6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800bcca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	1d1a      	adds	r2, r3, #4
 800bcd2:	607a      	str	r2, [r7, #4]
 800bcd4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800bcd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcdc:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800bce0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800bce4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800bce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	1d1a      	adds	r2, r3, #4
 800bcf0:	607a      	str	r2, [r7, #4]
 800bcf2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800bcf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcfa:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800bcfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd00:	00db      	lsls	r3, r3, #3
 800bd02:	68ba      	ldr	r2, [r7, #8]
 800bd04:	4413      	add	r3, r2
 800bd06:	643b      	str	r3, [r7, #64]	@ 0x40
   pA +=  2	   ;
 800bd08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd0a:	3308      	adds	r3, #8
 800bd0c:	647b      	str	r3, [r7, #68]	@ 0x44

   while (k > 0)
 800bd0e:	e07c      	b.n	800be0a <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800bd10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	637b      	str	r3, [r7, #52]	@ 0x34
      xBR =   pB[0]    ;
 800bd16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	633b      	str	r3, [r7, #48]	@ 0x30
      xAR =  pA[0];
 800bd1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAI =  pA[1];
 800bd22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	63bb      	str	r3, [r7, #56]	@ 0x38

      twR = *pCoeff++;
 800bd28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd2a:	1d1a      	adds	r2, r3, #4
 800bd2c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 800bd32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd34:	1d1a      	adds	r2, r3, #4
 800bd36:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xAR - xBR ;
 800bd3c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800bd40:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800bd44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd48:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xAI + xBI ;
 800bd4c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800bd50:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800bd54:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd58:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800bd5c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800bd60:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800bd64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd68:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 800bd6c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800bd70:	edd7 7a08 	vldr	s15, [r7, #32]
 800bd74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd78:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 800bd7c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800bd80:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800bd84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd88:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 800bd8c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800bd90:	edd7 7a08 	vldr	s15, [r7, #32]
 800bd94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd98:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800bd9c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800bda0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800bda4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bda8:	edd7 7a07 	vldr	s15, [r7, #28]
 800bdac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bdb0:	edd7 7a06 	vldr	s15, [r7, #24]
 800bdb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	1d1a      	adds	r2, r3, #4
 800bdbc:	607a      	str	r2, [r7, #4]
 800bdbe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800bdc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bdc6:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800bdca:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800bdce:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800bdd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bdd6:	edd7 7a05 	vldr	s15, [r7, #20]
 800bdda:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bdde:	edd7 7a04 	vldr	s15, [r7, #16]
 800bde2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	1d1a      	adds	r2, r3, #4
 800bdea:	607a      	str	r2, [r7, #4]
 800bdec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800bdf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bdf4:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 800bdf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdfa:	3308      	adds	r3, #8
 800bdfc:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 800bdfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be00:	3b08      	subs	r3, #8
 800be02:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 800be04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be06:	3b01      	subs	r3, #1
 800be08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   while (k > 0)
 800be0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f73f af7f 	bgt.w	800bd10 <merge_rfft_f32+0x82>
   }

}
 800be12:	bf00      	nop
 800be14:	bf00      	nop
 800be16:	3754      	adds	r7, #84	@ 0x54
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b086      	sub	sp, #24
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
 800be2c:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800be32:	78fb      	ldrb	r3, [r7, #3]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00b      	beq.n	800be50 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	68b9      	ldr	r1, [r7, #8]
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f7ff ff26 	bl	800bc8e <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800be42:	78fa      	ldrb	r2, [r7, #3]
 800be44:	2301      	movs	r3, #1
 800be46:	6879      	ldr	r1, [r7, #4]
 800be48:	6978      	ldr	r0, [r7, #20]
 800be4a:	f7fe fc62 	bl	800a712 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800be4e:	e00a      	b.n	800be66 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800be50:	78fa      	ldrb	r2, [r7, #3]
 800be52:	2301      	movs	r3, #1
 800be54:	68b9      	ldr	r1, [r7, #8]
 800be56:	6978      	ldr	r0, [r7, #20]
 800be58:	f7fe fc5b 	bl	800a712 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	68b9      	ldr	r1, [r7, #8]
 800be60:	68f8      	ldr	r0, [r7, #12]
 800be62:	f7ff fe2f 	bl	800bac4 <stage_rfft_f32>
}
 800be66:	bf00      	nop
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
	...

0800be70 <arm_rfft_fast_init_32_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d102      	bne.n	800be84 <arm_rfft_fast_init_32_f32+0x14>
 800be7e:	f04f 33ff 	mov.w	r3, #4294967295
 800be82:	e013      	b.n	800beac <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4618      	mov	r0, r3
 800be88:	f7fe fdf4 	bl	800aa74 <arm_cfft_init_16_f32>
 800be8c:	4603      	mov	r3, r0
 800be8e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800be90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d002      	beq.n	800be9e <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 800be98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be9c:	e006      	b.n	800beac <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2220      	movs	r2, #32
 800bea2:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a03      	ldr	r2, [pc, #12]	@ (800beb4 <arm_rfft_fast_init_32_f32+0x44>)
 800bea8:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800beaa:	2300      	movs	r3, #0
}
 800beac:	4618      	mov	r0, r3
 800beae:	3710      	adds	r7, #16
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	08021924 	.word	0x08021924

0800beb8 <arm_rfft_fast_init_64_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d102      	bne.n	800becc <arm_rfft_fast_init_64_f32+0x14>
 800bec6:	f04f 33ff 	mov.w	r3, #4294967295
 800beca:	e013      	b.n	800bef4 <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4618      	mov	r0, r3
 800bed0:	f7fe fdae 	bl	800aa30 <arm_cfft_init_32_f32>
 800bed4:	4603      	mov	r3, r0
 800bed6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800bed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d002      	beq.n	800bee6 <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 800bee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bee4:	e006      	b.n	800bef4 <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2240      	movs	r2, #64	@ 0x40
 800beea:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4a03      	ldr	r2, [pc, #12]	@ (800befc <arm_rfft_fast_init_64_f32+0x44>)
 800bef0:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800bef2:	2300      	movs	r3, #0
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3710      	adds	r7, #16
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	080219a4 	.word	0x080219a4

0800bf00 <arm_rfft_fast_init_128_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d102      	bne.n	800bf14 <arm_rfft_fast_init_128_f32+0x14>
 800bf0e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf12:	e013      	b.n	800bf3c <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fe fd68 	bl	800a9ec <arm_cfft_init_64_f32>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800bf20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d002      	beq.n	800bf2e <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 800bf28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf2c:	e006      	b.n	800bf3c <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2280      	movs	r2, #128	@ 0x80
 800bf32:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	4a03      	ldr	r2, [pc, #12]	@ (800bf44 <arm_rfft_fast_init_128_f32+0x44>)
 800bf38:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	08021aa4 	.word	0x08021aa4

0800bf48 <arm_rfft_fast_init_256_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d102      	bne.n	800bf5c <arm_rfft_fast_init_256_f32+0x14>
 800bf56:	f04f 33ff 	mov.w	r3, #4294967295
 800bf5a:	e014      	b.n	800bf86 <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7fe fd22 	bl	800a9a8 <arm_cfft_init_128_f32>
 800bf64:	4603      	mov	r3, r0
 800bf66:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800bf68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d002      	beq.n	800bf76 <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 800bf70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf74:	e007      	b.n	800bf86 <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bf7c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	4a03      	ldr	r2, [pc, #12]	@ (800bf90 <arm_rfft_fast_init_256_f32+0x48>)
 800bf82:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	08021ca4 	.word	0x08021ca4

0800bf94 <arm_rfft_fast_init_512_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d102      	bne.n	800bfa8 <arm_rfft_fast_init_512_f32+0x14>
 800bfa2:	f04f 33ff 	mov.w	r3, #4294967295
 800bfa6:	e014      	b.n	800bfd2 <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7fe fcd8 	bl	800a960 <arm_cfft_init_256_f32>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800bfb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d002      	beq.n	800bfc2 <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 800bfbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfc0:	e007      	b.n	800bfd2 <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bfc8:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4a03      	ldr	r2, [pc, #12]	@ (800bfdc <arm_rfft_fast_init_512_f32+0x48>)
 800bfce:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	080220a4 	.word	0x080220a4

0800bfe0 <arm_rfft_fast_init_1024_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b084      	sub	sp, #16
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d102      	bne.n	800bff4 <arm_rfft_fast_init_1024_f32+0x14>
 800bfee:	f04f 33ff 	mov.w	r3, #4294967295
 800bff2:	e014      	b.n	800c01e <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7fe fc8e 	bl	800a918 <arm_cfft_init_512_f32>
 800bffc:	4603      	mov	r3, r0
 800bffe:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d002      	beq.n	800c00e <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 800c008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c00c:	e007      	b.n	800c01e <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c014:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4a03      	ldr	r2, [pc, #12]	@ (800c028 <arm_rfft_fast_init_1024_f32+0x48>)
 800c01a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	080228a4 	.word	0x080228a4

0800c02c <arm_rfft_fast_init_2048_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d102      	bne.n	800c040 <arm_rfft_fast_init_2048_f32+0x14>
 800c03a:	f04f 33ff 	mov.w	r3, #4294967295
 800c03e:	e014      	b.n	800c06a <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4618      	mov	r0, r3
 800c044:	f7fe fc44 	bl	800a8d0 <arm_cfft_init_1024_f32>
 800c048:	4603      	mov	r3, r0
 800c04a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c04c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d002      	beq.n	800c05a <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 800c054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c058:	e007      	b.n	800c06a <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c060:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	4a03      	ldr	r2, [pc, #12]	@ (800c074 <arm_rfft_fast_init_2048_f32+0x48>)
 800c066:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	080238a4 	.word	0x080238a4

0800c078 <arm_rfft_fast_init_4096_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d102      	bne.n	800c08c <arm_rfft_fast_init_4096_f32+0x14>
 800c086:	f04f 33ff 	mov.w	r3, #4294967295
 800c08a:	e014      	b.n	800c0b6 <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fe fbfa 	bl	800a888 <arm_cfft_init_2048_f32>
 800c094:	4603      	mov	r3, r0
 800c096:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 800c0a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0a4:	e007      	b.n	800c0b6 <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c0ac:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4a03      	ldr	r2, [pc, #12]	@ (800c0c0 <arm_rfft_fast_init_4096_f32+0x48>)
 800c0b2:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c0b4:	2300      	movs	r3, #0
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	080258a4 	.word	0x080258a4

0800c0c4 <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 800c0d0:	887b      	ldrh	r3, [r7, #2]
 800c0d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0d6:	d023      	beq.n	800c120 <arm_rfft_fast_init_f32+0x5c>
 800c0d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0dc:	dc50      	bgt.n	800c180 <arm_rfft_fast_init_f32+0xbc>
 800c0de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c0e2:	d023      	beq.n	800c12c <arm_rfft_fast_init_f32+0x68>
 800c0e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c0e8:	dc4a      	bgt.n	800c180 <arm_rfft_fast_init_f32+0xbc>
 800c0ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c0ee:	d023      	beq.n	800c138 <arm_rfft_fast_init_f32+0x74>
 800c0f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c0f4:	dc44      	bgt.n	800c180 <arm_rfft_fast_init_f32+0xbc>
 800c0f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0fa:	d023      	beq.n	800c144 <arm_rfft_fast_init_f32+0x80>
 800c0fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c100:	dc3e      	bgt.n	800c180 <arm_rfft_fast_init_f32+0xbc>
 800c102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c106:	d023      	beq.n	800c150 <arm_rfft_fast_init_f32+0x8c>
 800c108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c10c:	dc38      	bgt.n	800c180 <arm_rfft_fast_init_f32+0xbc>
 800c10e:	2b80      	cmp	r3, #128	@ 0x80
 800c110:	d024      	beq.n	800c15c <arm_rfft_fast_init_f32+0x98>
 800c112:	2b80      	cmp	r3, #128	@ 0x80
 800c114:	dc34      	bgt.n	800c180 <arm_rfft_fast_init_f32+0xbc>
 800c116:	2b20      	cmp	r3, #32
 800c118:	d02c      	beq.n	800c174 <arm_rfft_fast_init_f32+0xb0>
 800c11a:	2b40      	cmp	r3, #64	@ 0x40
 800c11c:	d024      	beq.n	800c168 <arm_rfft_fast_init_f32+0xa4>
 800c11e:	e02f      	b.n	800c180 <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f7ff ffa9 	bl	800c078 <arm_rfft_fast_init_4096_f32>
 800c126:	4603      	mov	r3, r0
 800c128:	73fb      	strb	r3, [r7, #15]
    break;
 800c12a:	e02c      	b.n	800c186 <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f7ff ff7d 	bl	800c02c <arm_rfft_fast_init_2048_f32>
 800c132:	4603      	mov	r3, r0
 800c134:	73fb      	strb	r3, [r7, #15]
    break;
 800c136:	e026      	b.n	800c186 <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f7ff ff51 	bl	800bfe0 <arm_rfft_fast_init_1024_f32>
 800c13e:	4603      	mov	r3, r0
 800c140:	73fb      	strb	r3, [r7, #15]
    break;
 800c142:	e020      	b.n	800c186 <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f7ff ff25 	bl	800bf94 <arm_rfft_fast_init_512_f32>
 800c14a:	4603      	mov	r3, r0
 800c14c:	73fb      	strb	r3, [r7, #15]
    break;
 800c14e:	e01a      	b.n	800c186 <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f7ff fef9 	bl	800bf48 <arm_rfft_fast_init_256_f32>
 800c156:	4603      	mov	r3, r0
 800c158:	73fb      	strb	r3, [r7, #15]
    break;
 800c15a:	e014      	b.n	800c186 <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f7ff fecf 	bl	800bf00 <arm_rfft_fast_init_128_f32>
 800c162:	4603      	mov	r3, r0
 800c164:	73fb      	strb	r3, [r7, #15]
    break;
 800c166:	e00e      	b.n	800c186 <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7ff fea5 	bl	800beb8 <arm_rfft_fast_init_64_f32>
 800c16e:	4603      	mov	r3, r0
 800c170:	73fb      	strb	r3, [r7, #15]
    break;
 800c172:	e008      	b.n	800c186 <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f7ff fe7b 	bl	800be70 <arm_rfft_fast_init_32_f32>
 800c17a:	4603      	mov	r3, r0
 800c17c:	73fb      	strb	r3, [r7, #15]
    break;
 800c17e:	e002      	b.n	800c186 <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 800c180:	f04f 33ff 	mov.w	r3, #4294967295
 800c184:	e001      	b.n	800c18a <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 800c186:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
	...

0800c194 <arm_rfft_init_8192_q15>:
  @par
                   This function also initializes Twiddle factor table.

 */

RFFTINIT_Q15(8192,4096,1);
 800c194:	b480      	push	{r7}
 800c196:	b085      	sub	sp, #20
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	607a      	str	r2, [r7, #4]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c1a6:	601a      	str	r2, [r3, #0]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	4a0d      	ldr	r2, [pc, #52]	@ (800c1e0 <arm_rfft_init_8192_q15+0x4c>)
 800c1ac:	60da      	str	r2, [r3, #12]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	4a0c      	ldr	r2, [pc, #48]	@ (800c1e4 <arm_rfft_init_8192_q15+0x50>)
 800c1b2:	611a      	str	r2, [r3, #16]
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	b2da      	uxtb	r2, r3
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	711a      	strb	r2, [r3, #4]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	b2da      	uxtb	r2, r3
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	715a      	strb	r2, [r3, #5]
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	609a      	str	r2, [r3, #8]
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	4a06      	ldr	r2, [pc, #24]	@ (800c1e8 <arm_rfft_init_8192_q15+0x54>)
 800c1ce:	615a      	str	r2, [r3, #20]
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3714      	adds	r7, #20
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop
 800c1e0:	080298a4 	.word	0x080298a4
 800c1e4:	0802d8a4 	.word	0x0802d8a4
 800c1e8:	080319a4 	.word	0x080319a4

0800c1ec <arm_rfft_init_4096_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(4096,2048,2);
 800c1ec:	b480      	push	{r7}
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c1fe:	601a      	str	r2, [r3, #0]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	4a0d      	ldr	r2, [pc, #52]	@ (800c238 <arm_rfft_init_4096_q15+0x4c>)
 800c204:	60da      	str	r2, [r3, #12]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	4a0c      	ldr	r2, [pc, #48]	@ (800c23c <arm_rfft_init_4096_q15+0x50>)
 800c20a:	611a      	str	r2, [r3, #16]
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	b2da      	uxtb	r2, r3
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	711a      	strb	r2, [r3, #4]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	b2da      	uxtb	r2, r3
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	715a      	strb	r2, [r3, #5]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2202      	movs	r2, #2
 800c220:	609a      	str	r2, [r3, #8]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	4a06      	ldr	r2, [pc, #24]	@ (800c240 <arm_rfft_init_4096_q15+0x54>)
 800c226:	615a      	str	r2, [r3, #20]
 800c228:	2300      	movs	r3, #0
 800c22a:	4618      	mov	r0, r3
 800c22c:	3714      	adds	r7, #20
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr
 800c236:	bf00      	nop
 800c238:	080298a4 	.word	0x080298a4
 800c23c:	0802d8a4 	.word	0x0802d8a4
 800c240:	08031994 	.word	0x08031994

0800c244 <arm_rfft_init_2048_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(2048,1024,4);
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c256:	601a      	str	r2, [r3, #0]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	4a0d      	ldr	r2, [pc, #52]	@ (800c290 <arm_rfft_init_2048_q15+0x4c>)
 800c25c:	60da      	str	r2, [r3, #12]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	4a0c      	ldr	r2, [pc, #48]	@ (800c294 <arm_rfft_init_2048_q15+0x50>)
 800c262:	611a      	str	r2, [r3, #16]
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	b2da      	uxtb	r2, r3
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	711a      	strb	r2, [r3, #4]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	b2da      	uxtb	r2, r3
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	715a      	strb	r2, [r3, #5]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2204      	movs	r2, #4
 800c278:	609a      	str	r2, [r3, #8]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	4a06      	ldr	r2, [pc, #24]	@ (800c298 <arm_rfft_init_2048_q15+0x54>)
 800c27e:	615a      	str	r2, [r3, #20]
 800c280:	2300      	movs	r3, #0
 800c282:	4618      	mov	r0, r3
 800c284:	3714      	adds	r7, #20
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	080298a4 	.word	0x080298a4
 800c294:	0802d8a4 	.word	0x0802d8a4
 800c298:	08031984 	.word	0x08031984

0800c29c <arm_rfft_init_1024_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(1024,512,8);
 800c29c:	b480      	push	{r7}
 800c29e:	b085      	sub	sp, #20
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	607a      	str	r2, [r7, #4]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c2ae:	601a      	str	r2, [r3, #0]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	4a0d      	ldr	r2, [pc, #52]	@ (800c2e8 <arm_rfft_init_1024_q15+0x4c>)
 800c2b4:	60da      	str	r2, [r3, #12]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	4a0c      	ldr	r2, [pc, #48]	@ (800c2ec <arm_rfft_init_1024_q15+0x50>)
 800c2ba:	611a      	str	r2, [r3, #16]
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	b2da      	uxtb	r2, r3
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	711a      	strb	r2, [r3, #4]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	b2da      	uxtb	r2, r3
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	715a      	strb	r2, [r3, #5]
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2208      	movs	r2, #8
 800c2d0:	609a      	str	r2, [r3, #8]
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	4a06      	ldr	r2, [pc, #24]	@ (800c2f0 <arm_rfft_init_1024_q15+0x54>)
 800c2d6:	615a      	str	r2, [r3, #20]
 800c2d8:	2300      	movs	r3, #0
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3714      	adds	r7, #20
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop
 800c2e8:	080298a4 	.word	0x080298a4
 800c2ec:	0802d8a4 	.word	0x0802d8a4
 800c2f0:	08031974 	.word	0x08031974

0800c2f4 <arm_rfft_init_512_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(512,256,16);
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c306:	601a      	str	r2, [r3, #0]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	4a0d      	ldr	r2, [pc, #52]	@ (800c340 <arm_rfft_init_512_q15+0x4c>)
 800c30c:	60da      	str	r2, [r3, #12]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	4a0c      	ldr	r2, [pc, #48]	@ (800c344 <arm_rfft_init_512_q15+0x50>)
 800c312:	611a      	str	r2, [r3, #16]
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	b2da      	uxtb	r2, r3
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	711a      	strb	r2, [r3, #4]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	b2da      	uxtb	r2, r3
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	715a      	strb	r2, [r3, #5]
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2210      	movs	r2, #16
 800c328:	609a      	str	r2, [r3, #8]
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	4a06      	ldr	r2, [pc, #24]	@ (800c348 <arm_rfft_init_512_q15+0x54>)
 800c32e:	615a      	str	r2, [r3, #20]
 800c330:	2300      	movs	r3, #0
 800c332:	4618      	mov	r0, r3
 800c334:	3714      	adds	r7, #20
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr
 800c33e:	bf00      	nop
 800c340:	080298a4 	.word	0x080298a4
 800c344:	0802d8a4 	.word	0x0802d8a4
 800c348:	08031964 	.word	0x08031964

0800c34c <arm_rfft_init_256_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(256,128,32);
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	607a      	str	r2, [r7, #4]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c35e:	601a      	str	r2, [r3, #0]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	4a0d      	ldr	r2, [pc, #52]	@ (800c398 <arm_rfft_init_256_q15+0x4c>)
 800c364:	60da      	str	r2, [r3, #12]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	4a0c      	ldr	r2, [pc, #48]	@ (800c39c <arm_rfft_init_256_q15+0x50>)
 800c36a:	611a      	str	r2, [r3, #16]
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	b2da      	uxtb	r2, r3
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	711a      	strb	r2, [r3, #4]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	b2da      	uxtb	r2, r3
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	715a      	strb	r2, [r3, #5]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2220      	movs	r2, #32
 800c380:	609a      	str	r2, [r3, #8]
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	4a06      	ldr	r2, [pc, #24]	@ (800c3a0 <arm_rfft_init_256_q15+0x54>)
 800c386:	615a      	str	r2, [r3, #20]
 800c388:	2300      	movs	r3, #0
 800c38a:	4618      	mov	r0, r3
 800c38c:	3714      	adds	r7, #20
 800c38e:	46bd      	mov	sp, r7
 800c390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c394:	4770      	bx	lr
 800c396:	bf00      	nop
 800c398:	080298a4 	.word	0x080298a4
 800c39c:	0802d8a4 	.word	0x0802d8a4
 800c3a0:	08031954 	.word	0x08031954

0800c3a4 <arm_rfft_init_128_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(128,64,64);
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2280      	movs	r2, #128	@ 0x80
 800c3b4:	601a      	str	r2, [r3, #0]
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	4a0c      	ldr	r2, [pc, #48]	@ (800c3ec <arm_rfft_init_128_q15+0x48>)
 800c3ba:	60da      	str	r2, [r3, #12]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	4a0c      	ldr	r2, [pc, #48]	@ (800c3f0 <arm_rfft_init_128_q15+0x4c>)
 800c3c0:	611a      	str	r2, [r3, #16]
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	b2da      	uxtb	r2, r3
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	711a      	strb	r2, [r3, #4]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	b2da      	uxtb	r2, r3
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	715a      	strb	r2, [r3, #5]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2240      	movs	r2, #64	@ 0x40
 800c3d6:	609a      	str	r2, [r3, #8]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	4a06      	ldr	r2, [pc, #24]	@ (800c3f4 <arm_rfft_init_128_q15+0x50>)
 800c3dc:	615a      	str	r2, [r3, #20]
 800c3de:	2300      	movs	r3, #0
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3714      	adds	r7, #20
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr
 800c3ec:	080298a4 	.word	0x080298a4
 800c3f0:	0802d8a4 	.word	0x0802d8a4
 800c3f4:	08031944 	.word	0x08031944

0800c3f8 <arm_rfft_init_64_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(64,32,128);
 800c3f8:	b480      	push	{r7}
 800c3fa:	b085      	sub	sp, #20
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	607a      	str	r2, [r7, #4]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2240      	movs	r2, #64	@ 0x40
 800c408:	601a      	str	r2, [r3, #0]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	4a0c      	ldr	r2, [pc, #48]	@ (800c440 <arm_rfft_init_64_q15+0x48>)
 800c40e:	60da      	str	r2, [r3, #12]
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	4a0c      	ldr	r2, [pc, #48]	@ (800c444 <arm_rfft_init_64_q15+0x4c>)
 800c414:	611a      	str	r2, [r3, #16]
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	b2da      	uxtb	r2, r3
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	711a      	strb	r2, [r3, #4]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	b2da      	uxtb	r2, r3
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	715a      	strb	r2, [r3, #5]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2280      	movs	r2, #128	@ 0x80
 800c42a:	609a      	str	r2, [r3, #8]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	4a06      	ldr	r2, [pc, #24]	@ (800c448 <arm_rfft_init_64_q15+0x50>)
 800c430:	615a      	str	r2, [r3, #20]
 800c432:	2300      	movs	r3, #0
 800c434:	4618      	mov	r0, r3
 800c436:	3714      	adds	r7, #20
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr
 800c440:	080298a4 	.word	0x080298a4
 800c444:	0802d8a4 	.word	0x0802d8a4
 800c448:	08031934 	.word	0x08031934

0800c44c <arm_rfft_init_32_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(32,16,256);
 800c44c:	b480      	push	{r7}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	60b9      	str	r1, [r7, #8]
 800c456:	607a      	str	r2, [r7, #4]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2220      	movs	r2, #32
 800c45c:	601a      	str	r2, [r3, #0]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	4a0d      	ldr	r2, [pc, #52]	@ (800c498 <arm_rfft_init_32_q15+0x4c>)
 800c462:	60da      	str	r2, [r3, #12]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	4a0d      	ldr	r2, [pc, #52]	@ (800c49c <arm_rfft_init_32_q15+0x50>)
 800c468:	611a      	str	r2, [r3, #16]
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	b2da      	uxtb	r2, r3
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	711a      	strb	r2, [r3, #4]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	b2da      	uxtb	r2, r3
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	715a      	strb	r2, [r3, #5]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c480:	609a      	str	r2, [r3, #8]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	4a06      	ldr	r2, [pc, #24]	@ (800c4a0 <arm_rfft_init_32_q15+0x54>)
 800c486:	615a      	str	r2, [r3, #20]
 800c488:	2300      	movs	r3, #0
 800c48a:	4618      	mov	r0, r3
 800c48c:	3714      	adds	r7, #20
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop
 800c498:	080298a4 	.word	0x080298a4
 800c49c:	0802d8a4 	.word	0x0802d8a4
 800c4a0:	08031924 	.word	0x08031924

0800c4a4 <arm_rfft_init_q15>:
arm_status arm_rfft_init_q15(
    arm_rfft_instance_q15 * S,
    uint32_t fftLenReal,
    uint32_t ifftFlagR,
    uint32_t bitReverseFlag)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b086      	sub	sp, #24
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
 800c4b0:	603b      	str	r3, [r7, #0]
     /*  Initialise the default arm status */
    arm_status status = ARM_MATH_ARGUMENT_ERROR;
 800c4b2:	23ff      	movs	r3, #255	@ 0xff
 800c4b4:	75fb      	strb	r3, [r7, #23]

    /*  Initialization of coef modifier depending on the FFT length */
    switch (fftLenReal)
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4bc:	d038      	beq.n	800c530 <arm_rfft_init_q15+0x8c>
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4c4:	d87c      	bhi.n	800c5c0 <arm_rfft_init_q15+0x11c>
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4cc:	d038      	beq.n	800c540 <arm_rfft_init_q15+0x9c>
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4d4:	d874      	bhi.n	800c5c0 <arm_rfft_init_q15+0x11c>
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c4dc:	d038      	beq.n	800c550 <arm_rfft_init_q15+0xac>
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c4e4:	d86c      	bhi.n	800c5c0 <arm_rfft_init_q15+0x11c>
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4ec:	d038      	beq.n	800c560 <arm_rfft_init_q15+0xbc>
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4f4:	d864      	bhi.n	800c5c0 <arm_rfft_init_q15+0x11c>
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4fc:	d038      	beq.n	800c570 <arm_rfft_init_q15+0xcc>
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c504:	d85c      	bhi.n	800c5c0 <arm_rfft_init_q15+0x11c>
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c50c:	d038      	beq.n	800c580 <arm_rfft_init_q15+0xdc>
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c514:	d854      	bhi.n	800c5c0 <arm_rfft_init_q15+0x11c>
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	2b80      	cmp	r3, #128	@ 0x80
 800c51a:	d039      	beq.n	800c590 <arm_rfft_init_q15+0xec>
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	2b80      	cmp	r3, #128	@ 0x80
 800c520:	d84e      	bhi.n	800c5c0 <arm_rfft_init_q15+0x11c>
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	2b20      	cmp	r3, #32
 800c526:	d043      	beq.n	800c5b0 <arm_rfft_init_q15+0x10c>
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	2b40      	cmp	r3, #64	@ 0x40
 800c52c:	d038      	beq.n	800c5a0 <arm_rfft_init_q15+0xfc>
 800c52e:	e047      	b.n	800c5c0 <arm_rfft_init_q15+0x11c>
    {
    case 8192U:
        status = arm_rfft_init_8192_q15( S,ifftFlagR,bitReverseFlag );
 800c530:	683a      	ldr	r2, [r7, #0]
 800c532:	6879      	ldr	r1, [r7, #4]
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	f7ff fe2d 	bl	800c194 <arm_rfft_init_8192_q15>
 800c53a:	4603      	mov	r3, r0
 800c53c:	75fb      	strb	r3, [r7, #23]
        break;
 800c53e:	e042      	b.n	800c5c6 <arm_rfft_init_q15+0x122>
    case 4096U:
        status = arm_rfft_init_4096_q15( S,ifftFlagR,bitReverseFlag );
 800c540:	683a      	ldr	r2, [r7, #0]
 800c542:	6879      	ldr	r1, [r7, #4]
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f7ff fe51 	bl	800c1ec <arm_rfft_init_4096_q15>
 800c54a:	4603      	mov	r3, r0
 800c54c:	75fb      	strb	r3, [r7, #23]
        break;
 800c54e:	e03a      	b.n	800c5c6 <arm_rfft_init_q15+0x122>
    case 2048U:
        status = arm_rfft_init_2048_q15( S,ifftFlagR,bitReverseFlag );
 800c550:	683a      	ldr	r2, [r7, #0]
 800c552:	6879      	ldr	r1, [r7, #4]
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	f7ff fe75 	bl	800c244 <arm_rfft_init_2048_q15>
 800c55a:	4603      	mov	r3, r0
 800c55c:	75fb      	strb	r3, [r7, #23]
        break;
 800c55e:	e032      	b.n	800c5c6 <arm_rfft_init_q15+0x122>
    case 1024U:
        status = arm_rfft_init_1024_q15( S,ifftFlagR,bitReverseFlag );
 800c560:	683a      	ldr	r2, [r7, #0]
 800c562:	6879      	ldr	r1, [r7, #4]
 800c564:	68f8      	ldr	r0, [r7, #12]
 800c566:	f7ff fe99 	bl	800c29c <arm_rfft_init_1024_q15>
 800c56a:	4603      	mov	r3, r0
 800c56c:	75fb      	strb	r3, [r7, #23]
        break;
 800c56e:	e02a      	b.n	800c5c6 <arm_rfft_init_q15+0x122>
    case 512U:
        status = arm_rfft_init_512_q15( S,ifftFlagR,bitReverseFlag );
 800c570:	683a      	ldr	r2, [r7, #0]
 800c572:	6879      	ldr	r1, [r7, #4]
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f7ff febd 	bl	800c2f4 <arm_rfft_init_512_q15>
 800c57a:	4603      	mov	r3, r0
 800c57c:	75fb      	strb	r3, [r7, #23]
        break;
 800c57e:	e022      	b.n	800c5c6 <arm_rfft_init_q15+0x122>
    case 256U:
        status = arm_rfft_init_256_q15( S,ifftFlagR,bitReverseFlag );
 800c580:	683a      	ldr	r2, [r7, #0]
 800c582:	6879      	ldr	r1, [r7, #4]
 800c584:	68f8      	ldr	r0, [r7, #12]
 800c586:	f7ff fee1 	bl	800c34c <arm_rfft_init_256_q15>
 800c58a:	4603      	mov	r3, r0
 800c58c:	75fb      	strb	r3, [r7, #23]
        break;
 800c58e:	e01a      	b.n	800c5c6 <arm_rfft_init_q15+0x122>
    case 128U:
        status = arm_rfft_init_128_q15( S,ifftFlagR,bitReverseFlag );
 800c590:	683a      	ldr	r2, [r7, #0]
 800c592:	6879      	ldr	r1, [r7, #4]
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f7ff ff05 	bl	800c3a4 <arm_rfft_init_128_q15>
 800c59a:	4603      	mov	r3, r0
 800c59c:	75fb      	strb	r3, [r7, #23]
        break;
 800c59e:	e012      	b.n	800c5c6 <arm_rfft_init_q15+0x122>
    case 64U:
        status = arm_rfft_init_64_q15( S,ifftFlagR,bitReverseFlag );
 800c5a0:	683a      	ldr	r2, [r7, #0]
 800c5a2:	6879      	ldr	r1, [r7, #4]
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f7ff ff27 	bl	800c3f8 <arm_rfft_init_64_q15>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	75fb      	strb	r3, [r7, #23]
        break;
 800c5ae:	e00a      	b.n	800c5c6 <arm_rfft_init_q15+0x122>
   case 32U:
        status = arm_rfft_init_32_q15( S,ifftFlagR,bitReverseFlag );
 800c5b0:	683a      	ldr	r2, [r7, #0]
 800c5b2:	6879      	ldr	r1, [r7, #4]
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	f7ff ff49 	bl	800c44c <arm_rfft_init_32_q15>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	75fb      	strb	r3, [r7, #23]
        break;
 800c5be:	e002      	b.n	800c5c6 <arm_rfft_init_q15+0x122>
    default:
        /*  Reporting argument error if rfftSize is not valid value */
        status = ARM_MATH_ARGUMENT_ERROR;
 800c5c0:	23ff      	movs	r3, #255	@ 0xff
 800c5c2:	75fb      	strb	r3, [r7, #23]
        break;
 800c5c4:	bf00      	nop
    }

    /* return the status of RFFT Init function */
    return (status);
 800c5c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3718      	adds	r7, #24
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <memset>:
 800c5d2:	4402      	add	r2, r0
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d100      	bne.n	800c5dc <memset+0xa>
 800c5da:	4770      	bx	lr
 800c5dc:	f803 1b01 	strb.w	r1, [r3], #1
 800c5e0:	e7f9      	b.n	800c5d6 <memset+0x4>
	...

0800c5e4 <__libc_init_array>:
 800c5e4:	b570      	push	{r4, r5, r6, lr}
 800c5e6:	4d0d      	ldr	r5, [pc, #52]	@ (800c61c <__libc_init_array+0x38>)
 800c5e8:	4c0d      	ldr	r4, [pc, #52]	@ (800c620 <__libc_init_array+0x3c>)
 800c5ea:	1b64      	subs	r4, r4, r5
 800c5ec:	10a4      	asrs	r4, r4, #2
 800c5ee:	2600      	movs	r6, #0
 800c5f0:	42a6      	cmp	r6, r4
 800c5f2:	d109      	bne.n	800c608 <__libc_init_array+0x24>
 800c5f4:	4d0b      	ldr	r5, [pc, #44]	@ (800c624 <__libc_init_array+0x40>)
 800c5f6:	4c0c      	ldr	r4, [pc, #48]	@ (800c628 <__libc_init_array+0x44>)
 800c5f8:	f000 f826 	bl	800c648 <_init>
 800c5fc:	1b64      	subs	r4, r4, r5
 800c5fe:	10a4      	asrs	r4, r4, #2
 800c600:	2600      	movs	r6, #0
 800c602:	42a6      	cmp	r6, r4
 800c604:	d105      	bne.n	800c612 <__libc_init_array+0x2e>
 800c606:	bd70      	pop	{r4, r5, r6, pc}
 800c608:	f855 3b04 	ldr.w	r3, [r5], #4
 800c60c:	4798      	blx	r3
 800c60e:	3601      	adds	r6, #1
 800c610:	e7ee      	b.n	800c5f0 <__libc_init_array+0xc>
 800c612:	f855 3b04 	ldr.w	r3, [r5], #4
 800c616:	4798      	blx	r3
 800c618:	3601      	adds	r6, #1
 800c61a:	e7f2      	b.n	800c602 <__libc_init_array+0x1e>
 800c61c:	080319bc 	.word	0x080319bc
 800c620:	080319bc 	.word	0x080319bc
 800c624:	080319bc 	.word	0x080319bc
 800c628:	080319c0 	.word	0x080319c0

0800c62c <memcpy>:
 800c62c:	440a      	add	r2, r1
 800c62e:	4291      	cmp	r1, r2
 800c630:	f100 33ff 	add.w	r3, r0, #4294967295
 800c634:	d100      	bne.n	800c638 <memcpy+0xc>
 800c636:	4770      	bx	lr
 800c638:	b510      	push	{r4, lr}
 800c63a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c63e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c642:	4291      	cmp	r1, r2
 800c644:	d1f9      	bne.n	800c63a <memcpy+0xe>
 800c646:	bd10      	pop	{r4, pc}

0800c648 <_init>:
 800c648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c64a:	bf00      	nop
 800c64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c64e:	bc08      	pop	{r3}
 800c650:	469e      	mov	lr, r3
 800c652:	4770      	bx	lr

0800c654 <_fini>:
 800c654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c656:	bf00      	nop
 800c658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c65a:	bc08      	pop	{r3}
 800c65c:	469e      	mov	lr, r3
 800c65e:	4770      	bx	lr
